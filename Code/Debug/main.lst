Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -fastcall -const=RAM -mo
                           A     3    ; -nooptlink -regvar -reduceopt -debug -norevaa
                           A     4    ; -alias 
                           A     5    	DEFINE main_TEXT,SPACE=ROM
                           A     6    	FILE	"..\..\LTX-RA~1\MAIN.C"
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_BSS
000000                     A     9    _captureBuffer:
000000                     A    10    	DS	19
                           A    11    .define "captureBuffer"
                           A    12    .alias "_captureBuffer"
                           A    13    .class 83
                           A    14    .value _captureBuffer
                           A    15    .tag "ser_rx"
                           A    16    .type 8
                           A    17    .type 0
                           A    18    .endef
                           A    19    	SEGMENT main_TEXT
                           A    20    .begrec "ser_rx",19
                           A    21    .define "hasrxed"
                           A    22    .value 0
                           A    23    .class 8
                           A    24    .type 12
                           A    25    .type 0
                           A    26    .endef
                           A    27    .define "buffer"
                           A    28    .value 1
                           A    29    .class 8
                           A    30    .dim 16
                           A    31    .type 108
                           A    32    .type 0
                           A    33    .endef
                           A    34    .define "size"
                           A    35    .value 17
                           A    36    .class 8
                           A    37    .type 12
                           A    38    .type 0
                           A    39    .endef
                           A    40    .define "checksum"
                           A    41    .value 18
                           A    42    .class 8
                           A    43    .type 12
                           A    44    .type 0
                           A    45    .endef
                           A    46    .endrec "ser_rx"
                           A    47    	SEGMENT FAR_BSS
000013                     A    48    _ser_rx_eob_counter:
000013                     A    49    	DS	1
                           A    50    .define "ser_rx_eob_counter"
                           A    51    .alias "_ser_rx_eob_counter"
                           A    52    .class 83
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .value _ser_rx_eob_counter
                           A    54    .type 12
                           A    55    .type 0
                           A    56    .endef
000014                     A    57    _ser_tx_buffer:
000014                     A    58    	DS	16
                           A    59    .define "ser_tx_buffer"
                           A    60    .alias "_ser_tx_buffer"
                           A    61    .class 83
                           A    62    .value _ser_tx_buffer
                           A    63    .dim 16
                           A    64    .type 108
                           A    65    .type 0
                           A    66    .endef
000024                     A    67    _ser_tx_size:
000024                     A    68    	DS	1
                           A    69    .define "ser_tx_size"
                           A    70    .alias "_ser_tx_size"
                           A    71    .class 83
                           A    72    .value _ser_tx_size
                           A    73    .type 12
                           A    74    .type 0
                           A    75    .endef
000025                     A    76    _ser_tx_cooldown:
000025                     A    77    	DS	1
                           A    78    .define "ser_tx_cooldown"
                           A    79    .alias "_ser_tx_cooldown"
                           A    80    .class 83
                           A    81    .value _ser_tx_cooldown
                           A    82    .type 12
                           A    83    .type 0
                           A    84    .endef
000026                     A    85    _ser_tx_currentbyte:
000026                     A    86    	DS	1
                           A    87    .define "ser_tx_currentbyte"
                           A    88    .alias "_ser_tx_currentbyte"
                           A    89    .class 83
                           A    90    .value _ser_tx_currentbyte
                           A    91    .type 12
                           A    92    .type 0
                           A    93    .endef
000027                     A    94    _ir_rx_counter:
000027                     A    95    	DS	1
                           A    96    .define "ir_rx_counter"
                           A    97    .alias "_ir_rx_counter"
                           A    98    .class 83
                           A    99    .value _ir_rx_counter
                           A   100    .type 12
                           A   101    .type 0
                           A   102    .endef
000028                     A   103    _ir_rx_halfbits:
000028                     A   104    	DS	1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .define "ir_rx_halfbits"
                           A   106    .alias "_ir_rx_halfbits"
                           A   107    .class 83
                           A   108    .value _ir_rx_halfbits
                           A   109    .type 12
                           A   110    .type 0
                           A   111    .endef
000029                     A   112    _ir_loaded_tags:
000029                     A   113    	DS	1
                           A   114    .define "ir_loaded_tags"
                           A   115    .alias "_ir_loaded_tags"
                           A   116    .class 83
                           A   117    .value _ir_loaded_tags
                           A   118    .type 12
                           A   119    .type 0
                           A   120    .endef
00002A                     A   121    _btn_counter:
00002A                     A   122    	DS	1
                           A   123    .define "btn_counter"
                           A   124    .alias "_btn_counter"
                           A   125    .class 83
                           A   126    .value _btn_counter
                           A   127    .type 12
                           A   128    .type 0
                           A   129    .endef
00002B                     A   130    _btn_prelim:
00002B                     A   131    	DS	1
                           A   132    .define "btn_prelim"
                           A   133    .alias "_btn_prelim"
                           A   134    .class 83
                           A   135    .value _btn_prelim
                           A   136    .type 12
                           A   137    .type 0
                           A   138    .endef
00002C                     A   139    _btn_pressed:
00002C                     A   140    	DS	1
                           A   141    .define "btn_pressed"
                           A   142    .alias "_btn_pressed"
                           A   143    .class 83
                           A   144    .value _btn_pressed
                           A   145    .type 12
                           A   146    .type 0
                           A   147    .endef
00002D                     A   148    _tempIO:
00002D                     A   149    	DS	1
                           A   150    .define "tempIO"
                           A   151    .alias "_tempIO"
                           A   152    .class 83
                           A   153    .value _tempIO
                           A   154    .type 12
                           A   155    .type 0
                           A   156    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   4


PC     Object              I  Line    Source main.src
00002E                     A   157    _lastIO:
00002E                     A   158    	DS	1
                           A   159    .define "lastIO"
                           A   160    .alias "_lastIO"
                           A   161    .class 83
                           A   162    .value _lastIO
                           A   163    .type 12
                           A   164    .type 0
                           A   165    .endef
00002F                     A   166    _temp_tx_size:
00002F                     A   167    	DS	1
                           A   168    .define "temp_tx_size"
                           A   169    .alias "_temp_tx_size"
                           A   170    .class 83
                           A   171    .value _temp_tx_size
                           A   172    .type 12
                           A   173    .type 0
                           A   174    .endef
000030                     A   175    _sendBarrelReply:
000030                     A   176    	DS	1
                           A   177    .define "sendBarrelReply"
                           A   178    .alias "_sendBarrelReply"
                           A   179    .class 83
                           A   180    .value _sendBarrelReply
                           A   181    .type 12
                           A   182    .type 0
                           A   183    .endef
000031                     A   184    _sendLoadSpecial:
000031                     A   185    	DS	1
                           A   186    .define "sendLoadSpecial"
                           A   187    .alias "_sendLoadSpecial"
                           A   188    .class 83
                           A   189    .value _sendLoadSpecial
                           A   190    .type 12
                           A   191    .type 0
                           A   192    .endef
000032                     A   193    _sendArmSpecial:
000032                     A   194    	DS	1
                           A   195    .define "sendArmSpecial"
                           A   196    .alias "_sendArmSpecial"
                           A   197    .class 83
                           A   198    .value _sendArmSpecial
                           A   199    .type 12
                           A   200    .type 0
                           A   201    .endef
000033                     A   202    _weAreRegistered:
000033                     A   203    	DS	1
                           A   204    .define "weAreRegistered"
                           A   205    .alias "_weAreRegistered"
                           A   206    .class 83
                           A   207    .value _weAreRegistered
                           A   208    .type 12
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   5


PC     Object              I  Line    Source main.src
                           A   209    .type 0
                           A   210    .endef
000034                     A   211    _weAreReloading:
000034                     A   212    	DS	1
                           A   213    .define "weAreReloading"
                           A   214    .alias "_weAreReloading"
                           A   215    .class 83
                           A   216    .value _weAreReloading
                           A   217    .type 12
                           A   218    .type 0
                           A   219    .endef
000035                     A   220    _reloadCooldown:
000035                     A   221    	DS	2*1
                           A   222    .define "reloadCooldown"
                           A   223    .alias "_reloadCooldown"
                           A   224    .class 83
                           A   225    .value _reloadCooldown
                           A   226    .type 13
                           A   227    .type 0
                           A   228    .endef
                           A   229    	SEGMENT ROM_DATA
                           A   230    
                           A   231    
                           A   232    ;**************************** _isr_uartrx *****
                           A   233    ;Name                         Addr/Register   S
                           A   234    ;_ser_rx_eob_counter                 STATIC    
                           A   235    ;_captureBuffer                      STATIC    
                           A   236    ;temp                                    R0    
                           A   237    
                           A   238    
                           A   239    ; Aggregate Stack Size: 0 (words)
                           A   240    
                           A   241    
                           A   242    	.FRAME _n_isr_uartrx,?_n_isr_uartrx,RDATA
                           A   243    	.FRAME _f_isr_uartrx,?_f_isr_uartrx,EDATA
                           A   244    	SEGMENT main_TEXT
000000                     A   245    _isr_uartrx:
                           A   246    .define "_isr_uartrx"
                           A   247    .value _isr_uartrx
                           A   248    .class 2
                           A   249    .type 65
                           A   250    .type 0
                           A   251    .endef
                           A   252    .begfunc "isr_uartrx",35,"_isr_uartrx"
                           A   253    ;    1	/*
                           A   254    ;    2	*   DIY LTX RapidFire
                           A   255    ;    3	*   Copyright (C) 2013  Ryan L. "Izzy84
                           A   256    ;    4	*
                           A   257    ;    5	*    This program is free software; you
                           A   258    ;    6	*    it under the terms of the GNU Gene
                           A   259    ;    7	*    the Free Software Foundation; eith
                           A   260    ;    8	*    (at your option) any later version
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   6


PC     Object              I  Line    Source main.src
                           A   261    ;    9	*
                           A   262    ;   10	*    This program is distributed in the
                           A   263    ;   11	*    but WITHOUT ANY WARRANTY; without 
                           A   264    ;   12	*    MERCHANTABILITY or FITNESS FOR A P
                           A   265    ;   13	*    GNU General Public License for mor
                           A   266    ;   14	*
                           A   267    ;   15	*    You should have received a copy of
                           A   268    ;   16	*    with this program; if not, write t
                           A   269    ;   17	*    51 Franklin Street, Fifth Floor, B
                           A   270    ;   18	*/
                           A   271    ;   19	
                           A   272    ;   20	//Beyond this is the actual code. Unles
                           A   273    ;   21	// probably don't need to go in here. G
                           A   274    ;   22	/**************************************
                           A   275    ;   23	***************************************
                           A   276    ;   24	*                                      
                           A   277    ;   25	*        DANGER                        
                           A   278    ;   26	*                                      
                           A   279    ;   27	***************************************
                           A   280    ;   28	***************************************
                           A   281    ;   29	
                           A   282    ;   30	
                           A   283    ;   31	#include <ez8.h>
                           A   284    ;   32	
                           A   285    ;   33	#include "main.h"
                           A   286    ;   34	
                           A   287    ;   35	void interrupt isr_uartrx(void) {
                           A   288    .define "temp"
                           A   289    .class 4
                           A   290    .reg 1
                           A   291    .type 12
                           A   292    .type 0
                           A   293    .endef
000000 C8FFD0              A   294    	PUSHX	4093
000003 D6 0000             A   295    	CALL	__b_iframeset00
                           A   296    ;   36		unsigned char temp;
                           A   297    ;   37		
                           A   298    ;   38		temp = U0RXD;
                           A   299    .line 38
000006 840F40              A   300    	LDX	R0,3904
                           A   301    ;   39		//Byte received
                           A   302    ;   40		if((U0STAT0 & 0x78) == 0x78) {
                           A   303    .line 40
000009 841F41              A   304    	LDX	R1,3905
00000C 56E178              A   305    	AND	R1,#120
00000F E4E1E2              A   306    	LD	R2,R1
000012 A6E178              A   307    	CP	R1,#120
000015 6B 2C               A   308    	JR	Z,_1_L_5
                           A   309    ;   41			//Error during reception. Do no
                           A   310    ;   42			return;
                           A   311    .line 42
                           A   312    ;   43		} else {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   7


PC     Object              I  Line    Source main.src
                           A   313    .line 43
                           A   314    ;   44			//If the interrupt was because 
                           A   315    ;   45			if(!(captureBuffer.size & 0x80)
                           A   316    .line 45
000017 79800011            A   317    	TMX	_captureBuffer+17,#128
00001B EB 22               A   318    	JR	NE,_1_L_4
                           A   319    ;   46				captureBuffer.buffer[captur
                           A   320    .line 46
00001D 841011              A   321    	LDX	R1,_captureBuffer+17
000020 E4E1E2              A   322    	LD	R2,R1
000023 2C 00               A   323    	LD	R2,#high(_captureBuffer+1)
000025 3C 01               A   324    	LD	R3,#low(_captureBuffer+1)
000027 0231                A   325    	ADD	R3,R1
000029 16E200              A   326    	ADC	R2,#0
00002C 96E0E2              A   327    	LDX	@RR2,R0
00002F 09010011            A   328    	ADDX	_captureBuffer+17,#1
                           A   329    ;   47				captureBuffer.checksum -= t
                           A   330    .line 47
000033 28EE0012            A   331    	SUBX	_captureBuffer+18,R0
                           A   332    ;   48				ser_rx_eob_counter = 0; //C
                           A   333    .line 48
000037 E9000013            A   334    	LDX	_ser_rx_eob_counter,#-0
                           A   335    ;   49				captureBuffer.hasrxed = 1; 
                           A   336    .line 49
00003B E9010000            A   337    	LDX	_captureBuffer,#1
                           A   338    ;   50			}
                           A   339    ;   51		}
00003F                     A   340    _1_L_4:
                           A   341    .line 51
                           A   342    ;   52		//Clear the interrupt bit
                           A   343    ;   53		IRQ0 &= 0xEF;
                           A   344    .line 53
00003F 59EF0FC0            A   345    	ANDX	4032,#239
                           A   346    ;   54	}
000043                     A   347    _1_L_5:
                           A   348    .line 54
000043 D6 0000             A   349    	CALL	__b_iframereset
000046 BF                  A   350    	IRET	
                           A   351    .endfunc "isr_uartrx",54,"_isr_uartrx"
                           A   352    	SEGMENT ROM_DATA
                           A   353    
                           A   354    
                           A   355    ;**************************** _isr_uarttx *****
                           A   356    ;Name                         Addr/Register   S
                           A   357    ;_ser_tx_buffer                      STATIC    
                           A   358    ;_ser_tx_currentbyte                 STATIC    
                           A   359    ;_ser_tx_cooldown                    STATIC    
                           A   360    ;_ser_tx_size                        STATIC    
                           A   361    
                           A   362    
                           A   363    ; Aggregate Stack Size: 0 (words)
                           A   364    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   8


PC     Object              I  Line    Source main.src
                           A   365    
                           A   366    	.FRAME _n_isr_uarttx,?_n_isr_uarttx,RDATA
                           A   367    	.FRAME _f_isr_uarttx,?_f_isr_uarttx,EDATA
                           A   368    	SEGMENT main_TEXT
000047                     A   369    _isr_uarttx:
                           A   370    .define "_isr_uarttx"
                           A   371    .value _isr_uarttx
                           A   372    .class 2
                           A   373    .type 65
                           A   374    .type 0
                           A   375    .endef
                           A   376    .begfunc "isr_uarttx",56,"_isr_uarttx"
000047 C8FFD0              A   377    	PUSHX	4093
00004A D6 0000             A   378    	CALL	__b_iframeset00
                           A   379    ;   55	
                           A   380    ;   56	void interrupt isr_uarttx(void) {
                           A   381    ;   57		//Ready to transmit a byte
                           A   382    ;   58		if(ser_tx_size && !ser_tx_cooldown)
                           A   383    .line 58
00004D A9000024            A   384    	CPX	_ser_tx_size,#-0
000051 6B 33               A   385    	JR	Z,_2_L_11
000053 A9000025            A   386    	CPX	_ser_tx_cooldown,#-0
000057 EB 2D               A   387    	JR	NE,_2_L_11
                           A   388    ;   59			if(ser_tx_currentbyte == ser_tx
                           A   389    .line 59
000059 A8 024026           A   390    	CPX	_ser_tx_currentbyte,_ser_tx_size
00005D EB 0E               A   391    	JR	NE,_2_L_9
                           A   392    ;   60				ser_tx_currentbyte = 0; //R
                           A   393    .line 60
00005F E9000026            A   394    	LDX	_ser_tx_currentbyte,#-0
                           A   395    ;   61				ser_tx_size = 0; 		//C
                           A   396    .line 61
000063 E9000024            A   397    	LDX	_ser_tx_size,#-0
                           A   398    ;   62				ser_tx_cooldown = 116; 	//A
                           A   399    .line 62
000067 E9740025            A   400    	LDX	_ser_tx_cooldown,#116
                           A   401    ;   63										//S
                           A   402    ;   64										//,
                           A   403    ;   65										//,
                           A   404    ;   66										//T
                           A   405    ;   67			} else { //There's still bytes 
                           A   406    .line 67
00006B 8B 19               A   407    	JR	_2_L_11
00006D                     A   408    _2_L_9:
                           A   409    ;   68				U0TXD = ser_tx_buffer[ser_t
                           A   410    .line 68
00006D 842026              A   411    	LDX	R2,_ser_tx_currentbyte
000070 0C 00               A   412    	LD	R0,#high(_ser_tx_buffer)
000072 1C 14               A   413    	LD	R1,#low(_ser_tx_buffer)
000074 0212                A   414    	ADD	R1,R2
000076 16E000              A   415    	ADC	R0,#0
000079 86E0E2              A   416    	LDX	R2,@RR0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:   9


PC     Object              I  Line    Source main.src
00007C 942F40              A   417    	LDX	3904,R2
                           A   418    ;   69				ser_tx_currentbyte++; //Adv
                           A   419    .line 69
00007F 840026              A   420    	LDX	R0,_ser_tx_currentbyte
000082 09010026            A   421    	ADDX	_ser_tx_currentbyte,#1
                           A   422    ;   70			}
                           A   423    ;   71		}
000086                     A   424    _2_L_11:
                           A   425    .line 71
                           A   426    ;   72		//Clear the interrupt bit.
                           A   427    ;   73		IRQ0 &= 0xF7;
                           A   428    .line 73
000086 59F70FC0            A   429    	ANDX	4032,#247
                           A   430    ;   74	}
                           A   431    .line 74
00008A D6 0000             A   432    	CALL	__b_iframereset
00008D BF                  A   433    	IRET	
                           A   434    .endfunc "isr_uarttx",74,"_isr_uarttx"
                           A   435    	SEGMENT ROM_DATA
                           A   436    
                           A   437    
                           A   438    ;**************************** _isr_timer0 *****
                           A   439    ;Name                         Addr/Register   S
                           A   440    ;_ir_loaded_tags                     STATIC    
                           A   441    ;_ir_rx_counter                      STATIC    
                           A   442    ;_ir_rx_halfbits                     STATIC    
                           A   443    ;_btn_pressed                        STATIC    
                           A   444    ;_btn_prelim                         STATIC    
                           A   445    ;_btn_counter                        STATIC    
                           A   446    ;_captureBuffer                      STATIC    
                           A   447    ;_reloadCooldown                     STATIC    
                           A   448    ;_ser_tx_cooldown                    STATIC    
                           A   449    ;_ser_rx_eob_counter                 STATIC    
                           A   450    ;_lastIO                             STATIC    
                           A   451    ;_tempIO                             STATIC    
                           A   452    
                           A   453    
                           A   454    ; Aggregate Stack Size: 0 (words)
                           A   455    
                           A   456    
                           A   457    	.FRAME _n_isr_timer0,?_n_isr_timer0,RDATA
                           A   458    	.FRAME _f_isr_timer0,?_f_isr_timer0,EDATA
                           A   459    	SEGMENT main_TEXT
00008E                     A   460    _isr_timer0:
                           A   461    .define "_isr_timer0"
                           A   462    .value _isr_timer0
                           A   463    .class 2
                           A   464    .type 65
                           A   465    .type 0
                           A   466    .endef
                           A   467    .begfunc "isr_timer0",76,"_isr_timer0"
00008E C8FFD0              A   468    	PUSHX	4093
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  10


PC     Object              I  Line    Source main.src
000091 D6 0000             A   469    	CALL	__b_iframeset00
                           A   470    ;   75	
                           A   471    ;   76	void interrupt isr_timer0(void) {
                           A   472    ;   77		//8KHz interrupt.
                           A   473    ;   78		
                           A   474    ;   79		lastIO = tempIO;
                           A   475    .line 79
000094 E8 02D02E           A   476    	LDX	_lastIO,_tempIO
                           A   477    ;   80		tempIO = PAIN;
                           A   478    .line 80
000098 E8FD202D            A   479    	LDX	_tempIO,4050
                           A   480    ;   81		
                           A   481    ;   82		//Various 1/8ms timers
                           A   482    ;   83		ser_rx_eob_counter += 1;
                           A   483    .line 83
00009C 09010013            A   484    	ADDX	_ser_rx_eob_counter,#1
                           A   485    ;   84		if(ser_tx_cooldown) {
                           A   486    .line 84
0000A0 A9000025            A   487    	CPX	_ser_tx_cooldown,#-0
0000A4 6B 04               A   488    	JR	Z,_3_L_15
                           A   489    ;   85			ser_tx_cooldown -= 1;
                           A   490    .line 85
0000A6 29010025            A   491    	SUBX	_ser_tx_cooldown,#1
                           A   492    ;   86		}
0000AA                     A   493    _3_L_15:
                           A   494    .line 86
                           A   495    ;   87		if(reloadCooldown) {
                           A   496    .line 87
0000AA 840035              A   497    	LDX	R0,_reloadCooldown
0000AD 841036              A   498    	LDX	R1,_reloadCooldown+1
0000B0 4201                A   499    	OR	R0,R1
0000B2 6B 08               A   500    	JR	Z,_3_L_21
                           A   501    ;   88			reloadCooldown -= 1;
                           A   502    .line 88
0000B4 29010036            A   503    	SUBX	_reloadCooldown+1,#1
0000B8 39000035            A   504    	SBCX	_reloadCooldown,#-0
                           A   505    ;   89		}
0000BC                     A   506    _3_L_21:
                           A   507    .line 89
                           A   508    ;   90		
                           A   509    ;   91		//Serial RX end-of-block stuff.
                           A   510    ;   92		//When the RX line has been idle fo
                           A   511    ;   93		// The block has finished transmitt
                           A   512    ;   94		if((ser_rx_eob_counter == 60) && ca
                           A   513    .line 94
0000BC A93C0013            A   514    	CPX	_ser_rx_eob_counter,#60
0000C0 EB 1E               A   515    	JR	NE,_3_L_29
0000C2 A9000000            A   516    	CPX	_captureBuffer,#-0
0000C6 6B 18               A   517    	JR	Z,_3_L_29
                           A   518    ;   95	        captureBuffer.hasrxed = 0;
                           A   519    .line 95
0000C8 E9000000            A   520    	LDX	_captureBuffer,#-0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  11


PC     Object              I  Line    Source main.src
                           A   521    ;   96	        if(!captureBuffer.checksum) {
                           A   522    .line 96
0000CC A9000012            A   523    	CPX	_captureBuffer+18,#-0
0000D0 EB 06               A   524    	JR	NE,_3_L_18
                           A   525    ;   97				//The easiest way to check 
                           A   526    ;   98				// including the checksum b
                           A   527    ;   99				// the block was received c
                           A   528    ;  100	            captureBuffer.size |= 0x80;
                           A   529    .line 100
0000D2 49800011            A   530    	ORX	_captureBuffer+17,#128
                           A   531    ;  101	        } else {
                           A   532    .line 101
0000D6 8B 04               A   533    	JR	_3_L_19
0000D8                     A   534    _3_L_18:
                           A   535    ;  102	            captureBuffer.size = 0; //C
                           A   536    .line 102
0000D8 E9000011            A   537    	LDX	_captureBuffer+17,#-0
                           A   538    ;  103	        }
0000DC                     A   539    _3_L_19:
                           A   540    .line 103
                           A   541    ;  104	        captureBuffer.checksum = 0xFF; 
                           A   542    .line 104
0000DC E9FF0012            A   543    	LDX	_captureBuffer+18,#255
                           A   544    ;  105	    }
0000E0                     A   545    _3_L_29:
                           A   546    .line 105
                           A   547    ;  106		
                           A   548    ;  107		//Button stuff
                           A   549    ;  108		//If the button is not in the state
                           A   550    ;  109		// just pressed the button.
                           A   551    ;  110		if((tempIO & 0x01) != (lastIO & 0x0
                           A   552    .line 110
0000E0 84002D              A   553    	LDX	R0,_tempIO
0000E3 56E001              A   554    	AND	R0,#1
0000E6 84102E              A   555    	LDX	R1,_lastIO
0000E9 56E101              A   556    	AND	R1,#1
0000EC A201                A   557    	CP	R0,R1
0000EE 6B 16               A   558    	JR	Z,_3_L_28
                           A   559    ;  111	        //Button state changed, clear t
                           A   560    ;  112	        btn_counter = 0;
                           A   561    .line 112
0000F0 E900002A            A   562    	LDX	_btn_counter,#-0
                           A   563    ;  113	        if(!(tempIO & 0x01)) {
                           A   564    .line 113
0000F4 7901002D            A   565    	TMX	_tempIO,#1
0000F8 EB 06               A   566    	JR	NE,_3_L_23
                           A   567    ;  114	            //Was just pressed
                           A   568    ;  115	            //Set a flag that it's been
                           A   569    ;  116	            btn_prelim = 1;
                           A   570    .line 116
0000FA E901002B            A   571    	LDX	_btn_prelim,#1
                           A   572    ;  117	        } else {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  12


PC     Object              I  Line    Source main.src
                           A   573    .line 117
0000FE 8B 21               A   574    	JR	_3_L_54
000100                     A   575    _3_L_23:
                           A   576    ;  118				//Was just released
                           A   577    ;  119				btn_prelim = 0;
                           A   578    .line 119
000100 E900002B            A   579    	LDX	_btn_prelim,#-0
                           A   580    ;  120			}
                           A   581    ;  121	    } else {
                           A   582    .line 121
000104 8B 1B               A   583    	JR	_3_L_54
000106                     A   584    _3_L_28:
                           A   585    ;  122			//Button is still in whatever s
                           A   586    ;  123	        btn_counter++; //Count how long
                           A   587    .line 123
000106 84002A              A   588    	LDX	R0,_btn_counter
000109 0901002A            A   589    	ADDX	_btn_counter,#1
                           A   590    ;  124	        if(btn_prelim && (btn_counter >
                           A   591    .line 124
00010D A900002B            A   592    	CPX	_btn_prelim,#-0
000111 6B 0E               A   593    	JR	Z,_3_L_54
000113 A903002A            A   594    	CPX	_btn_counter,#3
000117 3B 08               A   595    	JR	ULE,_3_L_54
                           A   596    ;  125	            btn_prelim = 0;
                           A   597    .line 125
000119 E900002B            A   598    	LDX	_btn_prelim,#-0
                           A   599    ;  126	            btn_pressed = 1; //Mark tha
                           A   600    .line 126
00011D E901002C            A   601    	LDX	_btn_pressed,#1
                           A   602    ;  127	        }
                           A   603    ;  128	    }
000121                     A   604    _3_L_54:
                           A   605    .line 128
                           A   606    ;  129		
                           A   607    ;  130		//IR stuff
                           A   608    ;  131		//If we have ammo loaded in the att
                           A   609    ;  132		// switch back to pistol mode. This
                           A   610    ;  133		// right header and length.
                           A   611    ;  134		if((tempIO & 0x08) != (lastIO & 0x0
                           A   612    .line 134
000121 84002D              A   613    	LDX	R0,_tempIO
000124 56E008              A   614    	AND	R0,#8
000127 84102E              A   615    	LDX	R1,_lastIO
00012A 56E108              A   616    	AND	R1,#8
00012D A201                A   617    	CP	R0,R1
00012F 6B 4F               A   618    	JR	Z,_3_L_53
                           A   619    ;  135			//LAZERMOD's state has changed
                           A   620    ;  136			 if(ir_rx_halfbits == 1) {
                           A   621    .line 136
000131 A9010028            A   622    	CPX	_ir_rx_halfbits,#1
000135 EB 15               A   623    	JR	NE,_3_L_42
                           A   624    ;  137				//if((ir_rx_counter > 22) &
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  13


PC     Object              I  Line    Source main.src
                           A   625    ;  138				 if((ir_rx_counter > 45) &&
                           A   626    .line 138
000137 A92D0027            A   627    	CPX	_ir_rx_counter,#45
00013B 3B 3D               A   628    	JR	ULE,_3_L_43
00013D A9330027            A   629    	CPX	_ir_rx_counter,#51
000141 FB 37               A   630    	JR	NC,_3_L_43
                           A   631    ;  139					//If it's between 5.75m
                           A   632    ;  140					//This is actually the 
                           A   633    ;  141					// to work.
                           A   634    ;  142					ir_rx_halfbits++;
                           A   635    .line 142
000143 840028              A   636    	LDX	R0,_ir_rx_halfbits
000146 09010028            A   637    	ADDX	_ir_rx_halfbits,#1
                           A   638    ;  143				}
                           A   639    ;  144			 } else if(ir_rx_halfbits < 3) 
                           A   640    .line 144
00014A 8B 2E               A   641    	JR	_3_L_43
00014C                     A   642    _3_L_42:
00014C A9030028            A   643    	CPX	_ir_rx_halfbits,#3
000150 FB 15               A   644    	JR	NC,_3_L_40
                           A   645    ;  145				//if((ir_rx_counter > 10) &
                           A   646    ;  146				 if((ir_rx_counter > 21) &&
                           A   647    .line 146
000152 A9150027            A   648    	CPX	_ir_rx_counter,#21
000156 3B 22               A   649    	JR	ULE,_3_L_43
000158 A91B0027            A   650    	CPX	_ir_rx_counter,#27
00015C FB 1C               A   651    	JR	NC,_3_L_43
                           A   652    ;  147					//If it's between 2.75m
                           A   653    ;  148					ir_rx_halfbits++;
                           A   654    .line 148
00015E 840028              A   655    	LDX	R0,_ir_rx_halfbits
000161 09010028            A   656    	ADDX	_ir_rx_halfbits,#1
                           A   657    ;  149				}
                           A   658    ;  150			} else {
                           A   659    .line 150
000165 8B 13               A   660    	JR	_3_L_43
000167                     A   661    _3_L_40:
                           A   662    ;  151				//if((ir_rx_counter > 2) &&
                           A   663    ;  152				if((ir_rx_counter > 5) && (
                           A   664    .line 152
000167 A9050027            A   665    	CPX	_ir_rx_counter,#5
00016B 3B 0D               A   666    	JR	ULE,_3_L_43
00016D A9130027            A   667    	CPX	_ir_rx_counter,#19
000171 FB 07               A   668    	JR	NC,_3_L_43
                           A   669    ;  153					//If it's between 0.75m
                           A   670    ;  154					//If we reached this po
                           A   671    ;  155					ir_rx_halfbits++;
                           A   672    .line 155
000173 840028              A   673    	LDX	R0,_ir_rx_halfbits
000176 09010028            A   674    	ADDX	_ir_rx_halfbits,#1
                           A   675    ;  156				}
                           A   676    ;  157			}
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  14


PC     Object              I  Line    Source main.src
00017A                     A   677    _3_L_43:
                           A   678    .line 157
                           A   679    ;  158			ir_rx_counter = 0;
                           A   680    .line 158
00017A E9000027            A   681    	LDX	_ir_rx_counter,#-0
                           A   682    ;  159		} else {
                           A   683    .line 159
00017E 8B 32               A   684    	JR	_3_L_55
000180                     A   685    _3_L_53:
                           A   686    ;  160			ir_rx_counter++;
                           A   687    .line 160
000180 840027              A   688    	LDX	R0,_ir_rx_counter
000183 09010027            A   689    	ADDX	_ir_rx_counter,#1
                           A   690    ;  161			//if(ir_rx_counter > 40) {
                           A   691    ;  162			if(ir_rx_counter > 64) {
                           A   692    .line 162
000187 A9400027            A   693    	CPX	_ir_rx_counter,#64
00018B 3B 25               A   694    	JR	ULE,_3_L_55
                           A   695    ;  163				//End of IR packet
                           A   696    ;  164				if(ir_rx_halfbits == 17) {
                           A   697    .line 164
00018D A9110028            A   698    	CPX	_ir_rx_halfbits,#17
000191 EB 17               A   699    	JR	NE,_3_L_50
                           A   700    ;  165					//Tag of some sort.
                           A   701    ;  166					if(ir_loaded_tags) { //
                           A   702    .line 166
000193 A9000029            A   703    	CPX	_ir_loaded_tags,#-0
000197 6B 07               A   704    	JR	Z,_3_L_48
                           A   705    ;  167						ir_loaded_tags--; /
                           A   706    .line 167
000199 840029              A   707    	LDX	R0,_ir_loaded_tags
00019C 29010029            A   708    	SUBX	_ir_loaded_tags,#1
                           A   709    ;  168					}
0001A0                     A   710    _3_L_48:
                           A   711    .line 168
                           A   712    ;  169					if(!ir_loaded_tags) { /
                           A   713    .line 169
0001A0 A9000029            A   714    	CPX	_ir_loaded_tags,#-0
0001A4 EB 04               A   715    	JR	NE,_3_L_50
                           A   716    ;  170						//Turn off the INHI
                           A   717    ;  171						PAOUT &= 0xFD; //Di
                           A   718    .line 171
0001A6 59FD0FD3            A   719    	ANDX	4051,#253
                           A   720    ;  172					}
                           A   721    ;  173				}
0001AA                     A   722    _3_L_50:
                           A   723    .line 173
                           A   724    ;  174				//Reset for the next tag.
                           A   725    ;  175				ir_rx_halfbits = 0;
                           A   726    .line 175
0001AA E9000028            A   727    	LDX	_ir_rx_halfbits,#-0
                           A   728    ;  176				ir_rx_counter = 0;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  15


PC     Object              I  Line    Source main.src
                           A   729    .line 176
0001AE E9000027            A   730    	LDX	_ir_rx_counter,#-0
                           A   731    ;  177			}
                           A   732    ;  178		}
                           A   733    ;  179	}
0001B2                     A   734    _3_L_55:
                           A   735    .line 179
0001B2 D6 0000             A   736    	CALL	__b_iframereset
0001B5 BF                  A   737    	IRET	
                           A   738    .endfunc "isr_timer0",179,"_isr_timer0"
                           A   739    	SEGMENT ROM_DATA
                           A   740    
                           A   741    
                           A   742    ;**************************** _init_cpu *******
                           A   743    ;Name                         Addr/Register   S
                           A   744    ;_EI                                 IMPORT  --
                           A   745    ;_isr_timer0                         IMPORT  --
                           A   746    ;_isr_uarttx                         IMPORT  --
                           A   747    ;_isr_uartrx                         IMPORT  --
                           A   748    ;_SET_VECTOR                         IMPORT  --
                           A   749    ;_DI                                 IMPORT  --
                           A   750    
                           A   751    
                           A   752    ; Aggregate Stack Size: 0 (words)
                           A   753    
                           A   754    
                           A   755    	.FRAME _n_init_cpu,?_n_init_cpu,RDATA
                           A   756    	.FRAME _f_init_cpu,?_f_init_cpu,EDATA
                           A   757    	SEGMENT main_TEXT
0001B6                     A   758    _init_cpu:
                           A   759    .define "_init_cpu"
                           A   760    .value _init_cpu
                           A   761    .class 2
                           A   762    .type 65
                           A   763    .type 0
                           A   764    .endef
                           A   765    .begfunc "init_cpu",181,"_init_cpu"
0001B6 D6 0000             A   766    	CALL	__b_frameset00
                           A   767    ;  180	
                           A   768    ;  181	void init_cpu(void) {
                           A   769    ;  182		DI();
                           A   770    .line 182
0001B9 8F                  A   771    	DI
                           A   772    ;  183		
                           A   773    ;  184		//PA0: RELOAD/DBG. Input, external 
                           A   774    ;  185		//PA1: INHIBIT. Output.
                           A   775    ;  186		//PA2: 38KHz. T1OUT, output.
                           A   776    ;  187		//PA3: LAZERMOD. Input.
                           A   777    ;  188		//PA4: RXD. UART, input.
                           A   778    ;  189		//PA5: TXD. UART, output.
                           A   779    ;  190		
                           A   780    ;  191		//Set up Port A.
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  16


PC     Object              I  Line    Source main.src
                           A   781    ;  192		PADD = 0x19;	//00011001
                           A   782    .line 192
0001BA E9010FD0            A   783    	LDX	4048,#1
0001BE E9190FD1            A   784    	LDX	4049,#25
                           A   785    ;  193		PAAF = 0x34;	//00110100
                           A   786    .line 193
0001C2 E9020FD0            A   787    	LDX	4048,#2
0001C6 E9340FD1            A   788    	LDX	4049,#52
                           A   789    ;  194		PAAFS1 = 0x04;	//00000100
                           A   790    .line 194
0001CA E9070FD0            A   791    	LDX	4048,#7
0001CE E9040FD1            A   792    	LDX	4049,#4
                           A   793    ;  195		PAAFS2 = 0x00;	//00000000
                           A   794    .line 195
0001D2 E9080FD0            A   795    	LDX	4048,#8
0001D6 E9000FD1            A   796    	LDX	4049,#-0
                           A   797    ;  196		//PAPUE = 0x10;	//00010000
                           A   798    ;  197		
                           A   799    ;  198		//Set up UART for 2000 baud, 8 data
                           A   800    ;  199		//Set baud rate
                           A   801    ;  200		U0BRH = 0x00;
                           A   802    .line 200
0001DA E9000F46            A   803    	LDX	3910,#-0
                           A   804    ;  201		U0BRL = 0xAD;
                           A   805    .line 201
0001DE E9AD0F47            A   806    	LDX	3911,#173
                           A   807    ;  202		//Set up interrupt
                           A   808    ;  203		SET_VECTOR(UART0_RX_IVECT, isr_uart
                           A   809    ;  204		SET_VECTOR(UART0_TX_IVECT, isr_uart
                           A   810    ;  205		IRQ0ENH |= 0x18;
                           A   811    .line 205
0001E2 49180FC1            A   812    	ORX	4033,#24
                           A   813    ;  206		IRQ0ENL |= 0x18;
                           A   814    .line 206
0001E6 49180FC2            A   815    	ORX	4034,#24
                           A   816    ;  207		IRQ0 &= ~0x18;
                           A   817    .line 207
0001EA 59E70FC0            A   818    	ANDX	4032,#-25
                           A   819    ;  208		//Enable transmitter and receiver, 
                           A   820    ;  209		U0CTL0 = 0xC2; 	//11000010
                           A   821    .line 209
0001EE E9C20F42            A   822    	LDX	3906,#194
                           A   823    ;  210		//Enable interrupts on received dat
                           A   824    ;  211		U0CTL1 = 0x00;	//00000000
                           A   825    .line 211
0001F2 E9000F43            A   826    	LDX	3907,#-0
                           A   827    ;  212		
                           A   828    ;  213		//Set up Timer0 to be an 8KHz heart
                           A   829    ;  214		//Disable timer, set mode to Contin
                           A   830    ;  215		T0CTL1 = 0x01;	//00000001
                           A   831    .line 215
0001F6 E9010F07            A   832    	LDX	3847,#1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  17


PC     Object              I  Line    Source main.src
                           A   833    ;  216		T0CTL0 = 0x00;	//00000000
                           A   834    .line 216
0001FA E9000F06            A   835    	LDX	3846,#-0
                           A   836    ;  217		//Reset count
                           A   837    ;  218		T0H = 0x00; T0L = 0x01;
                           A   838    .line 218
0001FE E9000F00            A   839    	LDX	3840,#-0
000202 E9010F01            A   840    	LDX	3841,#1
                           A   841    ;  219		//Set the reload value
                           A   842    ;  220		//T0RH = 0x05; T0RL = 0x5F;
                           A   843    ;  221		T0RH = 0x02; T0RL = 0xB3;
                           A   844    .line 221
000206 E9020F02            A   845    	LDX	3842,#2
00020A E9B30F03            A   846    	LDX	3843,#179
                           A   847    ;  222		//Set the interrupt vector and prio
                           A   848    ;  223		SET_VECTOR(TIMER0, isr_timer0);
                           A   849    ;  224		IRQ0ENH |= 0x20;
                           A   850    .line 224
00020E 49200FC1            A   851    	ORX	4033,#32
                           A   852    ;  225		IRQ0ENL |= 0x20;
                           A   853    .line 225
000212 49200FC2            A   854    	ORX	4034,#32
                           A   855    ;  226		//Enable timer
                           A   856    ;  227		T0CTL1 |= 0x80;
                           A   857    .line 227
000216 49800F07            A   858    	ORX	3847,#128
                           A   859    ;  228		
                           A   860    ;  229		//Set up Timer1 to be 38KHz, 50% du
                           A   861    ;  230		//Turn off timer, set mode to singl
                           A   862    ;  231		T1CTL1 = 0x43;	//01000011
                           A   863    .line 231
00021A E9430F0F            A   864    	LDX	3855,#67
                           A   865    ;  232		T1CTL0 = 0x00;	//00000000
                           A   866    .line 232
00021E E9000F0E            A   867    	LDX	3854,#-0
                           A   868    ;  233		//Reset count
                           A   869    ;  234		T1H = 0x00; T1L = 0x01;
                           A   870    .line 234
000222 E9000F08            A   871    	LDX	3848,#-0
000226 E9010F09            A   872    	LDX	3849,#1
                           A   873    ;  235		//Set PWM value(Duty cycle)
                           A   874    ;  236		T1PWMH = 0x00; T1PWML = 0x48;
                           A   875    .line 236
00022A E9000F0C            A   876    	LDX	3852,#-0
00022E E9480F0D            A   877    	LDX	3853,#72
                           A   878    ;  237		//Set the reload value(Period)
                           A   879    ;  238		T1RH = 0x00; T1RL = 0x90;
                           A   880    .line 238
000232 E9000F0A            A   881    	LDX	3850,#-0
000236 E9900F0B            A   882    	LDX	3851,#144
                           A   883    ;  239		//Enable timer
                           A   884    ;  240		T1CTL1 |= 0x80;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  18


PC     Object              I  Line    Source main.src
                           A   885    .line 240
00023A 49800F0F            A   886    	ORX	3855,#128
                           A   887    ;  241		
                           A   888    ;  242		//Turn off the inhibit line
                           A   889    ;  243		PAOUT &= 0xFD;
                           A   890    .line 243
00023E 59FD0FD3            A   891    	ANDX	4051,#253
                           A   892    ;  244		
                           A   893    ;  245		//lastIO = PAIN;
                           A   894    ;  246		//tempIO = PAIN;
                           A   895    ;  247		
                           A   896    ;  248		EI();
                           A   897    .line 248
000242 9F                  A   898    	EI
                           A   899    ;  249	}
                           A   900    .line 249
000243 D6 0000             A   901    	CALL	__b_framereset
000246 AF                  A   902    	RET	
                           A   903    .endfunc "init_cpu",249,"_init_cpu"
                           A   904    	SEGMENT ROM_DATA
                           A   905    
                           A   906    
                           A   907    ;**************************** _sendQueue ******
                           A   908    ;Name                         Addr/Register   S
                           A   909    ;_ser_tx_size                        STATIC    
                           A   910    ;_temp_tx_size                       STATIC    
                           A   911    
                           A   912    
                           A   913    ; Aggregate Stack Size: 0 (words)
                           A   914    
                           A   915    
                           A   916    	.FRAME _n_sendQueue,?_n_sendQueue,RDATA
                           A   917    	.FRAME _f_sendQueue,?_f_sendQueue,EDATA
                           A   918    	SEGMENT main_TEXT
000247                     A   919    _sendQueue:
                           A   920    .define "_sendQueue"
                           A   921    .value _sendQueue
                           A   922    .class 2
                           A   923    .type 65
                           A   924    .type 0
                           A   925    .endef
                           A   926    .begfunc "sendQueue",251,"_sendQueue"
000247 D6 0000             A   927    	CALL	__b_frameset00
                           A   928    ;  250	
                           A   929    ;  251	void sendQueue(void) {
                           A   930    ;  252		int i;
                           A   931    ;  253		
                           A   932    ;  254		//Put the count of how many bytes a
                           A   933    ;  255		ser_tx_size = temp_tx_size;
                           A   934    .line 255
00024A E8 02F024           A   935    	LDX	_ser_tx_size,_temp_tx_size
                           A   936    ;  256		
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  19


PC     Object              I  Line    Source main.src
                           A   937    ;  257		//Clear the temporary counter.
                           A   938    ;  258		temp_tx_size = 0;
                           A   939    .line 258
00024E E900002F            A   940    	LDX	_temp_tx_size,#-0
                           A   941    ;  259		
                           A   942    ;  260		//Kickstart the UART.
                           A   943    ;  261		IRQ0 |= 0x08;
                           A   944    .line 261
000252 49080FC0            A   945    	ORX	4032,#8
                           A   946    ;  262	}
                           A   947    .line 262
000256 D6 0000             A   948    	CALL	__b_framereset
000259 AF                  A   949    	RET	
                           A   950    .endfunc "sendQueue",262,"_sendQueue"
                           A   951    	SEGMENT ROM_DATA
                           A   952    
                           A   953    
                           A   954    ;**************************** _queueByte ******
                           A   955    ;Name                         Addr/Register   S
                           A   956    ;_temp_tx_size                       STATIC    
                           A   957    ;_ser_tx_buffer                      STATIC    
                           A   958    ;input                                   R8    
                           A   959    
                           A   960    
                           A   961    ; Aggregate Stack Size: 0 (words)
                           A   962    
                           A   963    
                           A   964    	.FRAME _n_queueByte,?_n_queueByte,RDATA
                           A   965    	.FRAME _f_queueByte,?_f_queueByte,EDATA
                           A   966    	SEGMENT main_TEXT
00025A                     A   967    _queueByte:
                           A   968    .define "_queueByte"
                           A   969    .value _queueByte
                           A   970    .class 2
                           A   971    .type 65
                           A   972    .type 0
                           A   973    .endef
                           A   974    .begfunc "queueByte",264,"_queueByte"
                           A   975    .define "input"
                           A   976    .class 17
                           A   977    .reg 9
                           A   978    .type 12
                           A   979    .type 0
                           A   980    .endef
00025A D6 0000             A   981    	CALL	__b_frameset00
                           A   982    ;  263	
                           A   983    ;  264	void queueByte(unsigned char input) {
                           A   984    ;  265		//Add a byte to the queue.
                           A   985    ;  266		ser_tx_buffer[temp_tx_size] = input
                           A   986    .line 266
00025D 84202F              A   987    	LDX	R2,_temp_tx_size
000260 0C 00               A   988    	LD	R0,#high(_ser_tx_buffer)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  20


PC     Object              I  Line    Source main.src
000262 1C 14               A   989    	LD	R1,#low(_ser_tx_buffer)
000264 0212                A   990    	ADD	R1,R2
000266 16E000              A   991    	ADC	R0,#0
000269 96E8E0              A   992    	LDX	@RR0,R8
                           A   993    ;  267		temp_tx_size += 1;
                           A   994    .line 267
00026C 0901002F            A   995    	ADDX	_temp_tx_size,#1
                           A   996    ;  268	}
                           A   997    .line 268
000270 D6 0000             A   998    	CALL	__b_framereset
000273 AF                  A   999    	RET	
                           A  1000    .endfunc "queueByte",268,"_queueByte"
                           A  1001    	SEGMENT ROM_DATA
                           A  1002    
                           A  1003    
                           A  1004    ;**************************** _queueChecksum **
                           A  1005    ;Name                         Addr/Register   S
                           A  1006    ;_queueByte                          IMPORT  --
                           A  1007    ;_ser_tx_buffer                      STATIC    
                           A  1008    ;_temp_tx_size                       STATIC    
                           A  1009    ;checksum                                R2    
                           A  1010    ;i                                      RR0    
                           A  1011    
                           A  1012    
                           A  1013    ; Aggregate Stack Size: 0 (words)
                           A  1014    
                           A  1015    
                           A  1016    	.FRAME _n_queueChecksum,?_n_queueChecksum,R
                           A  1017    	.FCALL _n_queueByte
                           A  1018    	.FRAME _f_queueChecksum,?_f_queueChecksum,E
                           A  1019    	.FCALL _f_queueByte
                           A  1020    	SEGMENT main_TEXT
000274                     A  1021    _queueChecksum:
                           A  1022    .define "_queueChecksum"
                           A  1023    .value _queueChecksum
                           A  1024    .class 2
                           A  1025    .type 65
                           A  1026    .type 0
                           A  1027    .endef
                           A  1028    .begfunc "queueChecksum",270,"_queueChecksum"
                           A  1029    ;  269	
                           A  1030    ;  270	void queueChecksum(void) {
                           A  1031    .define "i"
                           A  1032    .class 4
                           A  1033    .reg 17
                           A  1034    .type 3
                           A  1035    .type 0
                           A  1036    .endef
                           A  1037    .define "checksum"
                           A  1038    .class 4
                           A  1039    .reg 3
                           A  1040    .type 12
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  21


PC     Object              I  Line    Source main.src
                           A  1041    .type 0
                           A  1042    .endef
000274 D6 0000             A  1043    	CALL	__b_frameset00
                           A  1044    ;  271		int i;
                           A  1045    ;  272		unsigned char checksum = 0xFF;
                           A  1046    .line 272
000277 2CFF                A  1047    	LD	R2,#255
000279 8B 0D               A  1048    	JR	_7_L_60
                           A  1049    ;  273		
                           A  1050    ;  274		//Calculate a checksum for all the 
                           A  1051    ;  275		for(i = 0; i < temp_tx_size;i++) {
00027B                     A  1052    _7_L_61:
                           A  1053    .line 275
00027B 84302F              A  1054    	LDX	R3,_temp_tx_size
00027E A213                A  1055    	CP	R1,R3
000280 1FA6E000            A  1056    	CPC	R0,#-0
000284 1B 08               A  1057    	JR	LT,_7_L_63
000286 8B 17               A  1058    	JR	_7_L_64
000288                     A  1059    _7_L_60:
000288 B0E0                A  1060    	CLR	R0
00028A B0E1                A  1061    	CLR	R1
00028C 8B ED               A  1062    	JR	_7_L_61
00028E                     A  1063    _7_L_63:
                           A  1064    ;  276			checksum -= ser_tx_buffer[i];
                           A  1065    .line 276
00028E 4C 00               A  1066    	LD	R4,#high(_ser_tx_buffer)
000290 5C 14               A  1067    	LD	R5,#low(_ser_tx_buffer)
000292 0251                A  1068    	ADD	R5,R1
000294 1240                A  1069    	ADC	R4,R0
000296 86E4E3              A  1070    	LDX	R3,@RR4
000299 2223                A  1071    	SUB	R2,R3
                           A  1072    .line 275
00029B A0E0                A  1073    	INCW	RR0
                           A  1074    ;  277		}
                           A  1075    .line 277
00029D 8B DC               A  1076    	JR	_7_L_61
00029F                     A  1077    _7_L_64:
                           A  1078    ;  278		
                           A  1079    ;  279		//Add the checksum to the queue.
                           A  1080    ;  280		queueByte(checksum);
                           A  1081    .line 280
00029F E4E2E8              A  1082    	LD	R8,R2
0002A2 D6 025A             A  1083    	CALL	_queueByte
                           A  1084    ;  281	}
                           A  1085    .line 281
0002A5 D6 0000             A  1086    	CALL	__b_framereset
0002A8 AF                  A  1087    	RET	
                           A  1088    .endfunc "queueChecksum",281,"_queueChecksum"
                           A  1089    	SEGMENT ROM_DATA
                           A  1090    
                           A  1091    
                           A  1092    ;**************************** _loadAmmo *******
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  22


PC     Object              I  Line    Source main.src
                           A  1093    ;Name                         Addr/Register   S
                           A  1094    ;_ir_loaded_tags                     STATIC    
                           A  1095    ;howMuch                                 R8    
                           A  1096    
                           A  1097    
                           A  1098    ; Aggregate Stack Size: 0 (words)
                           A  1099    
                           A  1100    
                           A  1101    	.FRAME _n_loadAmmo,?_n_loadAmmo,RDATA
                           A  1102    	.FRAME _f_loadAmmo,?_f_loadAmmo,EDATA
                           A  1103    	SEGMENT main_TEXT
0002A9                     A  1104    _loadAmmo:
                           A  1105    .define "_loadAmmo"
                           A  1106    .value _loadAmmo
                           A  1107    .class 2
                           A  1108    .type 65
                           A  1109    .type 0
                           A  1110    .endef
                           A  1111    .begfunc "loadAmmo",283,"_loadAmmo"
                           A  1112    .define "howMuch"
                           A  1113    .class 17
                           A  1114    .reg 9
                           A  1115    .type 12
                           A  1116    .type 0
                           A  1117    .endef
0002A9 D6 0000             A  1118    	CALL	__b_frameset00
                           A  1119    ;  282	
                           A  1120    ;  283	void loadAmmo(unsigned char howMuch) {
                           A  1121    ;  284		ir_loaded_tags = howMuch;
                           A  1122    .line 284
0002AC 948029              A  1123    	LDX	_ir_loaded_tags,R8
                           A  1124    ;  285		//INHIBIT should be high to generat
                           A  1125    ;  286		PAOUT |= 0x02;
                           A  1126    .line 286
0002AF 49020FD3            A  1127    	ORX	4051,#2
                           A  1128    ;  287	}
                           A  1129    .line 287
0002B3 D6 0000             A  1130    	CALL	__b_framereset
0002B6 AF                  A  1131    	RET	
                           A  1132    .endfunc "loadAmmo",287,"_loadAmmo"
                           A  1133    	SEGMENT ROM_DATA
                           A  1134    
                           A  1135    
                           A  1136    ;**************************** _rxedResetBarrel 
                           A  1137    ;Name                         Addr/Register   S
                           A  1138    ;_reloadCooldown                     STATIC    
                           A  1139    ;_weAreReloading                     STATIC    
                           A  1140    ;_weAreRegistered                    STATIC    
                           A  1141    ;_sendBarrelReply                    STATIC    
                           A  1142    ;_sendLoadSpecial                    STATIC    
                           A  1143    ;_sendArmSpecial                     STATIC    
                           A  1144    ;_ir_loaded_tags                     STATIC    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  23


PC     Object              I  Line    Source main.src
                           A  1145    
                           A  1146    
                           A  1147    ; Aggregate Stack Size: 0 (words)
                           A  1148    
                           A  1149    
                           A  1150    	.FRAME _n_rxedResetBarrel,?_n_rxedResetBarr
                           A  1151    	.FRAME _f_rxedResetBarrel,?_f_rxedResetBarr
                           A  1152    	SEGMENT main_TEXT
0002B7                     A  1153    _rxedResetBarrel:
                           A  1154    .define "_rxedResetBarrel"
                           A  1155    .value _rxedResetBarrel
                           A  1156    .class 2
                           A  1157    .type 65
                           A  1158    .type 0
                           A  1159    .endef
                           A  1160    .begfunc "rxedResetBarrel",289,"_rxedResetBarre
0002B7 D6 0000             A  1161    	CALL	__b_frameset00
                           A  1162    ;  288	
                           A  1163    ;  289	void rxedResetBarrel(void) {
                           A  1164    ;  290		//This will reset any variables use
                           A  1165    ;  291		
                           A  1166    ;  292		ir_loaded_tags = 0;
                           A  1167    .line 292
0002BA E9000029            A  1168    	LDX	_ir_loaded_tags,#-0
                           A  1169    ;  293		
                           A  1170    ;  294		sendArmSpecial = 0;
                           A  1171    .line 294
0002BE E9000032            A  1172    	LDX	_sendArmSpecial,#-0
                           A  1173    ;  295		sendLoadSpecial = 0;
                           A  1174    .line 295
0002C2 E9000031            A  1175    	LDX	_sendLoadSpecial,#-0
                           A  1176    ;  296		sendBarrelReply = 0;
                           A  1177    .line 296
0002C6 E9000030            A  1178    	LDX	_sendBarrelReply,#-0
                           A  1179    ;  297		
                           A  1180    ;  298		weAreRegistered = 0;
                           A  1181    .line 298
0002CA E9000033            A  1182    	LDX	_weAreRegistered,#-0
                           A  1183    ;  299		weAreReloading = 0;
                           A  1184    .line 299
0002CE E9000034            A  1185    	LDX	_weAreReloading,#-0
                           A  1186    ;  300		
                           A  1187    ;  301		reloadCooldown = 800;
                           A  1188    .line 301
0002D2 E9030035            A  1189    	LDX	_reloadCooldown,#3
0002D6 E9200036            A  1190    	LDX	_reloadCooldown+1,#32
                           A  1191    ;  302		
                           A  1192    ;  303		PAOUT &= 0xFD;
                           A  1193    .line 303
0002DA 59FD0FD3            A  1194    	ANDX	4051,#253
                           A  1195    ;  304	}
                           A  1196    .line 304
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  24


PC     Object              I  Line    Source main.src
0002DE D6 0000             A  1197    	CALL	__b_framereset
0002E1 AF                  A  1198    	RET	
                           A  1199    .endfunc "rxedResetBarrel",304,"_rxedResetBarre
                           A  1200    	SEGMENT ROM_DATA
                           A  1201    
                           A  1202    
                           A  1203    ;**************************** _rxedRollCall ***
                           A  1204    ;Name                         Addr/Register   S
                           A  1205    ;_sendBarrelReply                    STATIC    
                           A  1206    
                           A  1207    
                           A  1208    ; Aggregate Stack Size: 0 (words)
                           A  1209    
                           A  1210    
                           A  1211    	.FRAME _n_rxedRollCall,?_n_rxedRollCall,RDA
                           A  1212    	.FRAME _f_rxedRollCall,?_f_rxedRollCall,EDA
                           A  1213    	SEGMENT main_TEXT
0002E2                     A  1214    _rxedRollCall:
                           A  1215    .define "_rxedRollCall"
                           A  1216    .value _rxedRollCall
                           A  1217    .class 2
                           A  1218    .type 65
                           A  1219    .type 0
                           A  1220    .endef
                           A  1221    .begfunc "rxedRollCall",306,"_rxedRollCall"
0002E2 D6 0000             A  1222    	CALL	__b_frameset00
                           A  1223    ;  305	
                           A  1224    ;  306	void rxedRollCall(void) {
                           A  1225    ;  307		/*	Format:		BType		$00
                           A  1226    ;  308						BData0		Blaster
                           A  1227    ;  309						BSum		$cs
                           A  1228    ;  310		*/
                           A  1229    ;  311		//We don't actually care about anyt
                           A  1230    ;  312		//Set a flag that will be seen by s
                           A  1231    ;  313		sendBarrelReply = 1;
                           A  1232    .line 313
0002E5 E9010030            A  1233    	LDX	_sendBarrelReply,#1
                           A  1234    ;  314	}
                           A  1235    .line 314
0002E9 D6 0000             A  1236    	CALL	__b_framereset
0002EC AF                  A  1237    	RET	
                           A  1238    .endfunc "rxedRollCall",314,"_rxedRollCall"
                           A  1239    	SEGMENT ROM_DATA
                           A  1240    
                           A  1241    
                           A  1242    ;**************************** _rxedBarrelSeen *
                           A  1243    ;Name                         Addr/Register   S
                           A  1244    ;_weAreRegistered                    STATIC    
                           A  1245    ;_rxedResetBarrel                    IMPORT  --
                           A  1246    
                           A  1247    
                           A  1248    ; Aggregate Stack Size: 0 (words)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  25


PC     Object              I  Line    Source main.src
                           A  1249    
                           A  1250    
                           A  1251    	.FRAME _n_rxedBarrelSeen,?_n_rxedBarrelSeen
                           A  1252    	.FCALL _n_rxedResetBarrel
                           A  1253    	.FRAME _f_rxedBarrelSeen,?_f_rxedBarrelSeen
                           A  1254    	.FCALL _f_rxedResetBarrel
                           A  1255    	SEGMENT main_TEXT
0002ED                     A  1256    _rxedBarrelSeen:
                           A  1257    .define "_rxedBarrelSeen"
                           A  1258    .value _rxedBarrelSeen
                           A  1259    .class 2
                           A  1260    .type 65
                           A  1261    .type 0
                           A  1262    .endef
                           A  1263    .begfunc "rxedBarrelSeen",316,"_rxedBarrelSeen"
0002ED D6 0000             A  1264    	CALL	__b_frameset00
                           A  1265    ;  315	
                           A  1266    ;  316	void rxedBarrelSeen(void) {
                           A  1267    ;  317		/*	Format:		BType		$40
                           A  1268    ;  318						BSum		$cs
                           A  1269    ;  319		*/
                           A  1270    ;  320		//No data, no cares! This does mean
                           A  1271    ;  321		rxedResetBarrel();
                           A  1272    .line 321
0002F0 D6 02B7             A  1273    	CALL	_rxedResetBarrel
                           A  1274    ;  322		weAreRegistered = 1;
                           A  1275    .line 322
0002F3 E9010033            A  1276    	LDX	_weAreRegistered,#1
                           A  1277    ;  323	}
                           A  1278    .line 323
0002F7 D6 0000             A  1279    	CALL	__b_framereset
0002FA AF                  A  1280    	RET	
                           A  1281    .endfunc "rxedBarrelSeen",323,"_rxedBarrelSeen"
                           A  1282    	SEGMENT ROM_DATA
                           A  1283    
                           A  1284    
                           A  1285    ;**************************** _rxedBarrelAck **
                           A  1286    ;Name                         Addr/Register   S
                           A  1287    ;_reloadCooldown                     STATIC    
                           A  1288    ;_loadAmmo                           IMPORT  --
                           A  1289    ;_sendArmSpecial                     STATIC    
                           A  1290    ;_weAreReloading                     STATIC    
                           A  1291    
                           A  1292    
                           A  1293    ; Aggregate Stack Size: 0 (words)
                           A  1294    
                           A  1295    
                           A  1296    	.FRAME _n_rxedBarrelAck,?_n_rxedBarrelAck,R
                           A  1297    	.FCALL _n_loadAmmo
                           A  1298    	.FRAME _f_rxedBarrelAck,?_f_rxedBarrelAck,E
                           A  1299    	.FCALL _f_loadAmmo
                           A  1300    	SEGMENT main_TEXT
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  26


PC     Object              I  Line    Source main.src
0002FB                     A  1301    _rxedBarrelAck:
                           A  1302    .define "_rxedBarrelAck"
                           A  1303    .value _rxedBarrelAck
                           A  1304    .class 2
                           A  1305    .type 65
                           A  1306    .type 0
                           A  1307    .endef
                           A  1308    .begfunc "rxedBarrelAck",325,"_rxedBarrelAck"
0002FB D6 0000             A  1309    	CALL	__b_frameset00
                           A  1310    ;  324	
                           A  1311    ;  325	void rxedBarrelAck(void) {
                           A  1312    ;  326		/*	Format:		BType		$41
                           A  1313    ;  327						BSum		$cs
                           A  1314    ;  328		*/
                           A  1315    ;  329		//This one we actually care about, 
                           A  1316    ;  330		if(weAreReloading == 1) {
                           A  1317    .line 330
0002FE A9010034            A  1318    	CPX	_weAreReloading,#1
000302 EB 06               A  1319    	JR	NE,_12_L_72
                           A  1320    ;  331			//Because we still need to actu
                           A  1321    ;  332			//Flag that we need to send thi
                           A  1322    ;  333			sendArmSpecial = 1;
                           A  1323    .line 333
000304 E9010032            A  1324    	LDX	_sendArmSpecial,#1
                           A  1325    ;  334		} else if(weAreReloading == 2) {
                           A  1326    .line 334
000308 8B 17               A  1327    	JR	_12_L_73
00030A                     A  1328    _12_L_72:
00030A A9020034            A  1329    	CPX	_weAreReloading,#2
00030E EB 11               A  1330    	JR	NE,_12_L_73
                           A  1331    ;  335			weAreReloading = 0;
                           A  1332    .line 335
000310 E9000034            A  1333    	LDX	_weAreReloading,#-0
                           A  1334    ;  336			//We're now in control of sendi
                           A  1335    ;  337			loadAmmo(AMMO);
                           A  1336    .line 337
000314 8C0F                A  1337    	LD	R8,#15
000316 D6 02A9             A  1338    	CALL	_loadAmmo
                           A  1339    ;  338			//Slow down reloading a bit...
                           A  1340    ;  339			reloadCooldown = 800;
                           A  1341    .line 339
000319 E9030035            A  1342    	LDX	_reloadCooldown,#3
00031D E9200036            A  1343    	LDX	_reloadCooldown+1,#32
                           A  1344    ;  340		}
                           A  1345    ;  341	}
000321                     A  1346    _12_L_73:
                           A  1347    .line 341
000321 D6 0000             A  1348    	CALL	__b_framereset
000324 AF                  A  1349    	RET	
                           A  1350    .endfunc "rxedBarrelAck",341,"_rxedBarrelAck"
                           A  1351    	SEGMENT ROM_DATA
                           A  1352    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  27


PC     Object              I  Line    Source main.src
                           A  1353    
                           A  1354    ;**************************** _BarrelReply ****
                           A  1355    ;Name                         Addr/Register   S
                           A  1356    ;_sendQueue                          IMPORT  --
                           A  1357    ;_queueChecksum                      IMPORT  --
                           A  1358    ;_queueByte                          IMPORT  --
                           A  1359    
                           A  1360    
                           A  1361    ; Aggregate Stack Size: 0 (words)
                           A  1362    
                           A  1363    
                           A  1364    	.FRAME _n_BarrelReply,?_n_BarrelReply,RDATA
                           A  1365    	.FCALL _n_queueByte
                           A  1366    	.FCALL _n_queueChecksum
                           A  1367    	.FCALL _n_sendQueue
                           A  1368    	.FRAME _f_BarrelReply,?_f_BarrelReply,EDATA
                           A  1369    	.FCALL _f_queueByte
                           A  1370    	.FCALL _f_queueChecksum
                           A  1371    	.FCALL _f_sendQueue
                           A  1372    	SEGMENT main_TEXT
000325                     A  1373    _BarrelReply:
                           A  1374    .define "_BarrelReply"
                           A  1375    .value _BarrelReply
                           A  1376    .class 2
                           A  1377    .type 65
                           A  1378    .type 0
                           A  1379    .endef
                           A  1380    .begfunc "BarrelReply",343,"_BarrelReply"
000325 D6 0000             A  1381    	CALL	__b_frameset00
                           A  1382    ;  342	
                           A  1383    ;  343	void BarrelReply(void) {
                           A  1384    ;  344		/*	BARREL-REPLY
                           A  1385    ;  345			Format:		BType		$40
                           A  1386    ;  346						BData0		Barrel 
                           A  1387    ;  347						BSum		$cs
                           A  1388    ;  348			Barrels send this block in resp
                           A  1389    ;  349			BData0 should be 0x01 for a sho
                           A  1390    ;  350			Other values are undefined, but
                           A  1391    ;  351		*/
                           A  1392    ;  352		
                           A  1393    ;  353		//BType
                           A  1394    ;  354		queueByte(0x40);
                           A  1395    .line 354
000328 8C40                A  1396    	LD	R8,#64
00032A D6 025A             A  1397    	CALL	_queueByte
                           A  1398    ;  355		//BData0
                           A  1399    ;  356		queueByte(BARRELTYPE);
                           A  1400    .line 356
00032D 8C02                A  1401    	LD	R8,#2
00032F D6 025A             A  1402    	CALL	_queueByte
                           A  1403    ;  357		//BSum
                           A  1404    ;  358		queueChecksum();
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  28


PC     Object              I  Line    Source main.src
                           A  1405    .line 358
000332 D6 0274             A  1406    	CALL	_queueChecksum
                           A  1407    ;  359		
                           A  1408    ;  360		//Send it!
                           A  1409    ;  361		sendQueue();
                           A  1410    .line 361
000335 D6 0247             A  1411    	CALL	_sendQueue
                           A  1412    ;  362	}
                           A  1413    .line 362
000338 D6 0000             A  1414    	CALL	__b_framereset
00033B AF                  A  1415    	RET	
                           A  1416    .endfunc "BarrelReply",362,"_BarrelReply"
                           A  1417    	SEGMENT ROM_DATA
                           A  1418    
                           A  1419    
                           A  1420    ;**************************** _LoadSpecial ****
                           A  1421    ;Name                         Addr/Register   S
                           A  1422    ;_sendQueue                          IMPORT  --
                           A  1423    ;_weAreReloading                     STATIC    
                           A  1424    ;_queueChecksum                      IMPORT  --
                           A  1425    ;_queueByte                          IMPORT  --
                           A  1426    
                           A  1427    
                           A  1428    ; Aggregate Stack Size: 0 (words)
                           A  1429    
                           A  1430    
                           A  1431    	.FRAME _n_LoadSpecial,?_n_LoadSpecial,RDATA
                           A  1432    	.FCALL _n_queueByte
                           A  1433    	.FCALL _n_queueChecksum
                           A  1434    	.FCALL _n_sendQueue
                           A  1435    	.FRAME _f_LoadSpecial,?_f_LoadSpecial,EDATA
                           A  1436    	.FCALL _f_queueByte
                           A  1437    	.FCALL _f_queueChecksum
                           A  1438    	.FCALL _f_sendQueue
                           A  1439    	SEGMENT main_TEXT
00033C                     A  1440    _LoadSpecial:
                           A  1441    .define "_LoadSpecial"
                           A  1442    .value _LoadSpecial
                           A  1443    .class 2
                           A  1444    .type 65
                           A  1445    .type 0
                           A  1446    .endef
                           A  1447    .begfunc "LoadSpecial",364,"_LoadSpecial"
00033C D6 0000             A  1448    	CALL	__b_frameset00
                           A  1449    ;  363	
                           A  1450    ;  364	void LoadSpecial(void) {
                           A  1451    ;  365		/*	LOAD-SPECIAL
                           A  1452    ;  366			Format:		BType		$41
                           A  1453    ;  367						BData0		Ammo Ne
                           A  1454    ;  368						BData1		DoubleT
                           A  1455    ;  369						BData2		LoadSFX
                           A  1456    ;  370						BData3		FireSFX
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  29


PC     Object              I  Line    Source main.src
                           A  1457    ;  371						BData4		Display
                           A  1458    ;  372						BSum		$cs
                           A  1459    ;  373			Unloads any ready ammo and load
                           A  1460    ;  374			Ammo Needed is how much ammo wi
                           A  1461    ;  375			DoubleTaps is (UNKNOWN).
                           A  1462    ;  376			LoadSFX is what sound effect wi
                           A  1463    ;  377			FireSFX is what sound effect wi
                           A  1464    ;  378				special ammo is loaded/arme
                           A  1465    ;  379			DisplayMode is what will be sho
                           A  1466    ;  380		*/
                           A  1467    ;  381		
                           A  1468    ;  382		//BType
                           A  1469    ;  383		queueByte(0x41);
                           A  1470    .line 383
00033F 8C41                A  1471    	LD	R8,#65
000341 D6 025A             A  1472    	CALL	_queueByte
                           A  1473    ;  384		//BData0
                           A  1474    ;  385		queueByte(AMMONEEDED);
                           A  1475    .line 385
000344 8C0F                A  1476    	LD	R8,#15
000346 D6 025A             A  1477    	CALL	_queueByte
                           A  1478    ;  386		//BData1
                           A  1479    ;  387		queueByte(DOUBLETAPS);
                           A  1480    .line 387
000349 B0E8                A  1481    	CLR	R8
00034B D6 025A             A  1482    	CALL	_queueByte
                           A  1483    ;  388		//BData2
                           A  1484    ;  389		queueByte(LOADSFX);
                           A  1485    .line 389
00034E 8C0E                A  1486    	LD	R8,#14
000350 D6 025A             A  1487    	CALL	_queueByte
                           A  1488    ;  390		//BData3
                           A  1489    ;  391		queueByte(FIRESFX);
                           A  1490    .line 391
000353 8C0B                A  1491    	LD	R8,#11
000355 D6 025A             A  1492    	CALL	_queueByte
                           A  1493    ;  392		//BData4
                           A  1494    ;  393		queueByte(DISPLAYMODE);
                           A  1495    .line 393
000358 B0E8                A  1496    	CLR	R8
00035A D6 025A             A  1497    	CALL	_queueByte
                           A  1498    ;  394		//BSum
                           A  1499    ;  395		queueChecksum();
                           A  1500    .line 395
00035D D6 0274             A  1501    	CALL	_queueChecksum
                           A  1502    ;  396		
                           A  1503    ;  397		//We also need to mark that we're t
                           A  1504    ;  398		weAreReloading = 1;
                           A  1505    .line 398
000360 E9010034            A  1506    	LDX	_weAreReloading,#1
                           A  1507    ;  399		
                           A  1508    ;  400		//Send it!
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  30


PC     Object              I  Line    Source main.src
                           A  1509    ;  401		sendQueue();
                           A  1510    .line 401
000364 D6 0247             A  1511    	CALL	_sendQueue
                           A  1512    ;  402	}
                           A  1513    .line 402
000367 D6 0000             A  1514    	CALL	__b_framereset
00036A AF                  A  1515    	RET	
                           A  1516    .endfunc "LoadSpecial",402,"_LoadSpecial"
                           A  1517    	SEGMENT ROM_DATA
                           A  1518    
                           A  1519    
                           A  1520    ;**************************** _ArmSpecial *****
                           A  1521    ;Name                         Addr/Register   S
                           A  1522    ;_weAreReloading                     STATIC    
                           A  1523    ;_sendQueue                          IMPORT  --
                           A  1524    ;_queueChecksum                      IMPORT  --
                           A  1525    ;_queueByte                          IMPORT  --
                           A  1526    
                           A  1527    
                           A  1528    ; Aggregate Stack Size: 0 (words)
                           A  1529    
                           A  1530    
                           A  1531    	.FRAME _n_ArmSpecial,?_n_ArmSpecial,RDATA
                           A  1532    	.FCALL _n_queueByte
                           A  1533    	.FCALL _n_queueChecksum
                           A  1534    	.FCALL _n_sendQueue
                           A  1535    	.FRAME _f_ArmSpecial,?_f_ArmSpecial,EDATA
                           A  1536    	.FCALL _f_queueByte
                           A  1537    	.FCALL _f_queueChecksum
                           A  1538    	.FCALL _f_sendQueue
                           A  1539    	SEGMENT main_TEXT
00036B                     A  1540    _ArmSpecial:
                           A  1541    .define "_ArmSpecial"
                           A  1542    .value _ArmSpecial
                           A  1543    .class 2
                           A  1544    .type 65
                           A  1545    .type 0
                           A  1546    .endef
                           A  1547    .begfunc "ArmSpecial",404,"_ArmSpecial"
00036B D6 0000             A  1548    	CALL	__b_frameset00
                           A  1549    ;  403	
                           A  1550    ;  404	void ArmSpecial(void) {
                           A  1551    ;  405		/*	ARM-SPECIAL
                           A  1552    ;  406			Format:		BType		$42
                           A  1553    ;  407						BData0	BurstSize (
                           A  1554    ;  408						BData1	Ammo (1-15)
                           A  1555    ;  409						BData2	TrigRate (1
                           A  1556    ;  410						BSum		$cs
                           A  1557    ;  411			BurstSize is in the range 1 to 
                           A  1558    ;  412			Ammo is the amount of ready amm
                           A  1559    ;  413			TrigRate is the number of milli
                           A  1560    ;  414		*/
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  31


PC     Object              I  Line    Source main.src
                           A  1561    ;  415		
                           A  1562    ;  416		//BType
                           A  1563    ;  417		queueByte(0x42);
                           A  1564    .line 417
00036E 8C42                A  1565    	LD	R8,#66
000370 D6 025A             A  1566    	CALL	_queueByte
                           A  1567    ;  418		//BData0
                           A  1568    ;  419		queueByte(BURSTSIZE);
                           A  1569    .line 419
000373 8C0F                A  1570    	LD	R8,#15
000375 D6 025A             A  1571    	CALL	_queueByte
                           A  1572    ;  420		//BData1
                           A  1573    ;  421		queueByte(AMMO);
                           A  1574    .line 421
000378 8C0F                A  1575    	LD	R8,#15
00037A D6 025A             A  1576    	CALL	_queueByte
                           A  1577    ;  422		//BData2
                           A  1578    ;  423		queueByte(TRIGRATE);
                           A  1579    .line 423
00037D 8C10                A  1580    	LD	R8,#16
00037F D6 025A             A  1581    	CALL	_queueByte
                           A  1582    ;  424		//BSum
                           A  1583    ;  425		queueChecksum();
                           A  1584    .line 425
000382 D6 0274             A  1585    	CALL	_queueChecksum
                           A  1586    ;  426		
                           A  1587    ;  427		//Send it!
                           A  1588    ;  428		sendQueue();
                           A  1589    .line 428
000385 D6 0247             A  1590    	CALL	_sendQueue
                           A  1591    ;  429		
                           A  1592    ;  430		//We're expecting another ACK from 
                           A  1593    ;  431		weAreReloading = 2;
                           A  1594    .line 431
000388 E9020034            A  1595    	LDX	_weAreReloading,#2
                           A  1596    ;  432	}
                           A  1597    .line 432
00038C D6 0000             A  1598    	CALL	__b_framereset
00038F AF                  A  1599    	RET	
                           A  1600    .endfunc "ArmSpecial",432,"_ArmSpecial"
                           A  1601    	SEGMENT ROM_DATA
                           A  1602    
                           A  1603    
                           A  1604    ;**************************** _sendSomething **
                           A  1605    ;Name                         Addr/Register   S
                           A  1606    ;_LoadSpecial                        IMPORT  --
                           A  1607    ;_ir_loaded_tags                     STATIC    
                           A  1608    ;_reloadCooldown                     STATIC    
                           A  1609    ;_weAreReloading                     STATIC    
                           A  1610    ;_sendLoadSpecial                    STATIC    
                           A  1611    ;_ArmSpecial                         IMPORT  --
                           A  1612    ;_sendArmSpecial                     STATIC    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  32


PC     Object              I  Line    Source main.src
                           A  1613    ;_BarrelReply                        IMPORT  --
                           A  1614    ;_sendBarrelReply                    STATIC    
                           A  1615    ;_ser_tx_cooldown                    STATIC    
                           A  1616    ;_ser_tx_size                        STATIC    
                           A  1617    
                           A  1618    
                           A  1619    ; Aggregate Stack Size: 0 (words)
                           A  1620    
                           A  1621    
                           A  1622    	.FRAME _n_sendSomething,?_n_sendSomething,R
                           A  1623    	.FCALL _n_BarrelReply
                           A  1624    	.FCALL _n_ArmSpecial
                           A  1625    	.FCALL _n_LoadSpecial
                           A  1626    	.FRAME _f_sendSomething,?_f_sendSomething,E
                           A  1627    	.FCALL _f_BarrelReply
                           A  1628    	.FCALL _f_ArmSpecial
                           A  1629    	.FCALL _f_LoadSpecial
                           A  1630    	SEGMENT main_TEXT
000390                     A  1631    _sendSomething:
                           A  1632    .define "_sendSomething"
                           A  1633    .value _sendSomething
                           A  1634    .class 2
                           A  1635    .type 65
                           A  1636    .type 0
                           A  1637    .endef
                           A  1638    .begfunc "sendSomething",434,"_sendSomething"
000390 D6 0000             A  1639    	CALL	__b_frameset00
                           A  1640    ;  433	
                           A  1641    ;  434	void sendSomething(void) {
                           A  1642    ;  435		if(!ser_tx_size && !ser_tx_cooldown
                           A  1643    .line 435
000393 A9000024            A  1644    	CPX	_ser_tx_size,#-0
000397 EB 47               A  1645    	JR	NE,_16_L_93
000399 A9000025            A  1646    	CPX	_ser_tx_cooldown,#-0
00039D EB 41               A  1647    	JR	NE,_16_L_93
                           A  1648    ;  436			if(sendBarrelReply) { //If we n
                           A  1649    .line 436
00039F A9000030            A  1650    	CPX	_sendBarrelReply,#-0
0003A3 6B 09               A  1651    	JR	Z,_16_L_80
                           A  1652    ;  437				sendBarrelReply = 0; //Clea
                           A  1653    .line 437
0003A5 E9000030            A  1654    	LDX	_sendBarrelReply,#-0
                           A  1655    ;  438				BarrelReply(); //Send a Bar
                           A  1656    .line 438
0003A9 D6 0325             A  1657    	CALL	_BarrelReply
                           A  1658    ;  439				return;
                           A  1659    .line 439
0003AC 8B 32               A  1660    	JR	_16_L_93
                           A  1661    ;  440			}
0003AE                     A  1662    _16_L_80:
                           A  1663    .line 440
                           A  1664    ;  441			if(sendArmSpecial) { //If we're
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  33


PC     Object              I  Line    Source main.src
                           A  1665    .line 441
0003AE A9000032            A  1666    	CPX	_sendArmSpecial,#-0
0003B2 6B 09               A  1667    	JR	Z,_16_L_91
                           A  1668    ;  442				sendArmSpecial = 0; //Clear
                           A  1669    .line 442
0003B4 E9000032            A  1670    	LDX	_sendArmSpecial,#-0
                           A  1671    ;  443				ArmSpecial(); //Send an Arm
                           A  1672    .line 443
0003B8 D6 036B             A  1673    	CALL	_ArmSpecial
                           A  1674    ;  444				return;
                           A  1675    .line 444
0003BB 8B 23               A  1676    	JR	_16_L_93
                           A  1677    ;  445			}
0003BD                     A  1678    _16_L_91:
                           A  1679    .line 445
                           A  1680    ;  446			if(sendLoadSpecial) { //If the 
                           A  1681    .line 446
0003BD A9000031            A  1682    	CPX	_sendLoadSpecial,#-0
0003C1 6B 1D               A  1683    	JR	Z,_16_L_93
                           A  1684    ;  447				sendLoadSpecial = 0; //Clea
                           A  1685    .line 447
0003C3 E9000031            A  1686    	LDX	_sendLoadSpecial,#-0
                           A  1687    ;  448				if(RELOADMIDCLIP) { //If we
                           A  1688    ;  449					if(!weAreReloading && !
                           A  1689    .line 449
0003C7 A9000034            A  1690    	CPX	_weAreReloading,#-0
0003CB EB 13               A  1691    	JR	NE,_16_L_89
0003CD 840035              A  1692    	LDX	R0,_reloadCooldown
0003D0 841036              A  1693    	LDX	R1,_reloadCooldown+1
0003D3 4201                A  1694    	OR	R0,R1
0003D5 EB 09               A  1695    	JR	NE,_16_L_89
                           A  1696    ;  450						if(ir_loaded_tags !
                           A  1697    .line 450
0003D7 A90F0029            A  1698    	CPX	_ir_loaded_tags,#15
0003DB 6B 03               A  1699    	JR	Z,_16_L_89
                           A  1700    ;  451							LoadSpecial(); 
                           A  1701    .line 451
0003DD D6 033C             A  1702    	CALL	_LoadSpecial
                           A  1703    ;  452						}
                           A  1704    ;  453					}
                           A  1705    ;  454				} else { //If we can't relo
                           A  1706    ;  455					if(!weAreReloading && !
                           A  1707    ;  456						LoadSpecial(); //St
                           A  1708    ;  457					}
                           A  1709    ;  458				}
0003E0                     A  1710    _16_L_89:
                           A  1711    .line 458
                           A  1712    ;  459				return;
                           A  1713    ;  460			}
                           A  1714    ;  461		}
                           A  1715    ;  462	}
0003E0                     A  1716    _16_L_93:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  34


PC     Object              I  Line    Source main.src
                           A  1717    .line 462
0003E0 D6 0000             A  1718    	CALL	__b_framereset
0003E3 AF                  A  1719    	RET	
                           A  1720    .endfunc "sendSomething",462,"_sendSomething"
                           A  1721    	SEGMENT ROM_DATA
                           A  1722    ;	Jump Table for Switch Statement at line 468
000000                     A  1723    L__71:
000000 000B                A  1724    	DW	11
000002 0000                A  1725    	DW	0
000004 03FB                A  1726    	DW	_17_L_94
000006 001E                A  1727    	DW	30
000008 0400                A  1728    	DW	_17_L_95
00000A 001F                A  1729    	DW	31
00000C 0400                A  1730    	DW	_17_L_96
00000E 0020                A  1731    	DW	32
000010 0400                A  1732    	DW	_17_L_97
000012 0040                A  1733    	DW	64
000014 0405                A  1734    	DW	_17_L_103
000016 0041                A  1735    	DW	65
000018 040A                A  1736    	DW	_17_L_104
00001A 005F                A  1737    	DW	95
00001C 0400                A  1738    	DW	_17_L_98
00001E 0060                A  1739    	DW	96
000020 0400                A  1740    	DW	_17_L_99
000022 0080                A  1741    	DW	128
000024 0400                A  1742    	DW	_17_L_100
000026 00A0                A  1743    	DW	160
000028 0400                A  1744    	DW	_17_L_101
00002A 00C0                A  1745    	DW	192
00002C 0400                A  1746    	DW	_17_L_102
00002E 040D                A  1747    	DW	_17_L_106
                           A  1748    
                           A  1749    
                           A  1750    ;**************************** _receiveSomething
                           A  1751    ;Name                         Addr/Register   S
                           A  1752    ;_rxedBarrelAck                      IMPORT  --
                           A  1753    ;_rxedBarrelSeen                     IMPORT  --
                           A  1754    ;_rxedResetBarrel                    IMPORT  --
                           A  1755    ;_rxedRollCall                       IMPORT  --
                           A  1756    ;_captureBuffer                      STATIC    
                           A  1757    
                           A  1758    
                           A  1759    ; Aggregate Stack Size: 0 (words)
                           A  1760    
                           A  1761    
                           A  1762    	.FRAME _n_receiveSomething,?_n_receiveSomet
                           A  1763    	.FCALL _n_rxedRollCall
                           A  1764    	.FCALL _n_rxedResetBarrel
                           A  1765    	.FCALL _n_rxedBarrelSeen
                           A  1766    	.FCALL _n_rxedBarrelAck
                           A  1767    	.FRAME _f_receiveSomething,?_f_receiveSomet
                           A  1768    	.FCALL _f_rxedRollCall
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  35


PC     Object              I  Line    Source main.src
                           A  1769    	.FCALL _f_rxedResetBarrel
                           A  1770    	.FCALL _f_rxedBarrelSeen
                           A  1771    	.FCALL _f_rxedBarrelAck
                           A  1772    	SEGMENT main_TEXT
0003E4                     A  1773    _receiveSomething:
                           A  1774    .define "_receiveSomething"
                           A  1775    .value _receiveSomething
                           A  1776    .class 2
                           A  1777    .type 65
                           A  1778    .type 0
                           A  1779    .endef
                           A  1780    .begfunc "receiveSomething",464,"_receiveSometh
0003E4 D6 0000             A  1781    	CALL	__b_frameset00
                           A  1782    ;  463	
                           A  1783    ;  464	void receiveSomething(void) {
                           A  1784    ;  465		if(captureBuffer.size & 0x80) { //T
                           A  1785    .line 465
0003E7 79800011            A  1786    	TMX	_captureBuffer+17,#128
0003EB 6B 24               A  1787    	JR	Z,_17_L_108
                           A  1788    ;  466			
                           A  1789    ;  467			//Figure out what type it is an
                           A  1790    ;  468			switch(captureBuffer.buffer[0])
                           A  1791    .line 468
0003ED 841001              A  1792    	LDX	R1,_captureBuffer+1
0003F0 B0E0                A  1793    	CLR	R0
0003F2 2C 00               A  1794    	LD	R2,#high(L__71)
0003F4 3C 00               A  1795    	LD	R3,#low(L__71)
0003F6 D6 0000             A  1796    	CALL	__b_ucase
0003F9 C4E0                A  1797    	JP	@RR0
                           A  1798    ;  469				case 0x00:
0003FB                     A  1799    _17_L_94:
                           A  1800    .line 469
                           A  1801    ;  470					//ROLL-CALL
                           A  1802    ;  471					rxedRollCall();
                           A  1803    .line 471
0003FB D6 02E2             A  1804    	CALL	_rxedRollCall
                           A  1805    ;  472					break;
                           A  1806    .line 472
0003FE 8B 0D               A  1807    	JR	_17_L_106
                           A  1808    ;  473				case 0x1E: //NO-ACCY
000400                     A  1809    _17_L_95:
                           A  1810    .line 473
                           A  1811    ;  474				case 0x1F: //RESET-ALL
000400                     A  1812    _17_L_96:
                           A  1813    .line 474
                           A  1814    ;  475				case 0x20: //ROLL-REPLY		000400                     A  1815    _17_L_97:
                           A  1816    .line 475
                           A  1817    ;  476				case 0x5F: //RESET-BARREL
000400                     A  1818    _17_L_98:
                           A  1819    .line 476
                           A  1820    ;  477				case 0x60: //POWERUP-REPLY
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  36


PC     Object              I  Line    Source main.src
000400                     A  1821    _17_L_99:
                           A  1822    .line 477
                           A  1823    ;  478				case 0x80: //RADAR-REPLY
000400                     A  1824    _17_L_100:
                           A  1825    .line 478
                           A  1826    ;  479				case 0xA0: //MASTER-REPLY
000400                     A  1827    _17_L_101:
                           A  1828    .line 479
                           A  1829    ;  480				case 0xC0: //RHOST-REPLY
000400                     A  1830    _17_L_102:
                           A  1831    .line 480
                           A  1832    ;  481					//Any of these results 
                           A  1833    ;  482					rxedResetBarrel();
                           A  1834    .line 482
000400 D6 02B7             A  1835    	CALL	_rxedResetBarrel
                           A  1836    ;  483					break;
                           A  1837    .line 483
000403 8B 08               A  1838    	JR	_17_L_106
                           A  1839    ;  484				case 0x40:
000405                     A  1840    _17_L_103:
                           A  1841    .line 484
                           A  1842    ;  485					//BARREL-SEEN
                           A  1843    ;  486					rxedBarrelSeen();
                           A  1844    .line 486
000405 D6 02ED             A  1845    	CALL	_rxedBarrelSeen
                           A  1846    ;  487					break;
                           A  1847    .line 487
000408 8B 03               A  1848    	JR	_17_L_106
                           A  1849    ;  488				case 0x41:
00040A                     A  1850    _17_L_104:
                           A  1851    .line 488
                           A  1852    ;  489					//BARREL-ACK
                           A  1853    ;  490					rxedBarrelAck();
                           A  1854    .line 490
00040A D6 02FB             A  1855    	CALL	_rxedBarrelAck
                           A  1856    ;  491					break;
                           A  1857    ;  492				default:
                           A  1858    ;  493					//Nothing we know how t
                           A  1859    ;  494					break;
                           A  1860    ;  495			}
00040D                     A  1861    _17_L_106:
                           A  1862    .line 495
                           A  1863    ;  496			captureBuffer.size = 0;
                           A  1864    .line 496
00040D E9000011            A  1865    	LDX	_captureBuffer+17,#-0
                           A  1866    ;  497		}
                           A  1867    ;  498	}
000411                     A  1868    _17_L_108:
                           A  1869    .line 498
000411 D6 0000             A  1870    	CALL	__b_framereset
000414 AF                  A  1871    	RET	
                           A  1872    .endfunc "receiveSomething",498,"_receiveSometh
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  37


PC     Object              I  Line    Source main.src
                           A  1873    	SEGMENT ROM_DATA
                           A  1874    
                           A  1875    
                           A  1876    ;**************************** _main ***********
                           A  1877    ;Name                         Addr/Register   S
                           A  1878    ;_sendLoadSpecial                    STATIC    
                           A  1879    ;_weAreRegistered                    STATIC    
                           A  1880    ;_btn_pressed                        STATIC    
                           A  1881    ;_sendSomething                      IMPORT  --
                           A  1882    ;_receiveSomething                   IMPORT  --
                           A  1883    ;_captureBuffer                      STATIC    
                           A  1884    ;_init_cpu                           IMPORT  --
                           A  1885    
                           A  1886    
                           A  1887    ; Aggregate Stack Size: 0 (words)
                           A  1888    
                           A  1889    
                           A  1890    	.FRAME _n_main,?_n_main,RDATA
                           A  1891    	.FCALL _n_init_cpu
                           A  1892    	.FCALL _n_receiveSomething
                           A  1893    	.FCALL _n_sendSomething
                           A  1894    	.FRAME _f_main,?_f_main,EDATA
                           A  1895    	.FCALL _f_init_cpu
                           A  1896    	.FCALL _f_receiveSomething
                           A  1897    	.FCALL _f_sendSomething
                           A  1898    	SEGMENT main_TEXT
000415                     A  1899    _main:
                           A  1900    .define "_main"
                           A  1901    .value _main
                           A  1902    .class 2
                           A  1903    .type 65
                           A  1904    .type 0
                           A  1905    .endef
                           A  1906    .begfunc "main",500,"_main"
000415 D6 0000             A  1907    	CALL	__b_frameset00
                           A  1908    ;  499	
                           A  1909    ;  500	void main(void) {
                           A  1910    ;  501		unsigned char i;
                           A  1911    ;  502		init_cpu();
                           A  1912    .line 502
000418 D6 01B6             A  1913    	CALL	_init_cpu
                           A  1914    ;  503		
                           A  1915    ;  504		//Initialize the checksum.
                           A  1916    ;  505		captureBuffer.checksum = 0xFF;
                           A  1917    .line 505
00041B E9FF0012            A  1918    	LDX	_captureBuffer+18,#255
                           A  1919    ;  506		
                           A  1920    ;  507		while(1) {
00041F                     A  1921    _18_L_111:
                           A  1922    .line 507
                           A  1923    ;  508			/*
                           A  1924    ;  509			//Echo everything back to the t
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  38


PC     Object              I  Line    Source main.src
                           A  1925    ;  510			//Should put it in factory test
                           A  1926    ;  511			if(captureBuffer.size & 0x80 &&
                           A  1927    ;  512	            //Block received.
                           A  1928    ;  513	            //Echo it back for testing.
                           A  1929    ;  514	            unsigned char rx_size = (ca
                           A  1930    ;  515				int i;
                           A  1931    ;  516				
                           A  1932    ;  517	            for(i = 0; i < rx_size;i++)
                           A  1933    ;  518	                queueByte(captureBuffer
                           A  1934    ;  519	            }
                           A  1935    ;  520				
                           A  1936    ;  521	            sendQueue();
                           A  1937    ;  522	            captureBuffer.size = 0;
                           A  1938    ;  523	        } else {
                           A  1939    ;  524				if(!(U0STAT0 ^ 0x06)) {
                           A  1940    ;  525					IRQ0 |= 0x08;
                           A  1941    ;  526				}
                           A  1942    ;  527			}
                           A  1943    ;  528			*/
                           A  1944    ;  529			
                           A  1945    ;  530			//The actual main loop if you w
                           A  1946    ;  531			receiveSomething(); //Go check 
                           A  1947    .line 531
00041F D6 03E4             A  1948    	CALL	_receiveSomething
                           A  1949    ;  532			sendSomething(); //Go check if 
                           A  1950    .line 532
000422 D6 0390             A  1951    	CALL	_sendSomething
                           A  1952    ;  533			if(btn_pressed) { //If the butt
                           A  1953    .line 533
000425 A900002C            A  1954    	CPX	_btn_pressed,#-0
000429 6B F4               A  1955    	JR	Z,_18_L_111
                           A  1956    ;  534				btn_pressed = 0; //Clear th
                           A  1957    .line 534
00042B E900002C            A  1958    	LDX	_btn_pressed,#-0
                           A  1959    ;  535				if(weAreRegistered) { //If 
                           A  1960    .line 535
00042F A9000033            A  1961    	CPX	_weAreRegistered,#-0
000433 6B EA               A  1962    	JR	Z,_18_L_111
                           A  1963    ;  536					sendLoadSpecial = 1; //
                           A  1964    .line 536
000435 E9010031            A  1965    	LDX	_sendLoadSpecial,#1
                           A  1966    ;  537				}
                           A  1967    ;  538			}
                           A  1968    ;  539		}
                           A  1969    .line 539
000439 8B E4               A  1970    	JR	_18_L_111
                           A  1971    ;  540	}
                           A  1972    .line 540
00043B D6 0000             A  1973    	CALL	__b_framereset
00043E AF                  A  1974    	RET	
                           A  1975    .endfunc "main",540,"_main"
00000C 008E                A  1976    	VECTOR	TIMER0=_isr_timer0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     12:26:30     page:  39


PC     Object              I  Line    Source main.src
000010 0047                A  1977    	VECTOR	UART0_TX=_isr_uarttx
00000E 0000                A  1978    	VECTOR	UART0_RX=_isr_uartrx
                           A  1979    	XREF __b_ucase:ROM
                           A  1980    	XREF __b_framereset:ROM
                           A  1981    	XREF __b_iframereset:ROM
                           A  1982    	XREF __b_frameset00:ROM
                           A  1983    	XREF __b_iframeset00:ROM
                           A  1984    	XDEF _main
                           A  1985    	XDEF _receiveSomething
                           A  1986    	XDEF _sendSomething
                           A  1987    	XDEF _ArmSpecial
                           A  1988    	XDEF _LoadSpecial
                           A  1989    	XDEF _BarrelReply
                           A  1990    	XDEF _rxedBarrelAck
                           A  1991    	XDEF _rxedBarrelSeen
                           A  1992    	XDEF _rxedRollCall
                           A  1993    	XDEF _rxedResetBarrel
                           A  1994    	XDEF _loadAmmo
                           A  1995    	XDEF _queueChecksum
                           A  1996    	XDEF _queueByte
                           A  1997    	XDEF _sendQueue
                           A  1998    	XDEF _init_cpu
                           A  1999    	XDEF _isr_timer0
                           A  2000    	XDEF _isr_uarttx
                           A  2001    	XDEF _isr_uartrx
                           A  2002    	XDEF _reloadCooldown
                           A  2003    	XDEF _weAreReloading
                           A  2004    	XDEF _weAreRegistered
                           A  2005    	XDEF _sendArmSpecial
                           A  2006    	XDEF _sendLoadSpecial
                           A  2007    	XDEF _sendBarrelReply
                           A  2008    	XDEF _temp_tx_size
                           A  2009    	XDEF _lastIO
                           A  2010    	XDEF _tempIO
                           A  2011    	XDEF _btn_pressed
                           A  2012    	XDEF _btn_prelim
                           A  2013    	XDEF _btn_counter
                           A  2014    	XDEF _ir_loaded_tags
                           A  2015    	XDEF _ir_rx_halfbits
                           A  2016    	XDEF _ir_rx_counter
                           A  2017    	XDEF _ser_tx_currentbyte
                           A  2018    	XDEF _ser_tx_cooldown
                           A  2019    	XDEF _ser_tx_size
                           A  2020    	XDEF _ser_tx_buffer
                           A  2021    	XDEF _ser_rx_eob_counter
                           A  2022    	XDEF _captureBuffer
                           A  2023    	END


Errors: 0
Warnings: 0
Lines Assembled: 2024
