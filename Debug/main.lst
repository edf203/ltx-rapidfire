Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -fastcall -const=RAM -mo
                           A     3    ; -nooptlink -regvar -reduceopt -debug -norevaa
                           A     4    ; -alias 
                           A     5    	DEFINE main_TEXT,SPACE=ROM
                           A     6    	FILE	"..\..\..\..\DOCUME~1\GITHUB\LTX-RA
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_BSS
000000                     A     9    _captureBuffer:
000000                     A    10    	DS	19
                           A    11    .define "captureBuffer"
                           A    12    .alias "_captureBuffer"
                           A    13    .class 83
                           A    14    .value _captureBuffer
                           A    15    .tag "ser_rx"
                           A    16    .type 8
                           A    17    .type 0
                           A    18    .endef
                           A    19    	SEGMENT main_TEXT
                           A    20    .begrec "ser_rx",19
                           A    21    .define "hasrxed"
                           A    22    .value 0
                           A    23    .class 8
                           A    24    .type 12
                           A    25    .type 0
                           A    26    .endef
                           A    27    .define "buffer"
                           A    28    .value 1
                           A    29    .class 8
                           A    30    .dim 16
                           A    31    .type 108
                           A    32    .type 0
                           A    33    .endef
                           A    34    .define "size"
                           A    35    .value 17
                           A    36    .class 8
                           A    37    .type 12
                           A    38    .type 0
                           A    39    .endef
                           A    40    .define "checksum"
                           A    41    .value 18
                           A    42    .class 8
                           A    43    .type 12
                           A    44    .type 0
                           A    45    .endef
                           A    46    .endrec "ser_rx"
                           A    47    	SEGMENT FAR_BSS
000013                     A    48    _ser_rx_eob_counter:
000013                     A    49    	DS	1
                           A    50    .define "ser_rx_eob_counter"
                           A    51    .alias "_ser_rx_eob_counter"
                           A    52    .class 83
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .value _ser_rx_eob_counter
                           A    54    .type 12
                           A    55    .type 0
                           A    56    .endef
000014                     A    57    _ser_tx_buffer:
000014                     A    58    	DS	16
                           A    59    .define "ser_tx_buffer"
                           A    60    .alias "_ser_tx_buffer"
                           A    61    .class 83
                           A    62    .value _ser_tx_buffer
                           A    63    .dim 16
                           A    64    .type 108
                           A    65    .type 0
                           A    66    .endef
000024                     A    67    _ser_tx_size:
000024                     A    68    	DS	1
                           A    69    .define "ser_tx_size"
                           A    70    .alias "_ser_tx_size"
                           A    71    .class 83
                           A    72    .value _ser_tx_size
                           A    73    .type 12
                           A    74    .type 0
                           A    75    .endef
000025                     A    76    _ser_tx_cooldown:
000025                     A    77    	DS	1
                           A    78    .define "ser_tx_cooldown"
                           A    79    .alias "_ser_tx_cooldown"
                           A    80    .class 83
                           A    81    .value _ser_tx_cooldown
                           A    82    .type 12
                           A    83    .type 0
                           A    84    .endef
000026                     A    85    _ser_tx_currentbyte:
000026                     A    86    	DS	1
                           A    87    .define "ser_tx_currentbyte"
                           A    88    .alias "_ser_tx_currentbyte"
                           A    89    .class 83
                           A    90    .value _ser_tx_currentbyte
                           A    91    .type 12
                           A    92    .type 0
                           A    93    .endef
000027                     A    94    _ir_rx_counter:
000027                     A    95    	DS	1
                           A    96    .define "ir_rx_counter"
                           A    97    .alias "_ir_rx_counter"
                           A    98    .class 83
                           A    99    .value _ir_rx_counter
                           A   100    .type 12
                           A   101    .type 0
                           A   102    .endef
000028                     A   103    _ir_rx_halfbits:
000028                     A   104    	DS	1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .define "ir_rx_halfbits"
                           A   106    .alias "_ir_rx_halfbits"
                           A   107    .class 83
                           A   108    .value _ir_rx_halfbits
                           A   109    .type 12
                           A   110    .type 0
                           A   111    .endef
000029                     A   112    _ir_loaded_tags:
000029                     A   113    	DS	1
                           A   114    .define "ir_loaded_tags"
                           A   115    .alias "_ir_loaded_tags"
                           A   116    .class 83
                           A   117    .value _ir_loaded_tags
                           A   118    .type 12
                           A   119    .type 0
                           A   120    .endef
00002A                     A   121    _btn_counter:
00002A                     A   122    	DS	1
                           A   123    .define "btn_counter"
                           A   124    .alias "_btn_counter"
                           A   125    .class 83
                           A   126    .value _btn_counter
                           A   127    .type 12
                           A   128    .type 0
                           A   129    .endef
00002B                     A   130    _btn_prelim:
00002B                     A   131    	DS	1
                           A   132    .define "btn_prelim"
                           A   133    .alias "_btn_prelim"
                           A   134    .class 83
                           A   135    .value _btn_prelim
                           A   136    .type 12
                           A   137    .type 0
                           A   138    .endef
00002C                     A   139    _btn_pressed:
00002C                     A   140    	DS	1
                           A   141    .define "btn_pressed"
                           A   142    .alias "_btn_pressed"
                           A   143    .class 83
                           A   144    .value _btn_pressed
                           A   145    .type 12
                           A   146    .type 0
                           A   147    .endef
00002D                     A   148    _tempIO:
00002D                     A   149    	DS	1
                           A   150    .define "tempIO"
                           A   151    .alias "_tempIO"
                           A   152    .class 83
                           A   153    .value _tempIO
                           A   154    .type 12
                           A   155    .type 0
                           A   156    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   4


PC     Object              I  Line    Source main.src
00002E                     A   157    _lastIO:
00002E                     A   158    	DS	1
                           A   159    .define "lastIO"
                           A   160    .alias "_lastIO"
                           A   161    .class 83
                           A   162    .value _lastIO
                           A   163    .type 12
                           A   164    .type 0
                           A   165    .endef
00002F                     A   166    _temp_tx_buffer:
00002F                     A   167    	DS	16
                           A   168    .define "temp_tx_buffer"
                           A   169    .alias "_temp_tx_buffer"
                           A   170    .class 83
                           A   171    .value _temp_tx_buffer
                           A   172    .dim 16
                           A   173    .type 108
                           A   174    .type 0
                           A   175    .endef
00003F                     A   176    _temp_tx_size:
00003F                     A   177    	DS	1
                           A   178    .define "temp_tx_size"
                           A   179    .alias "_temp_tx_size"
                           A   180    .class 83
                           A   181    .value _temp_tx_size
                           A   182    .type 12
                           A   183    .type 0
                           A   184    .endef
000040                     A   185    _sendBarrelReply:
000040                     A   186    	DS	1
                           A   187    .define "sendBarrelReply"
                           A   188    .alias "_sendBarrelReply"
                           A   189    .class 83
                           A   190    .value _sendBarrelReply
                           A   191    .type 12
                           A   192    .type 0
                           A   193    .endef
000041                     A   194    _sendLoadSpecial:
000041                     A   195    	DS	1
                           A   196    .define "sendLoadSpecial"
                           A   197    .alias "_sendLoadSpecial"
                           A   198    .class 83
                           A   199    .value _sendLoadSpecial
                           A   200    .type 12
                           A   201    .type 0
                           A   202    .endef
000042                     A   203    _sendArmSpecial:
000042                     A   204    	DS	1
                           A   205    .define "sendArmSpecial"
                           A   206    .alias "_sendArmSpecial"
                           A   207    .class 83
                           A   208    .value _sendArmSpecial
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   5


PC     Object              I  Line    Source main.src
                           A   209    .type 12
                           A   210    .type 0
                           A   211    .endef
000043                     A   212    _weAreRegistered:
000043                     A   213    	DS	1
                           A   214    .define "weAreRegistered"
                           A   215    .alias "_weAreRegistered"
                           A   216    .class 83
                           A   217    .value _weAreRegistered
                           A   218    .type 12
                           A   219    .type 0
                           A   220    .endef
000044                     A   221    _weAreReloading:
000044                     A   222    	DS	1
                           A   223    .define "weAreReloading"
                           A   224    .alias "_weAreReloading"
                           A   225    .class 83
                           A   226    .value _weAreReloading
                           A   227    .type 12
                           A   228    .type 0
                           A   229    .endef
000045                     A   230    _reloadCooldown:
000045                     A   231    	DS	2*1
                           A   232    .define "reloadCooldown"
                           A   233    .alias "_reloadCooldown"
                           A   234    .class 83
                           A   235    .value _reloadCooldown
                           A   236    .type 13
                           A   237    .type 0
                           A   238    .endef
                           A   239    	SEGMENT ROM_DATA
                           A   240    
                           A   241    
                           A   242    ;**************************** _isr_uartrx *****
                           A   243    ;Name                         Addr/Register   S
                           A   244    ;_ser_rx_eob_counter                 STATIC    
                           A   245    ;_captureBuffer                      STATIC    
                           A   246    ;temp                                    R0    
                           A   247    
                           A   248    
                           A   249    ; Aggregate Stack Size: 0 (words)
                           A   250    
                           A   251    
                           A   252    	.FRAME _n_isr_uartrx,?_n_isr_uartrx,RDATA
                           A   253    	.FRAME _f_isr_uartrx,?_f_isr_uartrx,EDATA
                           A   254    	SEGMENT main_TEXT
000000                     A   255    _isr_uartrx:
                           A   256    .define "_isr_uartrx"
                           A   257    .value _isr_uartrx
                           A   258    .class 2
                           A   259    .type 65
                           A   260    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   6


PC     Object              I  Line    Source main.src
                           A   261    .endef
                           A   262    .begfunc "isr_uartrx",35,"_isr_uartrx"
                           A   263    ;    1	/*
                           A   264    ;    2	*   DIY LTX RapidFire
                           A   265    ;    3	*   Copyright (C) 2013  Ryan L. "Izzy84
                           A   266    ;    4	*
                           A   267    ;    5	*    This program is free software; you
                           A   268    ;    6	*    it under the terms of the GNU Gene
                           A   269    ;    7	*    the Free Software Foundation; eith
                           A   270    ;    8	*    (at your option) any later version
                           A   271    ;    9	*
                           A   272    ;   10	*    This program is distributed in the
                           A   273    ;   11	*    but WITHOUT ANY WARRANTY; without 
                           A   274    ;   12	*    MERCHANTABILITY or FITNESS FOR A P
                           A   275    ;   13	*    GNU General Public License for mor
                           A   276    ;   14	*
                           A   277    ;   15	*    You should have received a copy of
                           A   278    ;   16	*    with this program; if not, write t
                           A   279    ;   17	*    51 Franklin Street, Fifth Floor, B
                           A   280    ;   18	*/
                           A   281    ;   19	
                           A   282    ;   20	//Beyond this is the actual code. Unles
                           A   283    ;   21	// probably don't need to go in here. G
                           A   284    ;   22	/**************************************
                           A   285    ;   23	***************************************
                           A   286    ;   24	*                                      
                           A   287    ;   25	*        DANGER                        
                           A   288    ;   26	*                                      
                           A   289    ;   27	***************************************
                           A   290    ;   28	***************************************
                           A   291    ;   29	
                           A   292    ;   30	
                           A   293    ;   31	#include <ez8.h>
                           A   294    ;   32	
                           A   295    ;   33	#include "main.h"
                           A   296    ;   34	
                           A   297    ;   35	void interrupt isr_uartrx(void) {
                           A   298    .define "temp"
                           A   299    .class 4
                           A   300    .reg 1
                           A   301    .type 12
                           A   302    .type 0
                           A   303    .endef
000000 C8FFD0              A   304    	PUSHX	4093
000003 D6 0000             A   305    	CALL	__b_iframeset00
                           A   306    ;   36		unsigned char temp;
                           A   307    ;   37		
                           A   308    ;   38		temp = U0RXD;
                           A   309    .line 38
000006 840F40              A   310    	LDX	R0,3904
                           A   311    ;   39		//Byte received
                           A   312    ;   40		if((U0STAT0 & 0x78) == 0x78) {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   7


PC     Object              I  Line    Source main.src
                           A   313    .line 40
000009 841F41              A   314    	LDX	R1,3905
00000C 56E178              A   315    	AND	R1,#120
00000F E4E1E2              A   316    	LD	R2,R1
000012 A6E178              A   317    	CP	R1,#120
000015 6B 2C               A   318    	JR	Z,_1_L_5
                           A   319    ;   41			//Error during reception. Do no
                           A   320    ;   42			return;
                           A   321    .line 42
                           A   322    ;   43		} else {
                           A   323    .line 43
                           A   324    ;   44			//If the interrupt was because 
                           A   325    ;   45			if(!(captureBuffer.size & 0x80)
                           A   326    .line 45
000017 79800011            A   327    	TMX	_captureBuffer+17,#128
00001B EB 22               A   328    	JR	NE,_1_L_4
                           A   329    ;   46				captureBuffer.buffer[captur
                           A   330    .line 46
00001D 841011              A   331    	LDX	R1,_captureBuffer+17
000020 E4E1E2              A   332    	LD	R2,R1
000023 2C 00               A   333    	LD	R2,#high(_captureBuffer+1)
000025 3C 01               A   334    	LD	R3,#low(_captureBuffer+1)
000027 0231                A   335    	ADD	R3,R1
000029 16E200              A   336    	ADC	R2,#0
00002C 96E0E2              A   337    	LDX	@RR2,R0
00002F 09010011            A   338    	ADDX	_captureBuffer+17,#1
                           A   339    ;   47				captureBuffer.checksum -= t
                           A   340    .line 47
000033 28EE0012            A   341    	SUBX	_captureBuffer+18,R0
                           A   342    ;   48				ser_rx_eob_counter = 0; //C
                           A   343    .line 48
000037 E9000013            A   344    	LDX	_ser_rx_eob_counter,#-0
                           A   345    ;   49				captureBuffer.hasrxed = 1; 
                           A   346    .line 49
00003B E9010000            A   347    	LDX	_captureBuffer,#1
                           A   348    ;   50			}
                           A   349    ;   51		}
00003F                     A   350    _1_L_4:
                           A   351    .line 51
                           A   352    ;   52		//Clear the interrupt bit
                           A   353    ;   53		IRQ0 &= 0xEF;
                           A   354    .line 53
00003F 59EF0FC0            A   355    	ANDX	4032,#239
                           A   356    ;   54	}
000043                     A   357    _1_L_5:
                           A   358    .line 54
000043 D6 0000             A   359    	CALL	__b_iframereset
000046 BF                  A   360    	IRET	
                           A   361    .endfunc "isr_uartrx",54,"_isr_uartrx"
                           A   362    	SEGMENT ROM_DATA
                           A   363    
                           A   364    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   8


PC     Object              I  Line    Source main.src
                           A   365    ;**************************** _isr_uarttx *****
                           A   366    ;Name                         Addr/Register   S
                           A   367    ;_ser_tx_buffer                      STATIC    
                           A   368    ;_ser_tx_currentbyte                 STATIC    
                           A   369    ;_ser_tx_cooldown                    STATIC    
                           A   370    ;_ser_tx_size                        STATIC    
                           A   371    
                           A   372    
                           A   373    ; Aggregate Stack Size: 0 (words)
                           A   374    
                           A   375    
                           A   376    	.FRAME _n_isr_uarttx,?_n_isr_uarttx,RDATA
                           A   377    	.FRAME _f_isr_uarttx,?_f_isr_uarttx,EDATA
                           A   378    	SEGMENT main_TEXT
000047                     A   379    _isr_uarttx:
                           A   380    .define "_isr_uarttx"
                           A   381    .value _isr_uarttx
                           A   382    .class 2
                           A   383    .type 65
                           A   384    .type 0
                           A   385    .endef
                           A   386    .begfunc "isr_uarttx",56,"_isr_uarttx"
000047 C8FFD0              A   387    	PUSHX	4093
00004A D6 0000             A   388    	CALL	__b_iframeset00
                           A   389    ;   55	
                           A   390    ;   56	void interrupt isr_uarttx(void) {
                           A   391    ;   57		//Ready to transmit a byte
                           A   392    ;   58		if(ser_tx_size && !ser_tx_cooldown)
                           A   393    .line 58
00004D A9000024            A   394    	CPX	_ser_tx_size,#-0
000051 6B 33               A   395    	JR	Z,_2_L_11
000053 A9000025            A   396    	CPX	_ser_tx_cooldown,#-0
000057 EB 2D               A   397    	JR	NE,_2_L_11
                           A   398    ;   59			if(ser_tx_currentbyte == ser_tx
                           A   399    .line 59
000059 A8 024026           A   400    	CPX	_ser_tx_currentbyte,_ser_tx_size
00005D EB 0E               A   401    	JR	NE,_2_L_9
                           A   402    ;   60				ser_tx_currentbyte = 0; //R
                           A   403    .line 60
00005F E9000026            A   404    	LDX	_ser_tx_currentbyte,#-0
                           A   405    ;   61				ser_tx_size = 0; 		//C
                           A   406    .line 61
000063 E9000024            A   407    	LDX	_ser_tx_size,#-0
                           A   408    ;   62				ser_tx_cooldown = 116; 	//A
                           A   409    .line 62
000067 E9740025            A   410    	LDX	_ser_tx_cooldown,#116
                           A   411    ;   63										//S
                           A   412    ;   64										//,
                           A   413    ;   65										//,
                           A   414    ;   66										//T
                           A   415    ;   67			} else { //There's still bytes 
                           A   416    .line 67
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:   9


PC     Object              I  Line    Source main.src
00006B 8B 19               A   417    	JR	_2_L_11
00006D                     A   418    _2_L_9:
                           A   419    ;   68				U0TXD = ser_tx_buffer[ser_t
                           A   420    .line 68
00006D 842026              A   421    	LDX	R2,_ser_tx_currentbyte
000070 0C 00               A   422    	LD	R0,#high(_ser_tx_buffer)
000072 1C 14               A   423    	LD	R1,#low(_ser_tx_buffer)
000074 0212                A   424    	ADD	R1,R2
000076 16E000              A   425    	ADC	R0,#0
000079 86E0E2              A   426    	LDX	R2,@RR0
00007C 942F40              A   427    	LDX	3904,R2
                           A   428    ;   69				ser_tx_currentbyte++; //Adv
                           A   429    .line 69
00007F 840026              A   430    	LDX	R0,_ser_tx_currentbyte
000082 09010026            A   431    	ADDX	_ser_tx_currentbyte,#1
                           A   432    ;   70			}
                           A   433    ;   71		}
000086                     A   434    _2_L_11:
                           A   435    .line 71
                           A   436    ;   72		//Clear the interrupt bit.
                           A   437    ;   73		IRQ0 &= 0xF7;
                           A   438    .line 73
000086 59F70FC0            A   439    	ANDX	4032,#247
                           A   440    ;   74	}
                           A   441    .line 74
00008A D6 0000             A   442    	CALL	__b_iframereset
00008D BF                  A   443    	IRET	
                           A   444    .endfunc "isr_uarttx",74,"_isr_uarttx"
                           A   445    	SEGMENT ROM_DATA
                           A   446    
                           A   447    
                           A   448    ;**************************** _isr_timer0 *****
                           A   449    ;Name                         Addr/Register   S
                           A   450    ;_ir_loaded_tags                     STATIC    
                           A   451    ;_ir_rx_counter                      STATIC    
                           A   452    ;_ir_rx_halfbits                     STATIC    
                           A   453    ;_btn_pressed                        STATIC    
                           A   454    ;_btn_prelim                         STATIC    
                           A   455    ;_btn_counter                        STATIC    
                           A   456    ;_captureBuffer                      STATIC    
                           A   457    ;_reloadCooldown                     STATIC    
                           A   458    ;_ser_tx_cooldown                    STATIC    
                           A   459    ;_ser_rx_eob_counter                 STATIC    
                           A   460    ;_lastIO                             STATIC    
                           A   461    ;_tempIO                             STATIC    
                           A   462    
                           A   463    
                           A   464    ; Aggregate Stack Size: 0 (words)
                           A   465    
                           A   466    
                           A   467    	.FRAME _n_isr_timer0,?_n_isr_timer0,RDATA
                           A   468    	.FRAME _f_isr_timer0,?_f_isr_timer0,EDATA
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  10


PC     Object              I  Line    Source main.src
                           A   469    	SEGMENT main_TEXT
00008E                     A   470    _isr_timer0:
                           A   471    .define "_isr_timer0"
                           A   472    .value _isr_timer0
                           A   473    .class 2
                           A   474    .type 65
                           A   475    .type 0
                           A   476    .endef
                           A   477    .begfunc "isr_timer0",76,"_isr_timer0"
00008E C8FFD0              A   478    	PUSHX	4093
000091 D6 0000             A   479    	CALL	__b_iframeset00
                           A   480    ;   75	
                           A   481    ;   76	void interrupt isr_timer0(void) {
                           A   482    ;   77		//8KHz interrupt.
                           A   483    ;   78		
                           A   484    ;   79		lastIO = tempIO;
                           A   485    .line 79
000094 E8 02D02E           A   486    	LDX	_lastIO,_tempIO
                           A   487    ;   80		tempIO = PAIN;
                           A   488    .line 80
000098 E8FD202D            A   489    	LDX	_tempIO,4050
                           A   490    ;   81		
                           A   491    ;   82		//Various 1/8ms timers
                           A   492    ;   83		ser_rx_eob_counter += 1;
                           A   493    .line 83
00009C 09010013            A   494    	ADDX	_ser_rx_eob_counter,#1
                           A   495    ;   84		if(ser_tx_cooldown) {
                           A   496    .line 84
0000A0 A9000025            A   497    	CPX	_ser_tx_cooldown,#-0
0000A4 6B 04               A   498    	JR	Z,_3_L_15
                           A   499    ;   85			ser_tx_cooldown -= 1;
                           A   500    .line 85
0000A6 29010025            A   501    	SUBX	_ser_tx_cooldown,#1
                           A   502    ;   86		}
0000AA                     A   503    _3_L_15:
                           A   504    .line 86
                           A   505    ;   87		if(reloadCooldown) {
                           A   506    .line 87
0000AA 840045              A   507    	LDX	R0,_reloadCooldown
0000AD 841046              A   508    	LDX	R1,_reloadCooldown+1
0000B0 4201                A   509    	OR	R0,R1
0000B2 6B 08               A   510    	JR	Z,_3_L_21
                           A   511    ;   88			reloadCooldown -= 1;
                           A   512    .line 88
0000B4 29010046            A   513    	SUBX	_reloadCooldown+1,#1
0000B8 39000045            A   514    	SBCX	_reloadCooldown,#-0
                           A   515    ;   89		}
0000BC                     A   516    _3_L_21:
                           A   517    .line 89
                           A   518    ;   90		
                           A   519    ;   91		//Serial RX end-of-block stuff.
                           A   520    ;   92		//When the RX line has been idle fo
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  11


PC     Object              I  Line    Source main.src
                           A   521    ;   93		// The block has finished transmitt
                           A   522    ;   94		if((ser_rx_eob_counter == 60) && ca
                           A   523    .line 94
0000BC A93C0013            A   524    	CPX	_ser_rx_eob_counter,#60
0000C0 EB 1E               A   525    	JR	NE,_3_L_29
0000C2 A9000000            A   526    	CPX	_captureBuffer,#-0
0000C6 6B 18               A   527    	JR	Z,_3_L_29
                           A   528    ;   95	        captureBuffer.hasrxed = 0;
                           A   529    .line 95
0000C8 E9000000            A   530    	LDX	_captureBuffer,#-0
                           A   531    ;   96	        if(!captureBuffer.checksum) {
                           A   532    .line 96
0000CC A9000012            A   533    	CPX	_captureBuffer+18,#-0
0000D0 EB 06               A   534    	JR	NE,_3_L_18
                           A   535    ;   97				//The easiest way to check 
                           A   536    ;   98				// including the checksum b
                           A   537    ;   99				// the block was received c
                           A   538    ;  100	            captureBuffer.size |= 0x80;
                           A   539    .line 100
0000D2 49800011            A   540    	ORX	_captureBuffer+17,#128
                           A   541    ;  101	        } else {
                           A   542    .line 101
0000D6 8B 04               A   543    	JR	_3_L_19
0000D8                     A   544    _3_L_18:
                           A   545    ;  102	            captureBuffer.size = 0; //C
                           A   546    .line 102
0000D8 E9000011            A   547    	LDX	_captureBuffer+17,#-0
                           A   548    ;  103	        }
0000DC                     A   549    _3_L_19:
                           A   550    .line 103
                           A   551    ;  104	        captureBuffer.checksum = 0xFF; 
                           A   552    .line 104
0000DC E9FF0012            A   553    	LDX	_captureBuffer+18,#255
                           A   554    ;  105	    }
0000E0                     A   555    _3_L_29:
                           A   556    .line 105
                           A   557    ;  106		
                           A   558    ;  107		//Button stuff
                           A   559    ;  108		//If the button is not in the state
                           A   560    ;  109		// just pressed the button.
                           A   561    ;  110		if((tempIO & 0x01) != (lastIO & 0x0
                           A   562    .line 110
0000E0 84002D              A   563    	LDX	R0,_tempIO
0000E3 56E001              A   564    	AND	R0,#1
0000E6 84102E              A   565    	LDX	R1,_lastIO
0000E9 56E101              A   566    	AND	R1,#1
0000EC A201                A   567    	CP	R0,R1
0000EE 6B 16               A   568    	JR	Z,_3_L_28
                           A   569    ;  111	        //Button state changed, clear t
                           A   570    ;  112	        btn_counter = 0;
                           A   571    .line 112
0000F0 E900002A            A   572    	LDX	_btn_counter,#-0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  12


PC     Object              I  Line    Source main.src
                           A   573    ;  113	        if(!(tempIO & 0x01)) {
                           A   574    .line 113
0000F4 7901002D            A   575    	TMX	_tempIO,#1
0000F8 EB 06               A   576    	JR	NE,_3_L_23
                           A   577    ;  114	            //Was just pressed
                           A   578    ;  115	            //Set a flag that it's been
                           A   579    ;  116	            btn_prelim = 1;
                           A   580    .line 116
0000FA E901002B            A   581    	LDX	_btn_prelim,#1
                           A   582    ;  117	        } else {
                           A   583    .line 117
0000FE 8B 21               A   584    	JR	_3_L_54
000100                     A   585    _3_L_23:
                           A   586    ;  118				//Was just released
                           A   587    ;  119				btn_prelim = 0;
                           A   588    .line 119
000100 E900002B            A   589    	LDX	_btn_prelim,#-0
                           A   590    ;  120			}
                           A   591    ;  121	    } else {
                           A   592    .line 121
000104 8B 1B               A   593    	JR	_3_L_54
000106                     A   594    _3_L_28:
                           A   595    ;  122			//Button is still in whatever s
                           A   596    ;  123	        btn_counter++; //Count how long
                           A   597    .line 123
000106 84002A              A   598    	LDX	R0,_btn_counter
000109 0901002A            A   599    	ADDX	_btn_counter,#1
                           A   600    ;  124	        if(btn_prelim && (btn_counter >
                           A   601    .line 124
00010D A900002B            A   602    	CPX	_btn_prelim,#-0
000111 6B 0E               A   603    	JR	Z,_3_L_54
000113 A903002A            A   604    	CPX	_btn_counter,#3
000117 3B 08               A   605    	JR	ULE,_3_L_54
                           A   606    ;  125	            btn_prelim = 0;
                           A   607    .line 125
000119 E900002B            A   608    	LDX	_btn_prelim,#-0
                           A   609    ;  126	            btn_pressed = 1; //Mark tha
                           A   610    .line 126
00011D E901002C            A   611    	LDX	_btn_pressed,#1
                           A   612    ;  127	        }
                           A   613    ;  128	    }
000121                     A   614    _3_L_54:
                           A   615    .line 128
                           A   616    ;  129		
                           A   617    ;  130		//IR stuff
                           A   618    ;  131		//If we have ammo loaded in the att
                           A   619    ;  132		// switch back to pistol mode. This
                           A   620    ;  133		// right header and length.
                           A   621    ;  134		if((tempIO & 0x08) != (lastIO & 0x0
                           A   622    .line 134
000121 84002D              A   623    	LDX	R0,_tempIO
000124 56E008              A   624    	AND	R0,#8
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  13


PC     Object              I  Line    Source main.src
000127 84102E              A   625    	LDX	R1,_lastIO
00012A 56E108              A   626    	AND	R1,#8
00012D A201                A   627    	CP	R0,R1
00012F 6B 4F               A   628    	JR	Z,_3_L_53
                           A   629    ;  135			//LAZERMOD's state has changed
                           A   630    ;  136			 if(ir_rx_halfbits == 1) {
                           A   631    .line 136
000131 A9010028            A   632    	CPX	_ir_rx_halfbits,#1
000135 EB 15               A   633    	JR	NE,_3_L_42
                           A   634    ;  137				//if((ir_rx_counter > 22) &
                           A   635    ;  138				 if((ir_rx_counter > 45) &&
                           A   636    .line 138
000137 A92D0027            A   637    	CPX	_ir_rx_counter,#45
00013B 3B 3D               A   638    	JR	ULE,_3_L_43
00013D A9330027            A   639    	CPX	_ir_rx_counter,#51
000141 FB 37               A   640    	JR	NC,_3_L_43
                           A   641    ;  139					//If it's between 5.75m
                           A   642    ;  140					//This is actually the 
                           A   643    ;  141					// to work.
                           A   644    ;  142					ir_rx_halfbits++;
                           A   645    .line 142
000143 840028              A   646    	LDX	R0,_ir_rx_halfbits
000146 09010028            A   647    	ADDX	_ir_rx_halfbits,#1
                           A   648    ;  143				}
                           A   649    ;  144			 } else if(ir_rx_halfbits < 3) 
                           A   650    .line 144
00014A 8B 2E               A   651    	JR	_3_L_43
00014C                     A   652    _3_L_42:
00014C A9030028            A   653    	CPX	_ir_rx_halfbits,#3
000150 FB 15               A   654    	JR	NC,_3_L_40
                           A   655    ;  145				//if((ir_rx_counter > 10) &
                           A   656    ;  146				 if((ir_rx_counter > 21) &&
                           A   657    .line 146
000152 A9150027            A   658    	CPX	_ir_rx_counter,#21
000156 3B 22               A   659    	JR	ULE,_3_L_43
000158 A91B0027            A   660    	CPX	_ir_rx_counter,#27
00015C FB 1C               A   661    	JR	NC,_3_L_43
                           A   662    ;  147					//If it's between 2.75m
                           A   663    ;  148					ir_rx_halfbits++;
                           A   664    .line 148
00015E 840028              A   665    	LDX	R0,_ir_rx_halfbits
000161 09010028            A   666    	ADDX	_ir_rx_halfbits,#1
                           A   667    ;  149				}
                           A   668    ;  150			} else {
                           A   669    .line 150
000165 8B 13               A   670    	JR	_3_L_43
000167                     A   671    _3_L_40:
                           A   672    ;  151				//if((ir_rx_counter > 2) &&
                           A   673    ;  152				if((ir_rx_counter > 5) && (
                           A   674    .line 152
000167 A9050027            A   675    	CPX	_ir_rx_counter,#5
00016B 3B 0D               A   676    	JR	ULE,_3_L_43
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  14


PC     Object              I  Line    Source main.src
00016D A9130027            A   677    	CPX	_ir_rx_counter,#19
000171 FB 07               A   678    	JR	NC,_3_L_43
                           A   679    ;  153					//If it's between 0.75m
                           A   680    ;  154					//If we reached this po
                           A   681    ;  155					ir_rx_halfbits++;
                           A   682    .line 155
000173 840028              A   683    	LDX	R0,_ir_rx_halfbits
000176 09010028            A   684    	ADDX	_ir_rx_halfbits,#1
                           A   685    ;  156				}
                           A   686    ;  157			}
00017A                     A   687    _3_L_43:
                           A   688    .line 157
                           A   689    ;  158			ir_rx_counter = 0;
                           A   690    .line 158
00017A E9000027            A   691    	LDX	_ir_rx_counter,#-0
                           A   692    ;  159		} else {
                           A   693    .line 159
00017E 8B 32               A   694    	JR	_3_L_55
000180                     A   695    _3_L_53:
                           A   696    ;  160			ir_rx_counter++;
                           A   697    .line 160
000180 840027              A   698    	LDX	R0,_ir_rx_counter
000183 09010027            A   699    	ADDX	_ir_rx_counter,#1
                           A   700    ;  161			//if(ir_rx_counter > 40) {
                           A   701    ;  162			if(ir_rx_counter > 64) {
                           A   702    .line 162
000187 A9400027            A   703    	CPX	_ir_rx_counter,#64
00018B 3B 25               A   704    	JR	ULE,_3_L_55
                           A   705    ;  163				//End of IR packet
                           A   706    ;  164				if(ir_rx_halfbits == 17) {
                           A   707    .line 164
00018D A9110028            A   708    	CPX	_ir_rx_halfbits,#17
000191 EB 17               A   709    	JR	NE,_3_L_50
                           A   710    ;  165					//Tag of some sort.
                           A   711    ;  166					if(ir_loaded_tags) { //
                           A   712    .line 166
000193 A9000029            A   713    	CPX	_ir_loaded_tags,#-0
000197 6B 07               A   714    	JR	Z,_3_L_48
                           A   715    ;  167						ir_loaded_tags--; /
                           A   716    .line 167
000199 840029              A   717    	LDX	R0,_ir_loaded_tags
00019C 29010029            A   718    	SUBX	_ir_loaded_tags,#1
                           A   719    ;  168					}
0001A0                     A   720    _3_L_48:
                           A   721    .line 168
                           A   722    ;  169					if(!ir_loaded_tags) { /
                           A   723    .line 169
0001A0 A9000029            A   724    	CPX	_ir_loaded_tags,#-0
0001A4 EB 04               A   725    	JR	NE,_3_L_50
                           A   726    ;  170						//Turn off the INHI
                           A   727    ;  171						PAOUT &= 0xFD; //Di
                           A   728    .line 171
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  15


PC     Object              I  Line    Source main.src
0001A6 59FD0FD3            A   729    	ANDX	4051,#253
                           A   730    ;  172					}
                           A   731    ;  173				}
0001AA                     A   732    _3_L_50:
                           A   733    .line 173
                           A   734    ;  174				//Reset for the next tag.
                           A   735    ;  175				ir_rx_halfbits = 0;
                           A   736    .line 175
0001AA E9000028            A   737    	LDX	_ir_rx_halfbits,#-0
                           A   738    ;  176				ir_rx_counter = 0;
                           A   739    .line 176
0001AE E9000027            A   740    	LDX	_ir_rx_counter,#-0
                           A   741    ;  177			}
                           A   742    ;  178		}
                           A   743    ;  179	}
0001B2                     A   744    _3_L_55:
                           A   745    .line 179
0001B2 D6 0000             A   746    	CALL	__b_iframereset
0001B5 BF                  A   747    	IRET	
                           A   748    .endfunc "isr_timer0",179,"_isr_timer0"
                           A   749    	SEGMENT ROM_DATA
                           A   750    
                           A   751    
                           A   752    ;**************************** _init_cpu *******
                           A   753    ;Name                         Addr/Register   S
                           A   754    ;_EI                                 IMPORT  --
                           A   755    ;_isr_timer0                         IMPORT  --
                           A   756    ;_isr_uarttx                         IMPORT  --
                           A   757    ;_isr_uartrx                         IMPORT  --
                           A   758    ;_SET_VECTOR                         IMPORT  --
                           A   759    ;_DI                                 IMPORT  --
                           A   760    
                           A   761    
                           A   762    ; Aggregate Stack Size: 0 (words)
                           A   763    
                           A   764    
                           A   765    	.FRAME _n_init_cpu,?_n_init_cpu,RDATA
                           A   766    	.FRAME _f_init_cpu,?_f_init_cpu,EDATA
                           A   767    	SEGMENT main_TEXT
0001B6                     A   768    _init_cpu:
                           A   769    .define "_init_cpu"
                           A   770    .value _init_cpu
                           A   771    .class 2
                           A   772    .type 65
                           A   773    .type 0
                           A   774    .endef
                           A   775    .begfunc "init_cpu",181,"_init_cpu"
0001B6 D6 0000             A   776    	CALL	__b_frameset00
                           A   777    ;  180	
                           A   778    ;  181	void init_cpu(void) {
                           A   779    ;  182		DI();
                           A   780    .line 182
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  16


PC     Object              I  Line    Source main.src
0001B9 8F                  A   781    	DI
                           A   782    ;  183		
                           A   783    ;  184		//PA0: RELOAD/DBG. Input, external 
                           A   784    ;  185		//PA1: INHIBIT. Output.
                           A   785    ;  186		//PA2: 38KHz. T1OUT, output.
                           A   786    ;  187		//PA3: LAZERMOD. Input.
                           A   787    ;  188		//PA4: RXD. UART, input.
                           A   788    ;  189		//PA5: TXD. UART, output.
                           A   789    ;  190		
                           A   790    ;  191		//Set up Port A.
                           A   791    ;  192		PADD = 0x19;	//00011001
                           A   792    .line 192
0001BA E9010FD0            A   793    	LDX	4048,#1
0001BE E9190FD1            A   794    	LDX	4049,#25
                           A   795    ;  193		PAAF = 0x34;	//00110100
                           A   796    .line 193
0001C2 E9020FD0            A   797    	LDX	4048,#2
0001C6 E9340FD1            A   798    	LDX	4049,#52
                           A   799    ;  194		PAAFS1 = 0x04;	//00000100
                           A   800    .line 194
0001CA E9070FD0            A   801    	LDX	4048,#7
0001CE E9040FD1            A   802    	LDX	4049,#4
                           A   803    ;  195		PAAFS2 = 0x00;	//00000000
                           A   804    .line 195
0001D2 E9080FD0            A   805    	LDX	4048,#8
0001D6 E9000FD1            A   806    	LDX	4049,#-0
                           A   807    ;  196		//PAPUE = 0x10;	//00010000
                           A   808    ;  197		
                           A   809    ;  198		//Set up UART for 2000 baud, 8 data
                           A   810    ;  199		//Set baud rate
                           A   811    ;  200		U0BRH = 0x00;
                           A   812    .line 200
0001DA E9000F46            A   813    	LDX	3910,#-0
                           A   814    ;  201		U0BRL = 0xAD;
                           A   815    .line 201
0001DE E9AD0F47            A   816    	LDX	3911,#173
                           A   817    ;  202		//Set up interrupt
                           A   818    ;  203		SET_VECTOR(UART0_RX_IVECT, isr_uart
                           A   819    ;  204		SET_VECTOR(UART0_TX_IVECT, isr_uart
                           A   820    ;  205		IRQ0ENH |= 0x18;
                           A   821    .line 205
0001E2 49180FC1            A   822    	ORX	4033,#24
                           A   823    ;  206		IRQ0ENL |= 0x18;
                           A   824    .line 206
0001E6 49180FC2            A   825    	ORX	4034,#24
                           A   826    ;  207		IRQ0 &= ~0x18;
                           A   827    .line 207
0001EA 59E70FC0            A   828    	ANDX	4032,#-25
                           A   829    ;  208		//Enable transmitter and receiver, 
                           A   830    ;  209		U0CTL0 = 0xC2; 	//11000010
                           A   831    .line 209
0001EE E9C20F42            A   832    	LDX	3906,#194
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  17


PC     Object              I  Line    Source main.src
                           A   833    ;  210		//Enable interrupts on received dat
                           A   834    ;  211		U0CTL1 = 0x00;	//00000000
                           A   835    .line 211
0001F2 E9000F43            A   836    	LDX	3907,#-0
                           A   837    ;  212		
                           A   838    ;  213		//Set up Timer0 to be an 8KHz heart
                           A   839    ;  214		//Disable timer, set mode to Contin
                           A   840    ;  215		T0CTL1 = 0x01;	//00000001
                           A   841    .line 215
0001F6 E9010F07            A   842    	LDX	3847,#1
                           A   843    ;  216		T0CTL0 = 0x00;	//00000000
                           A   844    .line 216
0001FA E9000F06            A   845    	LDX	3846,#-0
                           A   846    ;  217		//Reset count
                           A   847    ;  218		T0H = 0x00; T0L = 0x01;
                           A   848    .line 218
0001FE E9000F00            A   849    	LDX	3840,#-0
000202 E9010F01            A   850    	LDX	3841,#1
                           A   851    ;  219		//Set the reload value
                           A   852    ;  220		//T0RH = 0x05; T0RL = 0x5F;
                           A   853    ;  221		T0RH = 0x02; T0RL = 0xB3;
                           A   854    .line 221
000206 E9020F02            A   855    	LDX	3842,#2
00020A E9B30F03            A   856    	LDX	3843,#179
                           A   857    ;  222		//Set the interrupt vector and prio
                           A   858    ;  223		SET_VECTOR(TIMER0, isr_timer0);
                           A   859    ;  224		IRQ0ENH |= 0x20;
                           A   860    .line 224
00020E 49200FC1            A   861    	ORX	4033,#32
                           A   862    ;  225		IRQ0ENL |= 0x20;
                           A   863    .line 225
000212 49200FC2            A   864    	ORX	4034,#32
                           A   865    ;  226		//Enable timer
                           A   866    ;  227		T0CTL1 |= 0x80;
                           A   867    .line 227
000216 49800F07            A   868    	ORX	3847,#128
                           A   869    ;  228		
                           A   870    ;  229		//Set up Timer1 to be 38KHz, 50% du
                           A   871    ;  230		//Turn off timer, set mode to singl
                           A   872    ;  231		T1CTL1 = 0x43;	//01000011
                           A   873    .line 231
00021A E9430F0F            A   874    	LDX	3855,#67
                           A   875    ;  232		T1CTL0 = 0x00;	//00000000
                           A   876    .line 232
00021E E9000F0E            A   877    	LDX	3854,#-0
                           A   878    ;  233		//Reset count
                           A   879    ;  234		T1H = 0x00; T1L = 0x01;
                           A   880    .line 234
000222 E9000F08            A   881    	LDX	3848,#-0
000226 E9010F09            A   882    	LDX	3849,#1
                           A   883    ;  235		//Set PWM value(Duty cycle)
                           A   884    ;  236		T1PWMH = 0x00; T1PWML = 0x48;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  18


PC     Object              I  Line    Source main.src
                           A   885    .line 236
00022A E9000F0C            A   886    	LDX	3852,#-0
00022E E9480F0D            A   887    	LDX	3853,#72
                           A   888    ;  237		//Set the reload value(Period)
                           A   889    ;  238		T1RH = 0x00; T1RL = 0x90;
                           A   890    .line 238
000232 E9000F0A            A   891    	LDX	3850,#-0
000236 E9900F0B            A   892    	LDX	3851,#144
                           A   893    ;  239		//Enable timer
                           A   894    ;  240		T1CTL1 |= 0x80;
                           A   895    .line 240
00023A 49800F0F            A   896    	ORX	3855,#128
                           A   897    ;  241		
                           A   898    ;  242		//Turn off the inhibit line
                           A   899    ;  243		PAOUT &= 0xFD;
                           A   900    .line 243
00023E 59FD0FD3            A   901    	ANDX	4051,#253
                           A   902    ;  244		
                           A   903    ;  245		//lastIO = PAIN;
                           A   904    ;  246		//tempIO = PAIN;
                           A   905    ;  247		
                           A   906    ;  248		EI();
                           A   907    .line 248
000242 9F                  A   908    	EI
                           A   909    ;  249	}
                           A   910    .line 249
000243 D6 0000             A   911    	CALL	__b_framereset
000246 AF                  A   912    	RET	
                           A   913    .endfunc "init_cpu",249,"_init_cpu"
                           A   914    	SEGMENT ROM_DATA
                           A   915    
                           A   916    
                           A   917    ;**************************** _sendQueue ******
                           A   918    ;Name                         Addr/Register   S
                           A   919    ;_ser_tx_size                        STATIC    
                           A   920    ;_ser_tx_buffer                      STATIC    
                           A   921    ;_temp_tx_buffer                     STATIC    
                           A   922    ;_temp_tx_size                       STATIC    
                           A   923    ;i                                      RR0    
                           A   924    
                           A   925    
                           A   926    ; Aggregate Stack Size: 0 (words)
                           A   927    
                           A   928    
                           A   929    	.FRAME _n_sendQueue,?_n_sendQueue,RDATA
                           A   930    	.FRAME _f_sendQueue,?_f_sendQueue,EDATA
                           A   931    	SEGMENT main_TEXT
000247                     A   932    _sendQueue:
                           A   933    .define "_sendQueue"
                           A   934    .value _sendQueue
                           A   935    .class 2
                           A   936    .type 65
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  19


PC     Object              I  Line    Source main.src
                           A   937    .type 0
                           A   938    .endef
                           A   939    .begfunc "sendQueue",251,"_sendQueue"
                           A   940    ;  250	
                           A   941    ;  251	void sendQueue(void) {
                           A   942    .define "i"
                           A   943    .class 4
                           A   944    .reg 17
                           A   945    .type 3
                           A   946    .type 0
                           A   947    .endef
000247 D6 0000             A   948    	CALL	__b_frameset00
00024A 8B 0D               A   949    	JR	_5_L_58
                           A   950    ;  252		int i;
                           A   951    ;  253		
                           A   952    ;  254		//Copy the data from the temporary 
                           A   953    ;  255		for(i = 0;i < temp_tx_size;i++) {
00024C                     A   954    _5_L_59:
                           A   955    .line 255
00024C 84203F              A   956    	LDX	R2,_temp_tx_size
00024F A212                A   957    	CP	R1,R2
000251 1FA6E000            A   958    	CPC	R0,#-0
000255 1B 08               A   959    	JR	LT,_5_L_61
000257 8B 20               A   960    	JR	_5_L_62
000259                     A   961    _5_L_58:
000259 B0E0                A   962    	CLR	R0
00025B B0E1                A   963    	CLR	R1
00025D 8B ED               A   964    	JR	_5_L_59
00025F                     A   965    _5_L_61:
                           A   966    ;  256			ser_tx_buffer[i] = temp_tx_buff
                           A   967    .line 256
00025F 2C 00               A   968    	LD	R2,#high(_temp_tx_buffer)
000261 3C 2F               A   969    	LD	R3,#low(_temp_tx_buffer)
000263 0231                A   970    	ADD	R3,R1
000265 1220                A   971    	ADC	R2,R0
000267 4C 00               A   972    	LD	R4,#high(_ser_tx_buffer)
000269 5C 14               A   973    	LD	R5,#low(_ser_tx_buffer)
00026B 0251                A   974    	ADD	R5,R1
00026D 1240                A   975    	ADC	R4,R0
00026F 86E2E6              A   976    	LDX	R6,@RR2
000272 96E6E4              A   977    	LDX	@RR4,R6
                           A   978    .line 255
000275 A0E0                A   979    	INCW	RR0
                           A   980    ;  257		}
                           A   981    .line 257
000277 8B D3               A   982    	JR	_5_L_59
000279                     A   983    _5_L_62:
                           A   984    ;  258		ser_tx_size = temp_tx_size;
                           A   985    .line 258
000279 E8 03F024           A   986    	LDX	_ser_tx_size,_temp_tx_size
                           A   987    ;  259		
                           A   988    ;  260		//Clear the temporary queue.
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  20


PC     Object              I  Line    Source main.src
                           A   989    ;  261		temp_tx_size = 0;
                           A   990    .line 261
00027D E900003F            A   991    	LDX	_temp_tx_size,#-0
                           A   992    ;  262		
                           A   993    ;  263		//Kickstart the UART.
                           A   994    ;  264		IRQ0 |= 0x08;
                           A   995    .line 264
000281 49080FC0            A   996    	ORX	4032,#8
                           A   997    ;  265	}
                           A   998    .line 265
000285 D6 0000             A   999    	CALL	__b_framereset
000288 AF                  A  1000    	RET	
                           A  1001    .endfunc "sendQueue",265,"_sendQueue"
                           A  1002    	SEGMENT ROM_DATA
                           A  1003    
                           A  1004    
                           A  1005    ;**************************** _queueByte ******
                           A  1006    ;Name                         Addr/Register   S
                           A  1007    ;_temp_tx_size                       STATIC    
                           A  1008    ;_temp_tx_buffer                     STATIC    
                           A  1009    ;input                                   R8    
                           A  1010    
                           A  1011    
                           A  1012    ; Aggregate Stack Size: 0 (words)
                           A  1013    
                           A  1014    
                           A  1015    	.FRAME _n_queueByte,?_n_queueByte,RDATA
                           A  1016    	.FRAME _f_queueByte,?_f_queueByte,EDATA
                           A  1017    	SEGMENT main_TEXT
000289                     A  1018    _queueByte:
                           A  1019    .define "_queueByte"
                           A  1020    .value _queueByte
                           A  1021    .class 2
                           A  1022    .type 65
                           A  1023    .type 0
                           A  1024    .endef
                           A  1025    .begfunc "queueByte",267,"_queueByte"
                           A  1026    .define "input"
                           A  1027    .class 17
                           A  1028    .reg 9
                           A  1029    .type 12
                           A  1030    .type 0
                           A  1031    .endef
000289 D6 0000             A  1032    	CALL	__b_frameset00
                           A  1033    ;  266	
                           A  1034    ;  267	void queueByte(unsigned char input) {
                           A  1035    ;  268		//Add a byte to the temporary queue
                           A  1036    ;  269		temp_tx_buffer[temp_tx_size] = inpu
                           A  1037    .line 269
00028C 84203F              A  1038    	LDX	R2,_temp_tx_size
00028F 0C 00               A  1039    	LD	R0,#high(_temp_tx_buffer)
000291 1C 2F               A  1040    	LD	R1,#low(_temp_tx_buffer)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  21


PC     Object              I  Line    Source main.src
000293 0212                A  1041    	ADD	R1,R2
000295 16E000              A  1042    	ADC	R0,#0
000298 96E8E0              A  1043    	LDX	@RR0,R8
                           A  1044    ;  270		temp_tx_size += 1;
                           A  1045    .line 270
00029B 0901003F            A  1046    	ADDX	_temp_tx_size,#1
                           A  1047    ;  271	}
                           A  1048    .line 271
00029F D6 0000             A  1049    	CALL	__b_framereset
0002A2 AF                  A  1050    	RET	
                           A  1051    .endfunc "queueByte",271,"_queueByte"
                           A  1052    	SEGMENT ROM_DATA
                           A  1053    
                           A  1054    
                           A  1055    ;**************************** _queueChecksum **
                           A  1056    ;Name                         Addr/Register   S
                           A  1057    ;_queueByte                          IMPORT  --
                           A  1058    ;_temp_tx_buffer                     STATIC    
                           A  1059    ;_temp_tx_size                       STATIC    
                           A  1060    ;checksum                                R2    
                           A  1061    ;i                                      RR0    
                           A  1062    
                           A  1063    
                           A  1064    ; Aggregate Stack Size: 0 (words)
                           A  1065    
                           A  1066    
                           A  1067    	.FRAME _n_queueChecksum,?_n_queueChecksum,R
                           A  1068    	.FCALL _n_queueByte
                           A  1069    	.FRAME _f_queueChecksum,?_f_queueChecksum,E
                           A  1070    	.FCALL _f_queueByte
                           A  1071    	SEGMENT main_TEXT
0002A3                     A  1072    _queueChecksum:
                           A  1073    .define "_queueChecksum"
                           A  1074    .value _queueChecksum
                           A  1075    .class 2
                           A  1076    .type 65
                           A  1077    .type 0
                           A  1078    .endef
                           A  1079    .begfunc "queueChecksum",273,"_queueChecksum"
                           A  1080    ;  272	
                           A  1081    ;  273	void queueChecksum(void) {
                           A  1082    .define "i"
                           A  1083    .class 4
                           A  1084    .reg 17
                           A  1085    .type 3
                           A  1086    .type 0
                           A  1087    .endef
                           A  1088    .define "checksum"
                           A  1089    .class 4
                           A  1090    .reg 3
                           A  1091    .type 12
                           A  1092    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  22


PC     Object              I  Line    Source main.src
                           A  1093    .endef
0002A3 D6 0000             A  1094    	CALL	__b_frameset00
                           A  1095    ;  274		int i;
                           A  1096    ;  275		unsigned char checksum = 0xFF;
                           A  1097    .line 275
0002A6 2CFF                A  1098    	LD	R2,#255
0002A8 8B 0D               A  1099    	JR	_7_L_66
                           A  1100    ;  276		
                           A  1101    ;  277		//Calculate a checksum for all the 
                           A  1102    ;  278		for(i = 0; i < temp_tx_size;i++) {
0002AA                     A  1103    _7_L_67:
                           A  1104    .line 278
0002AA 84303F              A  1105    	LDX	R3,_temp_tx_size
0002AD A213                A  1106    	CP	R1,R3
0002AF 1FA6E000            A  1107    	CPC	R0,#-0
0002B3 1B 08               A  1108    	JR	LT,_7_L_69
0002B5 8B 17               A  1109    	JR	_7_L_70
0002B7                     A  1110    _7_L_66:
0002B7 B0E0                A  1111    	CLR	R0
0002B9 B0E1                A  1112    	CLR	R1
0002BB 8B ED               A  1113    	JR	_7_L_67
0002BD                     A  1114    _7_L_69:
                           A  1115    ;  279			checksum -= temp_tx_buffer[i];
                           A  1116    .line 279
0002BD 4C 00               A  1117    	LD	R4,#high(_temp_tx_buffer)
0002BF 5C 2F               A  1118    	LD	R5,#low(_temp_tx_buffer)
0002C1 0251                A  1119    	ADD	R5,R1
0002C3 1240                A  1120    	ADC	R4,R0
0002C5 86E4E3              A  1121    	LDX	R3,@RR4
0002C8 2223                A  1122    	SUB	R2,R3
                           A  1123    .line 278
0002CA A0E0                A  1124    	INCW	RR0
                           A  1125    ;  280		}
                           A  1126    .line 280
0002CC 8B DC               A  1127    	JR	_7_L_67
0002CE                     A  1128    _7_L_70:
                           A  1129    ;  281		
                           A  1130    ;  282		//Add the checksum to the queue.
                           A  1131    ;  283		queueByte(checksum);
                           A  1132    .line 283
0002CE E4E2E8              A  1133    	LD	R8,R2
0002D1 D6 0289             A  1134    	CALL	_queueByte
                           A  1135    ;  284	}
                           A  1136    .line 284
0002D4 D6 0000             A  1137    	CALL	__b_framereset
0002D7 AF                  A  1138    	RET	
                           A  1139    .endfunc "queueChecksum",284,"_queueChecksum"
                           A  1140    	SEGMENT ROM_DATA
                           A  1141    
                           A  1142    
                           A  1143    ;**************************** _loadAmmo *******
                           A  1144    ;Name                         Addr/Register   S
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  23


PC     Object              I  Line    Source main.src
                           A  1145    ;_ir_loaded_tags                     STATIC    
                           A  1146    ;howMuch                                 R8    
                           A  1147    
                           A  1148    
                           A  1149    ; Aggregate Stack Size: 0 (words)
                           A  1150    
                           A  1151    
                           A  1152    	.FRAME _n_loadAmmo,?_n_loadAmmo,RDATA
                           A  1153    	.FRAME _f_loadAmmo,?_f_loadAmmo,EDATA
                           A  1154    	SEGMENT main_TEXT
0002D8                     A  1155    _loadAmmo:
                           A  1156    .define "_loadAmmo"
                           A  1157    .value _loadAmmo
                           A  1158    .class 2
                           A  1159    .type 65
                           A  1160    .type 0
                           A  1161    .endef
                           A  1162    .begfunc "loadAmmo",286,"_loadAmmo"
                           A  1163    .define "howMuch"
                           A  1164    .class 17
                           A  1165    .reg 9
                           A  1166    .type 12
                           A  1167    .type 0
                           A  1168    .endef
0002D8 D6 0000             A  1169    	CALL	__b_frameset00
                           A  1170    ;  285	
                           A  1171    ;  286	void loadAmmo(unsigned char howMuch) {
                           A  1172    ;  287		ir_loaded_tags = howMuch;
                           A  1173    .line 287
0002DB 948029              A  1174    	LDX	_ir_loaded_tags,R8
                           A  1175    ;  288		//INHIBIT should be high to generat
                           A  1176    ;  289		PAOUT |= 0x02;
                           A  1177    .line 289
0002DE 49020FD3            A  1178    	ORX	4051,#2
                           A  1179    ;  290	}
                           A  1180    .line 290
0002E2 D6 0000             A  1181    	CALL	__b_framereset
0002E5 AF                  A  1182    	RET	
                           A  1183    .endfunc "loadAmmo",290,"_loadAmmo"
                           A  1184    	SEGMENT ROM_DATA
                           A  1185    
                           A  1186    
                           A  1187    ;**************************** _rxedResetBarrel 
                           A  1188    ;Name                         Addr/Register   S
                           A  1189    ;_reloadCooldown                     STATIC    
                           A  1190    ;_weAreReloading                     STATIC    
                           A  1191    ;_weAreRegistered                    STATIC    
                           A  1192    ;_sendBarrelReply                    STATIC    
                           A  1193    ;_sendLoadSpecial                    STATIC    
                           A  1194    ;_sendArmSpecial                     STATIC    
                           A  1195    ;_ir_loaded_tags                     STATIC    
                           A  1196    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  24


PC     Object              I  Line    Source main.src
                           A  1197    
                           A  1198    ; Aggregate Stack Size: 0 (words)
                           A  1199    
                           A  1200    
                           A  1201    	.FRAME _n_rxedResetBarrel,?_n_rxedResetBarr
                           A  1202    	.FRAME _f_rxedResetBarrel,?_f_rxedResetBarr
                           A  1203    	SEGMENT main_TEXT
0002E6                     A  1204    _rxedResetBarrel:
                           A  1205    .define "_rxedResetBarrel"
                           A  1206    .value _rxedResetBarrel
                           A  1207    .class 2
                           A  1208    .type 65
                           A  1209    .type 0
                           A  1210    .endef
                           A  1211    .begfunc "rxedResetBarrel",292,"_rxedResetBarre
0002E6 D6 0000             A  1212    	CALL	__b_frameset00
                           A  1213    ;  291	
                           A  1214    ;  292	void rxedResetBarrel(void) {
                           A  1215    ;  293		//This will reset any variables use
                           A  1216    ;  294		
                           A  1217    ;  295		ir_loaded_tags = 0;
                           A  1218    .line 295
0002E9 E9000029            A  1219    	LDX	_ir_loaded_tags,#-0
                           A  1220    ;  296		
                           A  1221    ;  297		sendArmSpecial = 0;
                           A  1222    .line 297
0002ED E9000042            A  1223    	LDX	_sendArmSpecial,#-0
                           A  1224    ;  298		sendLoadSpecial = 0;
                           A  1225    .line 298
0002F1 E9000041            A  1226    	LDX	_sendLoadSpecial,#-0
                           A  1227    ;  299		sendBarrelReply = 0;
                           A  1228    .line 299
0002F5 E9000040            A  1229    	LDX	_sendBarrelReply,#-0
                           A  1230    ;  300		
                           A  1231    ;  301		weAreRegistered = 0;
                           A  1232    .line 301
0002F9 E9000043            A  1233    	LDX	_weAreRegistered,#-0
                           A  1234    ;  302		weAreReloading = 0;
                           A  1235    .line 302
0002FD E9000044            A  1236    	LDX	_weAreReloading,#-0
                           A  1237    ;  303		
                           A  1238    ;  304		reloadCooldown = 800;
                           A  1239    .line 304
000301 E9030045            A  1240    	LDX	_reloadCooldown,#3
000305 E9200046            A  1241    	LDX	_reloadCooldown+1,#32
                           A  1242    ;  305		
                           A  1243    ;  306		PAOUT &= 0xFD;
                           A  1244    .line 306
000309 59FD0FD3            A  1245    	ANDX	4051,#253
                           A  1246    ;  307	}
                           A  1247    .line 307
00030D D6 0000             A  1248    	CALL	__b_framereset
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  25


PC     Object              I  Line    Source main.src
000310 AF                  A  1249    	RET	
                           A  1250    .endfunc "rxedResetBarrel",307,"_rxedResetBarre
                           A  1251    	SEGMENT ROM_DATA
                           A  1252    
                           A  1253    
                           A  1254    ;**************************** _rxedRollCall ***
                           A  1255    ;Name                         Addr/Register   S
                           A  1256    ;_sendBarrelReply                    STATIC    
                           A  1257    
                           A  1258    
                           A  1259    ; Aggregate Stack Size: 0 (words)
                           A  1260    
                           A  1261    
                           A  1262    	.FRAME _n_rxedRollCall,?_n_rxedRollCall,RDA
                           A  1263    	.FRAME _f_rxedRollCall,?_f_rxedRollCall,EDA
                           A  1264    	SEGMENT main_TEXT
000311                     A  1265    _rxedRollCall:
                           A  1266    .define "_rxedRollCall"
                           A  1267    .value _rxedRollCall
                           A  1268    .class 2
                           A  1269    .type 65
                           A  1270    .type 0
                           A  1271    .endef
                           A  1272    .begfunc "rxedRollCall",309,"_rxedRollCall"
000311 D6 0000             A  1273    	CALL	__b_frameset00
                           A  1274    ;  308	
                           A  1275    ;  309	void rxedRollCall(void) {
                           A  1276    ;  310		/*	Format:		BType		$00
                           A  1277    ;  311						BData0		Blaster
                           A  1278    ;  312						BSum		$cs
                           A  1279    ;  313		*/
                           A  1280    ;  314		//We don't actually care about anyt
                           A  1281    ;  315		//Set a flag that will be seen by s
                           A  1282    ;  316		sendBarrelReply = 1;
                           A  1283    .line 316
000314 E9010040            A  1284    	LDX	_sendBarrelReply,#1
                           A  1285    ;  317	}
                           A  1286    .line 317
000318 D6 0000             A  1287    	CALL	__b_framereset
00031B AF                  A  1288    	RET	
                           A  1289    .endfunc "rxedRollCall",317,"_rxedRollCall"
                           A  1290    	SEGMENT ROM_DATA
                           A  1291    
                           A  1292    
                           A  1293    ;**************************** _rxedBarrelSeen *
                           A  1294    ;Name                         Addr/Register   S
                           A  1295    ;_weAreRegistered                    STATIC    
                           A  1296    ;_rxedResetBarrel                    IMPORT  --
                           A  1297    
                           A  1298    
                           A  1299    ; Aggregate Stack Size: 0 (words)
                           A  1300    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  26


PC     Object              I  Line    Source main.src
                           A  1301    
                           A  1302    	.FRAME _n_rxedBarrelSeen,?_n_rxedBarrelSeen
                           A  1303    	.FCALL _n_rxedResetBarrel
                           A  1304    	.FRAME _f_rxedBarrelSeen,?_f_rxedBarrelSeen
                           A  1305    	.FCALL _f_rxedResetBarrel
                           A  1306    	SEGMENT main_TEXT
00031C                     A  1307    _rxedBarrelSeen:
                           A  1308    .define "_rxedBarrelSeen"
                           A  1309    .value _rxedBarrelSeen
                           A  1310    .class 2
                           A  1311    .type 65
                           A  1312    .type 0
                           A  1313    .endef
                           A  1314    .begfunc "rxedBarrelSeen",319,"_rxedBarrelSeen"
00031C D6 0000             A  1315    	CALL	__b_frameset00
                           A  1316    ;  318	
                           A  1317    ;  319	void rxedBarrelSeen(void) {
                           A  1318    ;  320		/*	Format:		BType		$40
                           A  1319    ;  321						BSum		$cs
                           A  1320    ;  322		*/
                           A  1321    ;  323		//No data, no cares! This does mean
                           A  1322    ;  324		rxedResetBarrel();
                           A  1323    .line 324
00031F D6 02E6             A  1324    	CALL	_rxedResetBarrel
                           A  1325    ;  325		weAreRegistered = 1;
                           A  1326    .line 325
000322 E9010043            A  1327    	LDX	_weAreRegistered,#1
                           A  1328    ;  326	}
                           A  1329    .line 326
000326 D6 0000             A  1330    	CALL	__b_framereset
000329 AF                  A  1331    	RET	
                           A  1332    .endfunc "rxedBarrelSeen",326,"_rxedBarrelSeen"
                           A  1333    	SEGMENT ROM_DATA
                           A  1334    
                           A  1335    
                           A  1336    ;**************************** _rxedBarrelAck **
                           A  1337    ;Name                         Addr/Register   S
                           A  1338    ;_reloadCooldown                     STATIC    
                           A  1339    ;_loadAmmo                           IMPORT  --
                           A  1340    ;_sendArmSpecial                     STATIC    
                           A  1341    ;_weAreReloading                     STATIC    
                           A  1342    
                           A  1343    
                           A  1344    ; Aggregate Stack Size: 0 (words)
                           A  1345    
                           A  1346    
                           A  1347    	.FRAME _n_rxedBarrelAck,?_n_rxedBarrelAck,R
                           A  1348    	.FCALL _n_loadAmmo
                           A  1349    	.FRAME _f_rxedBarrelAck,?_f_rxedBarrelAck,E
                           A  1350    	.FCALL _f_loadAmmo
                           A  1351    	SEGMENT main_TEXT
00032A                     A  1352    _rxedBarrelAck:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  27


PC     Object              I  Line    Source main.src
                           A  1353    .define "_rxedBarrelAck"
                           A  1354    .value _rxedBarrelAck
                           A  1355    .class 2
                           A  1356    .type 65
                           A  1357    .type 0
                           A  1358    .endef
                           A  1359    .begfunc "rxedBarrelAck",328,"_rxedBarrelAck"
00032A D6 0000             A  1360    	CALL	__b_frameset00
                           A  1361    ;  327	
                           A  1362    ;  328	void rxedBarrelAck(void) {
                           A  1363    ;  329		/*	Format:		BType		$41
                           A  1364    ;  330						BSum		$cs
                           A  1365    ;  331		*/
                           A  1366    ;  332		//This one we actually care about, 
                           A  1367    ;  333		if(weAreReloading == 1) {
                           A  1368    .line 333
00032D A9010044            A  1369    	CPX	_weAreReloading,#1
000331 EB 06               A  1370    	JR	NE,_12_L_78
                           A  1371    ;  334			//Because we still need to actu
                           A  1372    ;  335			//Flag that we need to send thi
                           A  1373    ;  336			sendArmSpecial = 1;
                           A  1374    .line 336
000333 E9010042            A  1375    	LDX	_sendArmSpecial,#1
                           A  1376    ;  337		} else if(weAreReloading == 2) {
                           A  1377    .line 337
000337 8B 17               A  1378    	JR	_12_L_79
000339                     A  1379    _12_L_78:
000339 A9020044            A  1380    	CPX	_weAreReloading,#2
00033D EB 11               A  1381    	JR	NE,_12_L_79
                           A  1382    ;  338			weAreReloading = 0;
                           A  1383    .line 338
00033F E9000044            A  1384    	LDX	_weAreReloading,#-0
                           A  1385    ;  339			//We're now in control of sendi
                           A  1386    ;  340			loadAmmo(AMMO);
                           A  1387    .line 340
000343 8C0F                A  1388    	LD	R8,#15
000345 D6 02D8             A  1389    	CALL	_loadAmmo
                           A  1390    ;  341			//Slow down reloading a bit...
                           A  1391    ;  342			reloadCooldown = 800;
                           A  1392    .line 342
000348 E9030045            A  1393    	LDX	_reloadCooldown,#3
00034C E9200046            A  1394    	LDX	_reloadCooldown+1,#32
                           A  1395    ;  343		}
                           A  1396    ;  344	}
000350                     A  1397    _12_L_79:
                           A  1398    .line 344
000350 D6 0000             A  1399    	CALL	__b_framereset
000353 AF                  A  1400    	RET	
                           A  1401    .endfunc "rxedBarrelAck",344,"_rxedBarrelAck"
                           A  1402    	SEGMENT ROM_DATA
                           A  1403    
                           A  1404    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  28


PC     Object              I  Line    Source main.src
                           A  1405    ;**************************** _BarrelReply ****
                           A  1406    ;Name                         Addr/Register   S
                           A  1407    ;_sendQueue                          IMPORT  --
                           A  1408    ;_queueChecksum                      IMPORT  --
                           A  1409    ;_queueByte                          IMPORT  --
                           A  1410    
                           A  1411    
                           A  1412    ; Aggregate Stack Size: 0 (words)
                           A  1413    
                           A  1414    
                           A  1415    	.FRAME _n_BarrelReply,?_n_BarrelReply,RDATA
                           A  1416    	.FCALL _n_queueByte
                           A  1417    	.FCALL _n_queueChecksum
                           A  1418    	.FCALL _n_sendQueue
                           A  1419    	.FRAME _f_BarrelReply,?_f_BarrelReply,EDATA
                           A  1420    	.FCALL _f_queueByte
                           A  1421    	.FCALL _f_queueChecksum
                           A  1422    	.FCALL _f_sendQueue
                           A  1423    	SEGMENT main_TEXT
000354                     A  1424    _BarrelReply:
                           A  1425    .define "_BarrelReply"
                           A  1426    .value _BarrelReply
                           A  1427    .class 2
                           A  1428    .type 65
                           A  1429    .type 0
                           A  1430    .endef
                           A  1431    .begfunc "BarrelReply",346,"_BarrelReply"
000354 D6 0000             A  1432    	CALL	__b_frameset00
                           A  1433    ;  345	
                           A  1434    ;  346	void BarrelReply(void) {
                           A  1435    ;  347		/*	BARREL-REPLY
                           A  1436    ;  348			Format:		BType		$40
                           A  1437    ;  349						BData0		Barrel 
                           A  1438    ;  350						BSum		$cs
                           A  1439    ;  351			Barrels send this block in resp
                           A  1440    ;  352			BData0 should be 0x01 for a sho
                           A  1441    ;  353			Other values are undefined, but
                           A  1442    ;  354		*/
                           A  1443    ;  355		
                           A  1444    ;  356		//BType
                           A  1445    ;  357		queueByte(0x40);
                           A  1446    .line 357
000357 8C40                A  1447    	LD	R8,#64
000359 D6 0289             A  1448    	CALL	_queueByte
                           A  1449    ;  358		//BData0
                           A  1450    ;  359		queueByte(BARRELTYPE);
                           A  1451    .line 359
00035C 8C02                A  1452    	LD	R8,#2
00035E D6 0289             A  1453    	CALL	_queueByte
                           A  1454    ;  360		//BSum
                           A  1455    ;  361		queueChecksum();
                           A  1456    .line 361
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  29


PC     Object              I  Line    Source main.src
000361 D6 02A3             A  1457    	CALL	_queueChecksum
                           A  1458    ;  362		
                           A  1459    ;  363		//Send it!
                           A  1460    ;  364		sendQueue();
                           A  1461    .line 364
000364 D6 0247             A  1462    	CALL	_sendQueue
                           A  1463    ;  365	}
                           A  1464    .line 365
000367 D6 0000             A  1465    	CALL	__b_framereset
00036A AF                  A  1466    	RET	
                           A  1467    .endfunc "BarrelReply",365,"_BarrelReply"
                           A  1468    	SEGMENT ROM_DATA
                           A  1469    
                           A  1470    
                           A  1471    ;**************************** _LoadSpecial ****
                           A  1472    ;Name                         Addr/Register   S
                           A  1473    ;_sendQueue                          IMPORT  --
                           A  1474    ;_weAreReloading                     STATIC    
                           A  1475    ;_queueChecksum                      IMPORT  --
                           A  1476    ;_queueByte                          IMPORT  --
                           A  1477    
                           A  1478    
                           A  1479    ; Aggregate Stack Size: 0 (words)
                           A  1480    
                           A  1481    
                           A  1482    	.FRAME _n_LoadSpecial,?_n_LoadSpecial,RDATA
                           A  1483    	.FCALL _n_queueByte
                           A  1484    	.FCALL _n_queueChecksum
                           A  1485    	.FCALL _n_sendQueue
                           A  1486    	.FRAME _f_LoadSpecial,?_f_LoadSpecial,EDATA
                           A  1487    	.FCALL _f_queueByte
                           A  1488    	.FCALL _f_queueChecksum
                           A  1489    	.FCALL _f_sendQueue
                           A  1490    	SEGMENT main_TEXT
00036B                     A  1491    _LoadSpecial:
                           A  1492    .define "_LoadSpecial"
                           A  1493    .value _LoadSpecial
                           A  1494    .class 2
                           A  1495    .type 65
                           A  1496    .type 0
                           A  1497    .endef
                           A  1498    .begfunc "LoadSpecial",367,"_LoadSpecial"
00036B D6 0000             A  1499    	CALL	__b_frameset00
                           A  1500    ;  366	
                           A  1501    ;  367	void LoadSpecial(void) {
                           A  1502    ;  368		/*	LOAD-SPECIAL
                           A  1503    ;  369			Format:		BType		$41
                           A  1504    ;  370						BData0		Ammo Ne
                           A  1505    ;  371						BData1		DoubleT
                           A  1506    ;  372						BData2		LoadSFX
                           A  1507    ;  373						BData3		FireSFX
                           A  1508    ;  374						BData4		Display
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  30


PC     Object              I  Line    Source main.src
                           A  1509    ;  375						BSum		$cs
                           A  1510    ;  376			Unloads any ready ammo and load
                           A  1511    ;  377			Ammo Needed is how much ammo wi
                           A  1512    ;  378			DoubleTaps is (UNKNOWN).
                           A  1513    ;  379			LoadSFX is what sound effect wi
                           A  1514    ;  380			FireSFX is what sound effect wi
                           A  1515    ;  381				special ammo is loaded/arme
                           A  1516    ;  382			DisplayMode is what will be sho
                           A  1517    ;  383		*/
                           A  1518    ;  384		
                           A  1519    ;  385		//BType
                           A  1520    ;  386		queueByte(0x41);
                           A  1521    .line 386
00036E 8C41                A  1522    	LD	R8,#65
000370 D6 0289             A  1523    	CALL	_queueByte
                           A  1524    ;  387		//BData0
                           A  1525    ;  388		queueByte(AMMONEEDED);
                           A  1526    .line 388
000373 8C0F                A  1527    	LD	R8,#15
000375 D6 0289             A  1528    	CALL	_queueByte
                           A  1529    ;  389		//BData1
                           A  1530    ;  390		queueByte(DOUBLETAPS);
                           A  1531    .line 390
000378 B0E8                A  1532    	CLR	R8
00037A D6 0289             A  1533    	CALL	_queueByte
                           A  1534    ;  391		//BData2
                           A  1535    ;  392		queueByte(LOADSFX);
                           A  1536    .line 392
00037D 8C0E                A  1537    	LD	R8,#14
00037F D6 0289             A  1538    	CALL	_queueByte
                           A  1539    ;  393		//BData3
                           A  1540    ;  394		queueByte(FIRESFX);
                           A  1541    .line 394
000382 8C0B                A  1542    	LD	R8,#11
000384 D6 0289             A  1543    	CALL	_queueByte
                           A  1544    ;  395		//BData4
                           A  1545    ;  396		queueByte(DISPLAYMODE);
                           A  1546    .line 396
000387 B0E8                A  1547    	CLR	R8
000389 D6 0289             A  1548    	CALL	_queueByte
                           A  1549    ;  397		//BSum
                           A  1550    ;  398		queueChecksum();
                           A  1551    .line 398
00038C D6 02A3             A  1552    	CALL	_queueChecksum
                           A  1553    ;  399		
                           A  1554    ;  400		//We also need to mark that we're t
                           A  1555    ;  401		weAreReloading = 1;
                           A  1556    .line 401
00038F E9010044            A  1557    	LDX	_weAreReloading,#1
                           A  1558    ;  402		
                           A  1559    ;  403		//Send it!
                           A  1560    ;  404		sendQueue();
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  31


PC     Object              I  Line    Source main.src
                           A  1561    .line 404
000393 D6 0247             A  1562    	CALL	_sendQueue
                           A  1563    ;  405	}
                           A  1564    .line 405
000396 D6 0000             A  1565    	CALL	__b_framereset
000399 AF                  A  1566    	RET	
                           A  1567    .endfunc "LoadSpecial",405,"_LoadSpecial"
                           A  1568    	SEGMENT ROM_DATA
                           A  1569    
                           A  1570    
                           A  1571    ;**************************** _ArmSpecial *****
                           A  1572    ;Name                         Addr/Register   S
                           A  1573    ;_weAreReloading                     STATIC    
                           A  1574    ;_sendQueue                          IMPORT  --
                           A  1575    ;_queueChecksum                      IMPORT  --
                           A  1576    ;_queueByte                          IMPORT  --
                           A  1577    
                           A  1578    
                           A  1579    ; Aggregate Stack Size: 0 (words)
                           A  1580    
                           A  1581    
                           A  1582    	.FRAME _n_ArmSpecial,?_n_ArmSpecial,RDATA
                           A  1583    	.FCALL _n_queueByte
                           A  1584    	.FCALL _n_queueChecksum
                           A  1585    	.FCALL _n_sendQueue
                           A  1586    	.FRAME _f_ArmSpecial,?_f_ArmSpecial,EDATA
                           A  1587    	.FCALL _f_queueByte
                           A  1588    	.FCALL _f_queueChecksum
                           A  1589    	.FCALL _f_sendQueue
                           A  1590    	SEGMENT main_TEXT
00039A                     A  1591    _ArmSpecial:
                           A  1592    .define "_ArmSpecial"
                           A  1593    .value _ArmSpecial
                           A  1594    .class 2
                           A  1595    .type 65
                           A  1596    .type 0
                           A  1597    .endef
                           A  1598    .begfunc "ArmSpecial",407,"_ArmSpecial"
00039A D6 0000             A  1599    	CALL	__b_frameset00
                           A  1600    ;  406	
                           A  1601    ;  407	void ArmSpecial(void) {
                           A  1602    ;  408		/*	ARM-SPECIAL
                           A  1603    ;  409			Format:		BType		$42
                           A  1604    ;  410						BData0	BurstSize (
                           A  1605    ;  411						BData1	Ammo (1-15)
                           A  1606    ;  412						BData2	TrigRate (1
                           A  1607    ;  413						BSum		$cs
                           A  1608    ;  414			BurstSize is in the range 1 to 
                           A  1609    ;  415			Ammo is the amount of ready amm
                           A  1610    ;  416			TrigRate is the number of milli
                           A  1611    ;  417		*/
                           A  1612    ;  418		
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  32


PC     Object              I  Line    Source main.src
                           A  1613    ;  419		//BType
                           A  1614    ;  420		queueByte(0x42);
                           A  1615    .line 420
00039D 8C42                A  1616    	LD	R8,#66
00039F D6 0289             A  1617    	CALL	_queueByte
                           A  1618    ;  421		//BData0
                           A  1619    ;  422		queueByte(BURSTSIZE);
                           A  1620    .line 422
0003A2 8C0F                A  1621    	LD	R8,#15
0003A4 D6 0289             A  1622    	CALL	_queueByte
                           A  1623    ;  423		//BData1
                           A  1624    ;  424		queueByte(AMMO);
                           A  1625    .line 424
0003A7 8C0F                A  1626    	LD	R8,#15
0003A9 D6 0289             A  1627    	CALL	_queueByte
                           A  1628    ;  425		//BData2
                           A  1629    ;  426		queueByte(TRIGRATE);
                           A  1630    .line 426
0003AC 8C10                A  1631    	LD	R8,#16
0003AE D6 0289             A  1632    	CALL	_queueByte
                           A  1633    ;  427		//BSum
                           A  1634    ;  428		queueChecksum();
                           A  1635    .line 428
0003B1 D6 02A3             A  1636    	CALL	_queueChecksum
                           A  1637    ;  429		
                           A  1638    ;  430		//Send it!
                           A  1639    ;  431		sendQueue();
                           A  1640    .line 431
0003B4 D6 0247             A  1641    	CALL	_sendQueue
                           A  1642    ;  432		
                           A  1643    ;  433		//We're expecting another ACK from 
                           A  1644    ;  434		weAreReloading = 2;
                           A  1645    .line 434
0003B7 E9020044            A  1646    	LDX	_weAreReloading,#2
                           A  1647    ;  435	}
                           A  1648    .line 435
0003BB D6 0000             A  1649    	CALL	__b_framereset
0003BE AF                  A  1650    	RET	
                           A  1651    .endfunc "ArmSpecial",435,"_ArmSpecial"
                           A  1652    	SEGMENT ROM_DATA
                           A  1653    
                           A  1654    
                           A  1655    ;**************************** _sendSomething **
                           A  1656    ;Name                         Addr/Register   S
                           A  1657    ;_LoadSpecial                        IMPORT  --
                           A  1658    ;_ir_loaded_tags                     STATIC    
                           A  1659    ;_reloadCooldown                     STATIC    
                           A  1660    ;_weAreReloading                     STATIC    
                           A  1661    ;_sendLoadSpecial                    STATIC    
                           A  1662    ;_ArmSpecial                         IMPORT  --
                           A  1663    ;_sendArmSpecial                     STATIC    
                           A  1664    ;_BarrelReply                        IMPORT  --
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  33


PC     Object              I  Line    Source main.src
                           A  1665    ;_sendBarrelReply                    STATIC    
                           A  1666    ;_ser_tx_cooldown                    STATIC    
                           A  1667    ;_ser_tx_size                        STATIC    
                           A  1668    
                           A  1669    
                           A  1670    ; Aggregate Stack Size: 0 (words)
                           A  1671    
                           A  1672    
                           A  1673    	.FRAME _n_sendSomething,?_n_sendSomething,R
                           A  1674    	.FCALL _n_BarrelReply
                           A  1675    	.FCALL _n_ArmSpecial
                           A  1676    	.FCALL _n_LoadSpecial
                           A  1677    	.FRAME _f_sendSomething,?_f_sendSomething,E
                           A  1678    	.FCALL _f_BarrelReply
                           A  1679    	.FCALL _f_ArmSpecial
                           A  1680    	.FCALL _f_LoadSpecial
                           A  1681    	SEGMENT main_TEXT
0003BF                     A  1682    _sendSomething:
                           A  1683    .define "_sendSomething"
                           A  1684    .value _sendSomething
                           A  1685    .class 2
                           A  1686    .type 65
                           A  1687    .type 0
                           A  1688    .endef
                           A  1689    .begfunc "sendSomething",437,"_sendSomething"
0003BF D6 0000             A  1690    	CALL	__b_frameset00
                           A  1691    ;  436	
                           A  1692    ;  437	void sendSomething(void) {
                           A  1693    ;  438		if(!ser_tx_size && !ser_tx_cooldown
                           A  1694    .line 438
0003C2 A9000024            A  1695    	CPX	_ser_tx_size,#-0
0003C6 EB 47               A  1696    	JR	NE,_16_L_99
0003C8 A9000025            A  1697    	CPX	_ser_tx_cooldown,#-0
0003CC EB 41               A  1698    	JR	NE,_16_L_99
                           A  1699    ;  439			if(sendBarrelReply) { //If we n
                           A  1700    .line 439
0003CE A9000040            A  1701    	CPX	_sendBarrelReply,#-0
0003D2 6B 09               A  1702    	JR	Z,_16_L_86
                           A  1703    ;  440				sendBarrelReply = 0; //Clea
                           A  1704    .line 440
0003D4 E9000040            A  1705    	LDX	_sendBarrelReply,#-0
                           A  1706    ;  441				BarrelReply(); //Send a Bar
                           A  1707    .line 441
0003D8 D6 0354             A  1708    	CALL	_BarrelReply
                           A  1709    ;  442				return;
                           A  1710    .line 442
0003DB 8B 32               A  1711    	JR	_16_L_99
                           A  1712    ;  443			}
0003DD                     A  1713    _16_L_86:
                           A  1714    .line 443
                           A  1715    ;  444			if(sendArmSpecial) { //If we're
                           A  1716    .line 444
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  34


PC     Object              I  Line    Source main.src
0003DD A9000042            A  1717    	CPX	_sendArmSpecial,#-0
0003E1 6B 09               A  1718    	JR	Z,_16_L_97
                           A  1719    ;  445				sendArmSpecial = 0; //Clear
                           A  1720    .line 445
0003E3 E9000042            A  1721    	LDX	_sendArmSpecial,#-0
                           A  1722    ;  446				ArmSpecial(); //Send an Arm
                           A  1723    .line 446
0003E7 D6 039A             A  1724    	CALL	_ArmSpecial
                           A  1725    ;  447				return;
                           A  1726    .line 447
0003EA 8B 23               A  1727    	JR	_16_L_99
                           A  1728    ;  448			}
0003EC                     A  1729    _16_L_97:
                           A  1730    .line 448
                           A  1731    ;  449			if(sendLoadSpecial) { //If the 
                           A  1732    .line 449
0003EC A9000041            A  1733    	CPX	_sendLoadSpecial,#-0
0003F0 6B 1D               A  1734    	JR	Z,_16_L_99
                           A  1735    ;  450				sendLoadSpecial = 0; //Clea
                           A  1736    .line 450
0003F2 E9000041            A  1737    	LDX	_sendLoadSpecial,#-0
                           A  1738    ;  451				if(RELOADMIDCLIP) { //If we
                           A  1739    ;  452					if(!weAreReloading && !
                           A  1740    .line 452
0003F6 A9000044            A  1741    	CPX	_weAreReloading,#-0
0003FA EB 13               A  1742    	JR	NE,_16_L_95
0003FC 840045              A  1743    	LDX	R0,_reloadCooldown
0003FF 841046              A  1744    	LDX	R1,_reloadCooldown+1
000402 4201                A  1745    	OR	R0,R1
000404 EB 09               A  1746    	JR	NE,_16_L_95
                           A  1747    ;  453						if(ir_loaded_tags !
                           A  1748    .line 453
000406 A90F0029            A  1749    	CPX	_ir_loaded_tags,#15
00040A 6B 03               A  1750    	JR	Z,_16_L_95
                           A  1751    ;  454							LoadSpecial(); 
                           A  1752    .line 454
00040C D6 036B             A  1753    	CALL	_LoadSpecial
                           A  1754    ;  455						}
                           A  1755    ;  456					}
                           A  1756    ;  457				} else { //If we can't relo
                           A  1757    ;  458					if(!weAreReloading && !
                           A  1758    ;  459						LoadSpecial(); //St
                           A  1759    ;  460					}
                           A  1760    ;  461				}
00040F                     A  1761    _16_L_95:
                           A  1762    .line 461
                           A  1763    ;  462				return;
                           A  1764    ;  463			}
                           A  1765    ;  464		}
                           A  1766    ;  465	}
00040F                     A  1767    _16_L_99:
                           A  1768    .line 465
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  35


PC     Object              I  Line    Source main.src
00040F D6 0000             A  1769    	CALL	__b_framereset
000412 AF                  A  1770    	RET	
                           A  1771    .endfunc "sendSomething",465,"_sendSomething"
                           A  1772    	SEGMENT ROM_DATA
                           A  1773    ;	Jump Table for Switch Statement at line 471
000000                     A  1774    L__72:
000000 000B                A  1775    	DW	11
000002 0000                A  1776    	DW	0
000004 042A                A  1777    	DW	_17_L_100
000006 001E                A  1778    	DW	30
000008 042F                A  1779    	DW	_17_L_101
00000A 001F                A  1780    	DW	31
00000C 042F                A  1781    	DW	_17_L_102
00000E 0020                A  1782    	DW	32
000010 042F                A  1783    	DW	_17_L_103
000012 0040                A  1784    	DW	64
000014 0434                A  1785    	DW	_17_L_109
000016 0041                A  1786    	DW	65
000018 0439                A  1787    	DW	_17_L_110
00001A 005F                A  1788    	DW	95
00001C 042F                A  1789    	DW	_17_L_104
00001E 0060                A  1790    	DW	96
000020 042F                A  1791    	DW	_17_L_105
000022 0080                A  1792    	DW	128
000024 042F                A  1793    	DW	_17_L_106
000026 00A0                A  1794    	DW	160
000028 042F                A  1795    	DW	_17_L_107
00002A 00C0                A  1796    	DW	192
00002C 042F                A  1797    	DW	_17_L_108
00002E 043C                A  1798    	DW	_17_L_112
                           A  1799    
                           A  1800    
                           A  1801    ;**************************** _receiveSomething
                           A  1802    ;Name                         Addr/Register   S
                           A  1803    ;_rxedBarrelAck                      IMPORT  --
                           A  1804    ;_rxedBarrelSeen                     IMPORT  --
                           A  1805    ;_rxedResetBarrel                    IMPORT  --
                           A  1806    ;_rxedRollCall                       IMPORT  --
                           A  1807    ;_captureBuffer                      STATIC    
                           A  1808    
                           A  1809    
                           A  1810    ; Aggregate Stack Size: 0 (words)
                           A  1811    
                           A  1812    
                           A  1813    	.FRAME _n_receiveSomething,?_n_receiveSomet
                           A  1814    	.FCALL _n_rxedRollCall
                           A  1815    	.FCALL _n_rxedResetBarrel
                           A  1816    	.FCALL _n_rxedBarrelSeen
                           A  1817    	.FCALL _n_rxedBarrelAck
                           A  1818    	.FRAME _f_receiveSomething,?_f_receiveSomet
                           A  1819    	.FCALL _f_rxedRollCall
                           A  1820    	.FCALL _f_rxedResetBarrel
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  36


PC     Object              I  Line    Source main.src
                           A  1821    	.FCALL _f_rxedBarrelSeen
                           A  1822    	.FCALL _f_rxedBarrelAck
                           A  1823    	SEGMENT main_TEXT
000413                     A  1824    _receiveSomething:
                           A  1825    .define "_receiveSomething"
                           A  1826    .value _receiveSomething
                           A  1827    .class 2
                           A  1828    .type 65
                           A  1829    .type 0
                           A  1830    .endef
                           A  1831    .begfunc "receiveSomething",467,"_receiveSometh
000413 D6 0000             A  1832    	CALL	__b_frameset00
                           A  1833    ;  466	
                           A  1834    ;  467	void receiveSomething(void) {
                           A  1835    ;  468		if(captureBuffer.size & 0x80) { //T
                           A  1836    .line 468
000416 79800011            A  1837    	TMX	_captureBuffer+17,#128
00041A 6B 24               A  1838    	JR	Z,_17_L_114
                           A  1839    ;  469			
                           A  1840    ;  470			//Figure out what type it is an
                           A  1841    ;  471			switch(captureBuffer.buffer[0])
                           A  1842    .line 471
00041C 841001              A  1843    	LDX	R1,_captureBuffer+1
00041F B0E0                A  1844    	CLR	R0
000421 2C 00               A  1845    	LD	R2,#high(L__72)
000423 3C 00               A  1846    	LD	R3,#low(L__72)
000425 D6 0000             A  1847    	CALL	__b_ucase
000428 C4E0                A  1848    	JP	@RR0
                           A  1849    ;  472				case 0x00:
00042A                     A  1850    _17_L_100:
                           A  1851    .line 472
                           A  1852    ;  473					//ROLL-CALL
                           A  1853    ;  474					rxedRollCall();
                           A  1854    .line 474
00042A D6 0311             A  1855    	CALL	_rxedRollCall
                           A  1856    ;  475					break;
                           A  1857    .line 475
00042D 8B 0D               A  1858    	JR	_17_L_112
                           A  1859    ;  476				case 0x1E: //NO-ACCY
00042F                     A  1860    _17_L_101:
                           A  1861    .line 476
                           A  1862    ;  477				case 0x1F: //RESET-ALL
00042F                     A  1863    _17_L_102:
                           A  1864    .line 477
                           A  1865    ;  478				case 0x20: //ROLL-REPLY		00042F                     A  1866    _17_L_103:
                           A  1867    .line 478
                           A  1868    ;  479				case 0x5F: //RESET-BARREL
00042F                     A  1869    _17_L_104:
                           A  1870    .line 479
                           A  1871    ;  480				case 0x60: //POWERUP-REPLY
00042F                     A  1872    _17_L_105:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  37


PC     Object              I  Line    Source main.src
                           A  1873    .line 480
                           A  1874    ;  481				case 0x80: //RADAR-REPLY
00042F                     A  1875    _17_L_106:
                           A  1876    .line 481
                           A  1877    ;  482				case 0xA0: //MASTER-REPLY
00042F                     A  1878    _17_L_107:
                           A  1879    .line 482
                           A  1880    ;  483				case 0xC0: //RHOST-REPLY
00042F                     A  1881    _17_L_108:
                           A  1882    .line 483
                           A  1883    ;  484					//Any of these results 
                           A  1884    ;  485					rxedResetBarrel();
                           A  1885    .line 485
00042F D6 02E6             A  1886    	CALL	_rxedResetBarrel
                           A  1887    ;  486					break;
                           A  1888    .line 486
000432 8B 08               A  1889    	JR	_17_L_112
                           A  1890    ;  487				case 0x40:
000434                     A  1891    _17_L_109:
                           A  1892    .line 487
                           A  1893    ;  488					//BARREL-SEEN
                           A  1894    ;  489					rxedBarrelSeen();
                           A  1895    .line 489
000434 D6 031C             A  1896    	CALL	_rxedBarrelSeen
                           A  1897    ;  490					break;
                           A  1898    .line 490
000437 8B 03               A  1899    	JR	_17_L_112
                           A  1900    ;  491				case 0x41:
000439                     A  1901    _17_L_110:
                           A  1902    .line 491
                           A  1903    ;  492					//BARREL-ACK
                           A  1904    ;  493					rxedBarrelAck();
                           A  1905    .line 493
000439 D6 032A             A  1906    	CALL	_rxedBarrelAck
                           A  1907    ;  494					break;
                           A  1908    ;  495				default:
                           A  1909    ;  496					//Nothing we know how t
                           A  1910    ;  497					break;
                           A  1911    ;  498			}
00043C                     A  1912    _17_L_112:
                           A  1913    .line 498
                           A  1914    ;  499			captureBuffer.size = 0;
                           A  1915    .line 499
00043C E9000011            A  1916    	LDX	_captureBuffer+17,#-0
                           A  1917    ;  500		}
                           A  1918    ;  501	}
000440                     A  1919    _17_L_114:
                           A  1920    .line 501
000440 D6 0000             A  1921    	CALL	__b_framereset
000443 AF                  A  1922    	RET	
                           A  1923    .endfunc "receiveSomething",501,"_receiveSometh
                           A  1924    	SEGMENT ROM_DATA
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  38


PC     Object              I  Line    Source main.src
                           A  1925    
                           A  1926    
                           A  1927    ;**************************** _main ***********
                           A  1928    ;Name                         Addr/Register   S
                           A  1929    ;_sendLoadSpecial                    STATIC    
                           A  1930    ;_weAreRegistered                    STATIC    
                           A  1931    ;_btn_pressed                        STATIC    
                           A  1932    ;_sendSomething                      IMPORT  --
                           A  1933    ;_receiveSomething                   IMPORT  --
                           A  1934    ;_captureBuffer                      STATIC    
                           A  1935    ;_init_cpu                           IMPORT  --
                           A  1936    
                           A  1937    
                           A  1938    ; Aggregate Stack Size: 0 (words)
                           A  1939    
                           A  1940    
                           A  1941    	.FRAME _n_main,?_n_main,RDATA
                           A  1942    	.FCALL _n_init_cpu
                           A  1943    	.FCALL _n_receiveSomething
                           A  1944    	.FCALL _n_sendSomething
                           A  1945    	.FRAME _f_main,?_f_main,EDATA
                           A  1946    	.FCALL _f_init_cpu
                           A  1947    	.FCALL _f_receiveSomething
                           A  1948    	.FCALL _f_sendSomething
                           A  1949    	SEGMENT main_TEXT
000444                     A  1950    _main:
                           A  1951    .define "_main"
                           A  1952    .value _main
                           A  1953    .class 2
                           A  1954    .type 65
                           A  1955    .type 0
                           A  1956    .endef
                           A  1957    .begfunc "main",503,"_main"
000444 D6 0000             A  1958    	CALL	__b_frameset00
                           A  1959    ;  502	
                           A  1960    ;  503	void main(void) {
                           A  1961    ;  504		unsigned char i;
                           A  1962    ;  505		init_cpu();
                           A  1963    .line 505
000447 D6 01B6             A  1964    	CALL	_init_cpu
                           A  1965    ;  506		
                           A  1966    ;  507		//Initialize the checksum.
                           A  1967    ;  508		captureBuffer.checksum = 0xFF;
                           A  1968    .line 508
00044A E9FF0012            A  1969    	LDX	_captureBuffer+18,#255
                           A  1970    ;  509		
                           A  1971    ;  510		while(1) {
00044E                     A  1972    _18_L_117:
                           A  1973    .line 510
                           A  1974    ;  511			//Echo everything back to the t
                           A  1975    ;  512			//Should put it in factory test
                           A  1976    ;  513			/*if((ser_rx_size & 0x80) && !s
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  39


PC     Object              I  Line    Source main.src
                           A  1977    ;  514	            //Block received.
                           A  1978    ;  515	            //Echo it back for testing.
                           A  1979    ;  516	            unsigned char rx_size = (se
                           A  1980    ;  517				int i;
                           A  1981    ;  518				
                           A  1982    ;  519	            for(i = 0; i < rx_size;i++)
                           A  1983    ;  520	                ser_tx_buffer[i] = ser_
                           A  1984    ;  521	            }
                           A  1985    ;  522				
                           A  1986    ;  523	            ser_tx_size = rx_size;
                           A  1987    ;  524	            ser_rx_size = 0;
                           A  1988    ;  525				IRQ0 |= 0x08;
                           A  1989    ;  526	        } else {
                           A  1990    ;  527				if(!(U0STAT0 ^ 0x06)) {
                           A  1991    ;  528					IRQ0 |= 0x08;
                           A  1992    ;  529				}
                           A  1993    ;  530			}*/
                           A  1994    ;  531			
                           A  1995    ;  532			receiveSomething(); //Go check 
                           A  1996    .line 532
00044E D6 0413             A  1997    	CALL	_receiveSomething
                           A  1998    ;  533			sendSomething(); //Go check if 
                           A  1999    .line 533
000451 D6 03BF             A  2000    	CALL	_sendSomething
                           A  2001    ;  534			if(btn_pressed) { //If the butt
                           A  2002    .line 534
000454 A900002C            A  2003    	CPX	_btn_pressed,#-0
000458 6B F4               A  2004    	JR	Z,_18_L_117
                           A  2005    ;  535				btn_pressed = 0; //Clear th
                           A  2006    .line 535
00045A E900002C            A  2007    	LDX	_btn_pressed,#-0
                           A  2008    ;  536				if(weAreRegistered) { //If 
                           A  2009    .line 536
00045E A9000043            A  2010    	CPX	_weAreRegistered,#-0
000462 6B EA               A  2011    	JR	Z,_18_L_117
                           A  2012    ;  537					sendLoadSpecial = 1; //
                           A  2013    .line 537
000464 E9010041            A  2014    	LDX	_sendLoadSpecial,#1
                           A  2015    ;  538				}
                           A  2016    ;  539			}
                           A  2017    ;  540		}
                           A  2018    .line 540
000468 8B E4               A  2019    	JR	_18_L_117
                           A  2020    ;  541	}
                           A  2021    .line 541
00046A D6 0000             A  2022    	CALL	__b_framereset
00046D AF                  A  2023    	RET	
                           A  2024    .endfunc "main",541,"_main"
00000C 008E                A  2025    	VECTOR	TIMER0=_isr_timer0
000010 0047                A  2026    	VECTOR	UART0_TX=_isr_uarttx
00000E 0000                A  2027    	VECTOR	UART0_RX=_isr_uartrx
                           A  2028    	XREF __b_ucase:ROM
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 19-Dec-13     03:20:02     page:  40


PC     Object              I  Line    Source main.src
                           A  2029    	XREF __b_framereset:ROM
                           A  2030    	XREF __b_iframereset:ROM
                           A  2031    	XREF __b_frameset00:ROM
                           A  2032    	XREF __b_iframeset00:ROM
                           A  2033    	XDEF _main
                           A  2034    	XDEF _receiveSomething
                           A  2035    	XDEF _sendSomething
                           A  2036    	XDEF _ArmSpecial
                           A  2037    	XDEF _LoadSpecial
                           A  2038    	XDEF _BarrelReply
                           A  2039    	XDEF _rxedBarrelAck
                           A  2040    	XDEF _rxedBarrelSeen
                           A  2041    	XDEF _rxedRollCall
                           A  2042    	XDEF _rxedResetBarrel
                           A  2043    	XDEF _loadAmmo
                           A  2044    	XDEF _queueChecksum
                           A  2045    	XDEF _queueByte
                           A  2046    	XDEF _sendQueue
                           A  2047    	XDEF _init_cpu
                           A  2048    	XDEF _isr_timer0
                           A  2049    	XDEF _isr_uarttx
                           A  2050    	XDEF _isr_uartrx
                           A  2051    	XDEF _reloadCooldown
                           A  2052    	XDEF _weAreReloading
                           A  2053    	XDEF _weAreRegistered
                           A  2054    	XDEF _sendArmSpecial
                           A  2055    	XDEF _sendLoadSpecial
                           A  2056    	XDEF _sendBarrelReply
                           A  2057    	XDEF _temp_tx_size
                           A  2058    	XDEF _temp_tx_buffer
                           A  2059    	XDEF _lastIO
                           A  2060    	XDEF _tempIO
                           A  2061    	XDEF _btn_pressed
                           A  2062    	XDEF _btn_prelim
                           A  2063    	XDEF _btn_counter
                           A  2064    	XDEF _ir_loaded_tags
                           A  2065    	XDEF _ir_rx_halfbits
                           A  2066    	XDEF _ir_rx_counter
                           A  2067    	XDEF _ser_tx_currentbyte
                           A  2068    	XDEF _ser_tx_cooldown
                           A  2069    	XDEF _ser_tx_size
                           A  2070    	XDEF _ser_tx_buffer
                           A  2071    	XDEF _ser_rx_eob_counter
                           A  2072    	XDEF _captureBuffer
                           A  2073    	END


Errors: 0
Warnings: 0
Lines Assembled: 2074
