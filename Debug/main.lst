Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -fastcall -const=RAM -mo
                           A     3    ; -nooptlink -regvar -reduceopt -debug -norevaa
                           A     4    ; -alias 
                           A     5    	DEFINE main_TEXT,SPACE=ROM
                           A     6    	FILE	"..\..\LTX-RA~1\MAIN.C"
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_BSS
000000                     A     9    _captureBuffer:
000000                     A    10    	DS	19
                           A    11    .define "captureBuffer"
                           A    12    .alias "_captureBuffer"
                           A    13    .class 83
                           A    14    .value _captureBuffer
                           A    15    .tag "ser_rx"
                           A    16    .type 8
                           A    17    .type 0
                           A    18    .endef
                           A    19    	SEGMENT main_TEXT
                           A    20    .begrec "ser_rx",19
                           A    21    .define "hasrxed"
                           A    22    .value 0
                           A    23    .class 8
                           A    24    .type 12
                           A    25    .type 0
                           A    26    .endef
                           A    27    .define "buffer"
                           A    28    .value 1
                           A    29    .class 8
                           A    30    .dim 16
                           A    31    .type 108
                           A    32    .type 0
                           A    33    .endef
                           A    34    .define "size"
                           A    35    .value 17
                           A    36    .class 8
                           A    37    .type 12
                           A    38    .type 0
                           A    39    .endef
                           A    40    .define "checksum"
                           A    41    .value 18
                           A    42    .class 8
                           A    43    .type 12
                           A    44    .type 0
                           A    45    .endef
                           A    46    .endrec "ser_rx"
                           A    47    	SEGMENT FAR_BSS
000013                     A    48    _ser_rx_eob_counter:
000013                     A    49    	DS	1
                           A    50    .define "ser_rx_eob_counter"
                           A    51    .alias "_ser_rx_eob_counter"
                           A    52    .class 83
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .value _ser_rx_eob_counter
                           A    54    .type 12
                           A    55    .type 0
                           A    56    .endef
000014                     A    57    _ser_tx_buffer:
000014                     A    58    	DS	16
                           A    59    .define "ser_tx_buffer"
                           A    60    .alias "_ser_tx_buffer"
                           A    61    .class 83
                           A    62    .value _ser_tx_buffer
                           A    63    .dim 16
                           A    64    .type 108
                           A    65    .type 0
                           A    66    .endef
000024                     A    67    _ser_tx_size:
000024                     A    68    	DS	1
                           A    69    .define "ser_tx_size"
                           A    70    .alias "_ser_tx_size"
                           A    71    .class 83
                           A    72    .value _ser_tx_size
                           A    73    .type 12
                           A    74    .type 0
                           A    75    .endef
000025                     A    76    _ser_tx_cooldown:
000025                     A    77    	DS	1
                           A    78    .define "ser_tx_cooldown"
                           A    79    .alias "_ser_tx_cooldown"
                           A    80    .class 83
                           A    81    .value _ser_tx_cooldown
                           A    82    .type 12
                           A    83    .type 0
                           A    84    .endef
000026                     A    85    _ser_tx_currentbyte:
000026                     A    86    	DS	1
                           A    87    .define "ser_tx_currentbyte"
                           A    88    .alias "_ser_tx_currentbyte"
                           A    89    .class 83
                           A    90    .value _ser_tx_currentbyte
                           A    91    .type 12
                           A    92    .type 0
                           A    93    .endef
000027                     A    94    _ir_rx_counter:
000027                     A    95    	DS	1
                           A    96    .define "ir_rx_counter"
                           A    97    .alias "_ir_rx_counter"
                           A    98    .class 83
                           A    99    .value _ir_rx_counter
                           A   100    .type 12
                           A   101    .type 0
                           A   102    .endef
000028                     A   103    _ir_rx_bits:
000028                     A   104    	DS	1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .define "ir_rx_bits"
                           A   106    .alias "_ir_rx_bits"
                           A   107    .class 83
                           A   108    .value _ir_rx_bits
                           A   109    .type 12
                           A   110    .type 0
                           A   111    .endef
000029                     A   112    _ir_loaded_tags:
000029                     A   113    	DS	1
                           A   114    .define "ir_loaded_tags"
                           A   115    .alias "_ir_loaded_tags"
                           A   116    .class 83
                           A   117    .value _ir_loaded_tags
                           A   118    .type 12
                           A   119    .type 0
                           A   120    .endef
00002A                     A   121    _btn_counter:
00002A                     A   122    	DS	1
                           A   123    .define "btn_counter"
                           A   124    .alias "_btn_counter"
                           A   125    .class 83
                           A   126    .value _btn_counter
                           A   127    .type 12
                           A   128    .type 0
                           A   129    .endef
00002B                     A   130    _btn_prelim:
00002B                     A   131    	DS	1
                           A   132    .define "btn_prelim"
                           A   133    .alias "_btn_prelim"
                           A   134    .class 83
                           A   135    .value _btn_prelim
                           A   136    .type 12
                           A   137    .type 0
                           A   138    .endef
00002C                     A   139    _btn_pressed:
00002C                     A   140    	DS	1
                           A   141    .define "btn_pressed"
                           A   142    .alias "_btn_pressed"
                           A   143    .class 83
                           A   144    .value _btn_pressed
                           A   145    .type 12
                           A   146    .type 0
                           A   147    .endef
00002D                     A   148    _tempIO:
00002D                     A   149    	DS	1
                           A   150    .define "tempIO"
                           A   151    .alias "_tempIO"
                           A   152    .class 83
                           A   153    .value _tempIO
                           A   154    .type 12
                           A   155    .type 0
                           A   156    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   4


PC     Object              I  Line    Source main.src
00002E                     A   157    _lastIO:
00002E                     A   158    	DS	1
                           A   159    .define "lastIO"
                           A   160    .alias "_lastIO"
                           A   161    .class 83
                           A   162    .value _lastIO
                           A   163    .type 12
                           A   164    .type 0
                           A   165    .endef
00002F                     A   166    _temp_tx_buffer:
00002F                     A   167    	DS	16
                           A   168    .define "temp_tx_buffer"
                           A   169    .alias "_temp_tx_buffer"
                           A   170    .class 83
                           A   171    .value _temp_tx_buffer
                           A   172    .dim 16
                           A   173    .type 108
                           A   174    .type 0
                           A   175    .endef
00003F                     A   176    _temp_tx_size:
00003F                     A   177    	DS	1
                           A   178    .define "temp_tx_size"
                           A   179    .alias "_temp_tx_size"
                           A   180    .class 83
                           A   181    .value _temp_tx_size
                           A   182    .type 12
                           A   183    .type 0
                           A   184    .endef
000040                     A   185    _sendBarrelReply:
000040                     A   186    	DS	1
                           A   187    .define "sendBarrelReply"
                           A   188    .alias "_sendBarrelReply"
                           A   189    .class 83
                           A   190    .value _sendBarrelReply
                           A   191    .type 12
                           A   192    .type 0
                           A   193    .endef
000041                     A   194    _sendLoadSpecial:
000041                     A   195    	DS	1
                           A   196    .define "sendLoadSpecial"
                           A   197    .alias "_sendLoadSpecial"
                           A   198    .class 83
                           A   199    .value _sendLoadSpecial
                           A   200    .type 12
                           A   201    .type 0
                           A   202    .endef
000042                     A   203    _sendArmSpecial:
000042                     A   204    	DS	1
                           A   205    .define "sendArmSpecial"
                           A   206    .alias "_sendArmSpecial"
                           A   207    .class 83
                           A   208    .value _sendArmSpecial
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   5


PC     Object              I  Line    Source main.src
                           A   209    .type 12
                           A   210    .type 0
                           A   211    .endef
000043                     A   212    _weAreRegistered:
000043                     A   213    	DS	1
                           A   214    .define "weAreRegistered"
                           A   215    .alias "_weAreRegistered"
                           A   216    .class 83
                           A   217    .value _weAreRegistered
                           A   218    .type 12
                           A   219    .type 0
                           A   220    .endef
000044                     A   221    _weAreReloading:
000044                     A   222    	DS	1
                           A   223    .define "weAreReloading"
                           A   224    .alias "_weAreReloading"
                           A   225    .class 83
                           A   226    .value _weAreReloading
                           A   227    .type 12
                           A   228    .type 0
                           A   229    .endef
000045                     A   230    _reloadCooldown:
000045                     A   231    	DS	2*1
                           A   232    .define "reloadCooldown"
                           A   233    .alias "_reloadCooldown"
                           A   234    .class 83
                           A   235    .value _reloadCooldown
                           A   236    .type 13
                           A   237    .type 0
                           A   238    .endef
                           A   239    	SEGMENT ROM_DATA
                           A   240    
                           A   241    
                           A   242    ;**************************** _isr_uartrx *****
                           A   243    ;Name                         Addr/Register   S
                           A   244    ;_ser_rx_eob_counter                 STATIC    
                           A   245    ;_captureBuffer                      STATIC    
                           A   246    ;temp                                    R0    
                           A   247    
                           A   248    
                           A   249    ; Aggregate Stack Size: 0 (words)
                           A   250    
                           A   251    
                           A   252    	.FRAME _n_isr_uartrx,?_n_isr_uartrx,RDATA
                           A   253    	.FRAME _f_isr_uartrx,?_f_isr_uartrx,EDATA
                           A   254    	SEGMENT main_TEXT
000000                     A   255    _isr_uartrx:
                           A   256    .define "_isr_uartrx"
                           A   257    .value _isr_uartrx
                           A   258    .class 2
                           A   259    .type 65
                           A   260    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   6


PC     Object              I  Line    Source main.src
                           A   261    .endef
                           A   262    .begfunc "isr_uartrx",65,"_isr_uartrx"
                           A   263    ;    1	#include <ez8.h>
                           A   264    ;    2	
                           A   265    ;    3	#define WEAPONTYPE 1		/* 	1: Mach
                           A   266    ;    4									2: Snip
                           A   267    ;    5								*/
                           A   268    ;    6	
                           A   269    ;    7	#if WEAPONTYPE==1
                           A   270    ;    8		//Machinegun
                           A   271    ;    9		#define DOUBLETAPS 0
                           A   272    ;   10		#define AMMO 15
                           A   273    ;   11		#define BURSTSIZE 15
                           A   274    ;   12		#define REFIRERATE 16
                           A   275    ;   13		#define LOADSFX 14
                           A   276    ;   14		#define FIRESFX 11
                           A   277    ;   15		#define RELOADMIDCLIP 1
                           A   278    ;   16	#endif
                           A   279    ;   17	
                           A   280    ;   18	#if WEAPONTYPE==2
                           A   281    ;   19		//Sniper
                           A   282    ;   20		#define DOUBLETAPS 1
                           A   283    ;   21		#define AMMO 15
                           A   284    ;   22		#define BURSTSIZE 5
                           A   285    ;   23		#define REFIRERATE 16
                           A   286    ;   24		#define LOADSFX 14
                           A   287    ;   25		#define FIRESFX 13
                           A   288    ;   26		#define RELOADMIDCLIP 0
                           A   289    ;   27	#endif
                           A   290    ;   28	
                           A   291    ;   29	struct ser_rx {
                           A   292    ;   30		volatile unsigned char hasrxed;
                           A   293    ;   31		volatile unsigned char buffer[16];
                           A   294    ;   32		volatile unsigned char size;
                           A   295    ;   33		volatile unsigned char checksum;
                           A   296    ;   34	} captureBuffer;
                           A   297    ;   35	
                           A   298    ;   36	volatile unsigned char ser_rx_eob_count
                           A   299    ;   37	
                           A   300    ;   38	volatile unsigned char ser_tx_buffer[16
                           A   301    ;   39	volatile unsigned char ser_tx_size;
                           A   302    ;   40	volatile unsigned char ser_tx_cooldown;
                           A   303    ;   41	volatile unsigned char ser_tx_currentby
                           A   304    ;   42	
                           A   305    ;   43	volatile unsigned char ir_rx_counter;
                           A   306    ;   44	volatile unsigned char ir_rx_bits;
                           A   307    ;   45	volatile unsigned char ir_loaded_tags;
                           A   308    ;   46	
                           A   309    ;   47	volatile unsigned char btn_counter;
                           A   310    ;   48	volatile unsigned char btn_prelim;
                           A   311    ;   49	volatile unsigned char btn_pressed;
                           A   312    ;   50	
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   7


PC     Object              I  Line    Source main.src
                           A   313    ;   51	volatile unsigned char tempIO;
                           A   314    ;   52	volatile unsigned char lastIO;
                           A   315    ;   53	
                           A   316    ;   54	volatile unsigned char temp_tx_buffer[1
                           A   317    ;   55	volatile unsigned char temp_tx_size;
                           A   318    ;   56	
                           A   319    ;   57	volatile unsigned char sendBarrelReply;
                           A   320    ;   58	volatile unsigned char sendLoadSpecial;
                           A   321    ;   59	volatile unsigned char sendArmSpecial;
                           A   322    ;   60	volatile unsigned char weAreRegistered;
                           A   323    ;   61	volatile unsigned char weAreReloading;
                           A   324    ;   62	
                           A   325    ;   63	volatile unsigned int reloadCooldown;
                           A   326    ;   64	
                           A   327    ;   65	void interrupt isr_uartrx(void) {
                           A   328    .define "temp"
                           A   329    .class 4
                           A   330    .reg 1
                           A   331    .type 12
                           A   332    .type 0
                           A   333    .endef
000000 C8FFD0              A   334    	PUSHX	4093
000003 D6 0000             A   335    	CALL	__b_iframeset00
                           A   336    ;   66		unsigned char temp;
                           A   337    ;   67		
                           A   338    ;   68		temp = U0RXD;
                           A   339    .line 68
000006 840F40              A   340    	LDX	R0,3904
                           A   341    ;   69		//Byte received
                           A   342    ;   70		if((U0STAT0 & 0x78) == 0x78) {
                           A   343    .line 70
000009 841F41              A   344    	LDX	R1,3905
00000C 56E178              A   345    	AND	R1,#120
00000F E4E1E2              A   346    	LD	R2,R1
000012 A6E178              A   347    	CP	R1,#120
000015 6B 2C               A   348    	JR	Z,_1_L_5
                           A   349    ;   71			//Error. Do nothing.
                           A   350    ;   72			return;
                           A   351    .line 72
                           A   352    ;   73		} else {
                           A   353    .line 73
                           A   354    ;   74			//If the interrupt was because 
                           A   355    ;   75			if(!(captureBuffer.size & 0x80)
                           A   356    .line 75
000017 79800011            A   357    	TMX	_captureBuffer+17,#128
00001B EB 22               A   358    	JR	NE,_1_L_4
                           A   359    ;   76				//If we're not waiting for 
                           A   360    ;   77				captureBuffer.buffer[captur
                           A   361    .line 77
00001D 841011              A   362    	LDX	R1,_captureBuffer+17
000020 E4E1E2              A   363    	LD	R2,R1
000023 2C 00               A   364    	LD	R2,#high(_captureBuffer+1)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   8


PC     Object              I  Line    Source main.src
000025 3C 01               A   365    	LD	R3,#low(_captureBuffer+1)
000027 0231                A   366    	ADD	R3,R1
000029 16E200              A   367    	ADC	R2,#0
00002C 96E0E2              A   368    	LDX	@RR2,R0
00002F 09010011            A   369    	ADDX	_captureBuffer+17,#1
                           A   370    ;   78				captureBuffer.checksum -= t
                           A   371    .line 78
000033 28EE0012            A   372    	SUBX	_captureBuffer+18,R0
                           A   373    ;   79				//captureBuffer[captureBuff
                           A   374    ;   80				ser_rx_eob_counter = 0;
                           A   375    .line 80
000037 E9000013            A   376    	LDX	_ser_rx_eob_counter,#-0
                           A   377    ;   81				captureBuffer.hasrxed = 1;
                           A   378    .line 81
00003B E9010000            A   379    	LDX	_captureBuffer,#1
                           A   380    ;   82			}
                           A   381    ;   83		}
00003F                     A   382    _1_L_4:
                           A   383    .line 83
                           A   384    ;   84		//Clear the interrupt bit
                           A   385    ;   85		IRQ0 &= 0xEF;
                           A   386    .line 85
00003F 59EF0FC0            A   387    	ANDX	4032,#239
                           A   388    ;   86	}
000043                     A   389    _1_L_5:
                           A   390    .line 86
000043 D6 0000             A   391    	CALL	__b_iframereset
000046 BF                  A   392    	IRET	
                           A   393    .endfunc "isr_uartrx",86,"_isr_uartrx"
                           A   394    	SEGMENT ROM_DATA
                           A   395    
                           A   396    
                           A   397    ;**************************** _isr_uarttx *****
                           A   398    ;Name                         Addr/Register   S
                           A   399    ;_ser_tx_buffer                      STATIC    
                           A   400    ;_ser_tx_currentbyte                 STATIC    
                           A   401    ;_ser_tx_cooldown                    STATIC    
                           A   402    ;_ser_tx_size                        STATIC    
                           A   403    
                           A   404    
                           A   405    ; Aggregate Stack Size: 0 (words)
                           A   406    
                           A   407    
                           A   408    	.FRAME _n_isr_uarttx,?_n_isr_uarttx,RDATA
                           A   409    	.FRAME _f_isr_uarttx,?_f_isr_uarttx,EDATA
                           A   410    	SEGMENT main_TEXT
000047                     A   411    _isr_uarttx:
                           A   412    .define "_isr_uarttx"
                           A   413    .value _isr_uarttx
                           A   414    .class 2
                           A   415    .type 65
                           A   416    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:   9


PC     Object              I  Line    Source main.src
                           A   417    .endef
                           A   418    .begfunc "isr_uarttx",88,"_isr_uarttx"
000047 C8FFD0              A   419    	PUSHX	4093
00004A D6 0000             A   420    	CALL	__b_iframeset00
                           A   421    ;   87	
                           A   422    ;   88	void interrupt isr_uarttx(void) {
                           A   423    ;   89		//Ready to transmit a byte
                           A   424    ;   90		if(ser_tx_size && !ser_tx_cooldown)
                           A   425    .line 90
00004D A9000024            A   426    	CPX	_ser_tx_size,#-0
000051 6B 33               A   427    	JR	Z,_2_L_11
000053 A9000025            A   428    	CPX	_ser_tx_cooldown,#-0
000057 EB 2D               A   429    	JR	NE,_2_L_11
                           A   430    ;   91	        //If there's something in the t
                           A   431    ;   92			if(ser_tx_currentbyte == ser_tx
                           A   432    .line 92
000059 A8 024026           A   433    	CPX	_ser_tx_currentbyte,_ser_tx_size
00005D EB 0E               A   434    	JR	NE,_2_L_9
                           A   435    ;   93				//That was the last byte th
                           A   436    ;   94				ser_tx_currentbyte = 0;
                           A   437    .line 94
00005F E9000026            A   438    	LDX	_ser_tx_currentbyte,#-0
                           A   439    ;   95				ser_tx_size = 0;
                           A   440    .line 95
000063 E9000024            A   441    	LDX	_ser_tx_size,#-0
                           A   442    ;   96				ser_tx_cooldown = 116; //Si
                           A   443    .line 96
000067 E9740025            A   444    	LDX	_ser_tx_cooldown,#116
                           A   445    ;   97										//,
                           A   446    ;   98										//,
                           A   447    ;   99										//T
                           A   448    ;  100										//T
                           A   449    ;  101			} else {
                           A   450    .line 101
00006B 8B 19               A   451    	JR	_2_L_11
00006D                     A   452    _2_L_9:
                           A   453    ;  102				//There's still bytes to se
                           A   454    ;  103				U0TXD = ser_tx_buffer[ser_t
                           A   455    .line 103
00006D 842026              A   456    	LDX	R2,_ser_tx_currentbyte
000070 0C 00               A   457    	LD	R0,#high(_ser_tx_buffer)
000072 1C 14               A   458    	LD	R1,#low(_ser_tx_buffer)
000074 0212                A   459    	ADD	R1,R2
000076 16E000              A   460    	ADC	R0,#0
000079 86E0E2              A   461    	LDX	R2,@RR0
00007C 942F40              A   462    	LDX	3904,R2
                           A   463    ;  104				ser_tx_currentbyte++;
                           A   464    .line 104
00007F 840026              A   465    	LDX	R0,_ser_tx_currentbyte
000082 09010026            A   466    	ADDX	_ser_tx_currentbyte,#1
                           A   467    ;  105			}
                           A   468    ;  106		}
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  10


PC     Object              I  Line    Source main.src
000086                     A   469    _2_L_11:
                           A   470    .line 106
                           A   471    ;  107		//Clear the interrupt bit.
                           A   472    ;  108		IRQ0 &= 0xF7;
                           A   473    .line 108
000086 59F70FC0            A   474    	ANDX	4032,#247
                           A   475    ;  109	}
                           A   476    .line 109
00008A D6 0000             A   477    	CALL	__b_iframereset
00008D BF                  A   478    	IRET	
                           A   479    .endfunc "isr_uarttx",109,"_isr_uarttx"
                           A   480    	SEGMENT ROM_DATA
                           A   481    
                           A   482    
                           A   483    ;**************************** _isr_timer0 *****
                           A   484    ;Name                         Addr/Register   S
                           A   485    ;_ir_loaded_tags                     STATIC    
                           A   486    ;_ir_rx_counter                      STATIC    
                           A   487    ;_ir_rx_bits                         STATIC    
                           A   488    ;_btn_pressed                        STATIC    
                           A   489    ;_btn_prelim                         STATIC    
                           A   490    ;_btn_counter                        STATIC    
                           A   491    ;_captureBuffer                      STATIC    
                           A   492    ;_reloadCooldown                     STATIC    
                           A   493    ;_ser_tx_cooldown                    STATIC    
                           A   494    ;_ser_rx_eob_counter                 STATIC    
                           A   495    ;_lastIO                             STATIC    
                           A   496    ;_tempIO                             STATIC    
                           A   497    
                           A   498    
                           A   499    ; Aggregate Stack Size: 0 (words)
                           A   500    
                           A   501    
                           A   502    	.FRAME _n_isr_timer0,?_n_isr_timer0,RDATA
                           A   503    	.FRAME _f_isr_timer0,?_f_isr_timer0,EDATA
                           A   504    	SEGMENT main_TEXT
00008E                     A   505    _isr_timer0:
                           A   506    .define "_isr_timer0"
                           A   507    .value _isr_timer0
                           A   508    .class 2
                           A   509    .type 65
                           A   510    .type 0
                           A   511    .endef
                           A   512    .begfunc "isr_timer0",111,"_isr_timer0"
00008E C8FFD0              A   513    	PUSHX	4093
000091 D6 0000             A   514    	CALL	__b_iframeset00
                           A   515    ;  110	
                           A   516    ;  111	void interrupt isr_timer0(void) {
                           A   517    ;  112		//4KHz interrupt.
                           A   518    ;  113		
                           A   519    ;  114		lastIO = tempIO;
                           A   520    .line 114
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  11


PC     Object              I  Line    Source main.src
000094 E8 02D02E           A   521    	LDX	_lastIO,_tempIO
                           A   522    ;  115		tempIO = PAIN;
                           A   523    .line 115
000098 E8FD202D            A   524    	LDX	_tempIO,4050
                           A   525    ;  116		
                           A   526    ;  117		//Various 1/8ms timers
                           A   527    ;  118		ser_rx_eob_counter += 1;
                           A   528    .line 118
00009C 09010013            A   529    	ADDX	_ser_rx_eob_counter,#1
                           A   530    ;  119		if(ser_tx_cooldown) {
                           A   531    .line 119
0000A0 A9000025            A   532    	CPX	_ser_tx_cooldown,#-0
0000A4 6B 04               A   533    	JR	Z,_3_L_15
                           A   534    ;  120			ser_tx_cooldown -= 1;
                           A   535    .line 120
0000A6 29010025            A   536    	SUBX	_ser_tx_cooldown,#1
                           A   537    ;  121		}
0000AA                     A   538    _3_L_15:
                           A   539    .line 121
                           A   540    ;  122		if(reloadCooldown) {
                           A   541    .line 122
0000AA 840045              A   542    	LDX	R0,_reloadCooldown
0000AD 841046              A   543    	LDX	R1,_reloadCooldown+1
0000B0 4201                A   544    	OR	R0,R1
0000B2 6B 08               A   545    	JR	Z,_3_L_21
                           A   546    ;  123			reloadCooldown -= 1;
                           A   547    .line 123
0000B4 29010046            A   548    	SUBX	_reloadCooldown+1,#1
0000B8 39000045            A   549    	SBCX	_reloadCooldown,#-0
                           A   550    ;  124		}
0000BC                     A   551    _3_L_21:
                           A   552    .line 124
                           A   553    ;  125		
                           A   554    ;  126		//Serial RX end-of-block stuff.
                           A   555    ;  127		//if((ser_rx_eob_counter == 30) && 
                           A   556    ;  128		if((ser_rx_eob_counter == 60) && ca
                           A   557    .line 128
0000BC A93C0013            A   558    	CPX	_ser_rx_eob_counter,#60
0000C0 EB 1E               A   559    	JR	NE,_3_L_29
0000C2 A9000000            A   560    	CPX	_captureBuffer,#-0
0000C6 6B 18               A   561    	JR	Z,_3_L_29
                           A   562    ;  129	        captureBuffer.hasrxed = 0;
                           A   563    .line 129
0000C8 E9000000            A   564    	LDX	_captureBuffer,#-0
                           A   565    ;  130	        if(!captureBuffer.checksum) {
                           A   566    .line 130
0000CC A9000012            A   567    	CPX	_captureBuffer+18,#-0
0000D0 EB 06               A   568    	JR	NE,_3_L_18
                           A   569    ;  131	            captureBuffer.size |= 0x80;
                           A   570    .line 131
0000D2 49800011            A   571    	ORX	_captureBuffer+17,#128
                           A   572    ;  132	        } else {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  12


PC     Object              I  Line    Source main.src
                           A   573    .line 132
0000D6 8B 04               A   574    	JR	_3_L_19
0000D8                     A   575    _3_L_18:
                           A   576    ;  133	            captureBuffer.size = 0;
                           A   577    .line 133
0000D8 E9000011            A   578    	LDX	_captureBuffer+17,#-0
                           A   579    ;  134	        }
0000DC                     A   580    _3_L_19:
                           A   581    .line 134
                           A   582    ;  135	        captureBuffer.checksum = 0xFF;
                           A   583    .line 135
0000DC E9FF0012            A   584    	LDX	_captureBuffer+18,#255
                           A   585    ;  136	    }
0000E0                     A   586    _3_L_29:
                           A   587    .line 136
                           A   588    ;  137		
                           A   589    ;  138		//Button stuff
                           A   590    ;  139		if((tempIO & 0x01) != (lastIO & 0x0
                           A   591    .line 139
0000E0 84002D              A   592    	LDX	R0,_tempIO
0000E3 56E001              A   593    	AND	R0,#1
0000E6 84102E              A   594    	LDX	R1,_lastIO
0000E9 56E101              A   595    	AND	R1,#1
0000EC A201                A   596    	CP	R0,R1
0000EE 6B 16               A   597    	JR	Z,_3_L_28
                           A   598    ;  140	        //Button state changed, clear t
                           A   599    ;  141	        btn_counter = 0;
                           A   600    .line 141
0000F0 E900002A            A   601    	LDX	_btn_counter,#-0
                           A   602    ;  142	        if(!(tempIO & 0x01)) {
                           A   603    .line 142
0000F4 7901002D            A   604    	TMX	_tempIO,#1
0000F8 EB 06               A   605    	JR	NE,_3_L_23
                           A   606    ;  143	            //Was just pressed
                           A   607    ;  144	            //Set a flag.
                           A   608    ;  145	            btn_prelim = 1;
                           A   609    .line 145
0000FA E901002B            A   610    	LDX	_btn_prelim,#1
                           A   611    ;  146	        } else {
                           A   612    .line 146
0000FE 8B 21               A   613    	JR	_3_L_54
000100                     A   614    _3_L_23:
                           A   615    ;  147				btn_prelim = 0;
                           A   616    .line 147
000100 E900002B            A   617    	LDX	_btn_prelim,#-0
                           A   618    ;  148			}
                           A   619    ;  149	    } else {
                           A   620    .line 149
000104 8B 1B               A   621    	JR	_3_L_54
000106                     A   622    _3_L_28:
                           A   623    ;  150	        btn_counter++;
                           A   624    .line 150
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  13


PC     Object              I  Line    Source main.src
000106 84002A              A   625    	LDX	R0,_btn_counter
000109 0901002A            A   626    	ADDX	_btn_counter,#1
                           A   627    ;  151	        if(btn_prelim && (btn_counter >
                           A   628    .line 151
00010D A900002B            A   629    	CPX	_btn_prelim,#-0
000111 6B 0E               A   630    	JR	Z,_3_L_54
000113 A903002A            A   631    	CPX	_btn_counter,#3
000117 3B 08               A   632    	JR	ULE,_3_L_54
                           A   633    ;  152	            btn_prelim = 0;
                           A   634    .line 152
000119 E900002B            A   635    	LDX	_btn_prelim,#-0
                           A   636    ;  153	            btn_pressed = 1;
                           A   637    .line 153
00011D E901002C            A   638    	LDX	_btn_pressed,#1
                           A   639    ;  154	        }
                           A   640    ;  155	    }
000121                     A   641    _3_L_54:
                           A   642    .line 155
                           A   643    ;  156		
                           A   644    ;  157		//IR stuff
                           A   645    ;  158		if((tempIO & 0x08) != (lastIO & 0x0
                           A   646    .line 158
000121 84002D              A   647    	LDX	R0,_tempIO
000124 56E008              A   648    	AND	R0,#8
000127 84102E              A   649    	LDX	R1,_lastIO
00012A 56E108              A   650    	AND	R1,#8
00012D A201                A   651    	CP	R0,R1
00012F 6B 4F               A   652    	JR	Z,_3_L_53
                           A   653    ;  159			//LAZERMOD's state has changed
                           A   654    ;  160			 if(ir_rx_bits == 1) {
                           A   655    .line 160
000131 A9010028            A   656    	CPX	_ir_rx_bits,#1
000135 EB 15               A   657    	JR	NE,_3_L_42
                           A   658    ;  161				//if((ir_rx_counter > 22) &
                           A   659    ;  162				 if((ir_rx_counter > 45) &&
                           A   660    .line 162
000137 A92D0027            A   661    	CPX	_ir_rx_counter,#45
00013B 3B 3D               A   662    	JR	ULE,_3_L_43
00013D A9330027            A   663    	CPX	_ir_rx_counter,#51
000141 FB 37               A   664    	JR	NC,_3_L_43
                           A   665    ;  163					//If it's between 5.75m
                           A   666    ;  164					ir_rx_bits++;
                           A   667    .line 164
000143 840028              A   668    	LDX	R0,_ir_rx_bits
000146 09010028            A   669    	ADDX	_ir_rx_bits,#1
                           A   670    ;  165				}
                           A   671    ;  166			 } else if(ir_rx_bits < 3) {
                           A   672    .line 166
00014A 8B 2E               A   673    	JR	_3_L_43
00014C                     A   674    _3_L_42:
00014C A9030028            A   675    	CPX	_ir_rx_bits,#3
000150 FB 15               A   676    	JR	NC,_3_L_40
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  14


PC     Object              I  Line    Source main.src
                           A   677    ;  167				//if((ir_rx_counter > 10) &
                           A   678    ;  168				 if((ir_rx_counter > 21) &&
                           A   679    .line 168
000152 A9150027            A   680    	CPX	_ir_rx_counter,#21
000156 3B 22               A   681    	JR	ULE,_3_L_43
000158 A91B0027            A   682    	CPX	_ir_rx_counter,#27
00015C FB 1C               A   683    	JR	NC,_3_L_43
                           A   684    ;  169					//If it's between 2.75m
                           A   685    ;  170					ir_rx_bits++;
                           A   686    .line 170
00015E 840028              A   687    	LDX	R0,_ir_rx_bits
000161 09010028            A   688    	ADDX	_ir_rx_bits,#1
                           A   689    ;  171				}
                           A   690    ;  172			} else {
                           A   691    .line 172
000165 8B 13               A   692    	JR	_3_L_43
000167                     A   693    _3_L_40:
                           A   694    ;  173				//if((ir_rx_counter > 2) &&
                           A   695    ;  174				if((ir_rx_counter > 5) && (
                           A   696    .line 174
000167 A9050027            A   697    	CPX	_ir_rx_counter,#5
00016B 3B 0D               A   698    	JR	ULE,_3_L_43
00016D A9130027            A   699    	CPX	_ir_rx_counter,#19
000171 FB 07               A   700    	JR	NC,_3_L_43
                           A   701    ;  175					//If it's between 0.75m
                           A   702    ;  176					ir_rx_bits++;
                           A   703    .line 176
000173 840028              A   704    	LDX	R0,_ir_rx_bits
000176 09010028            A   705    	ADDX	_ir_rx_bits,#1
                           A   706    ;  177				}
                           A   707    ;  178			}
00017A                     A   708    _3_L_43:
                           A   709    .line 178
                           A   710    ;  179			ir_rx_counter = 0;
                           A   711    .line 179
00017A E9000027            A   712    	LDX	_ir_rx_counter,#-0
                           A   713    ;  180		} else {
                           A   714    .line 180
00017E 8B 32               A   715    	JR	_3_L_55
000180                     A   716    _3_L_53:
                           A   717    ;  181			ir_rx_counter++;
                           A   718    .line 181
000180 840027              A   719    	LDX	R0,_ir_rx_counter
000183 09010027            A   720    	ADDX	_ir_rx_counter,#1
                           A   721    ;  182			//if(ir_rx_counter > 40) {
                           A   722    ;  183			if(ir_rx_counter > 64) {
                           A   723    .line 183
000187 A9400027            A   724    	CPX	_ir_rx_counter,#64
00018B 3B 25               A   725    	JR	ULE,_3_L_55
                           A   726    ;  184				//End of IR packet
                           A   727    ;  185				if(ir_rx_bits == 17) {
                           A   728    .line 185
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  15


PC     Object              I  Line    Source main.src
00018D A9110028            A   729    	CPX	_ir_rx_bits,#17
000191 EB 17               A   730    	JR	NE,_3_L_50
                           A   731    ;  186					//Tag of some sort.
                           A   732    ;  187					if(ir_loaded_tags) {
                           A   733    .line 187
000193 A9000029            A   734    	CPX	_ir_loaded_tags,#-0
000197 6B 07               A   735    	JR	Z,_3_L_48
                           A   736    ;  188						ir_loaded_tags--;
                           A   737    .line 188
000199 840029              A   738    	LDX	R0,_ir_loaded_tags
00019C 29010029            A   739    	SUBX	_ir_loaded_tags,#1
                           A   740    ;  189					}
0001A0                     A   741    _3_L_48:
                           A   742    .line 189
                           A   743    ;  190					if(!ir_loaded_tags) {
                           A   744    .line 190
0001A0 A9000029            A   745    	CPX	_ir_loaded_tags,#-0
0001A4 EB 04               A   746    	JR	NE,_3_L_50
                           A   747    ;  191						//Turn off the INHI
                           A   748    ;  192						PAOUT &= 0xFD;
                           A   749    .line 192
0001A6 59FD0FD3            A   750    	ANDX	4051,#253
                           A   751    ;  193					}
                           A   752    ;  194				}
0001AA                     A   753    _3_L_50:
                           A   754    .line 194
                           A   755    ;  195				ir_rx_bits = 0;
                           A   756    .line 195
0001AA E9000028            A   757    	LDX	_ir_rx_bits,#-0
                           A   758    ;  196				ir_rx_counter = 0;
                           A   759    .line 196
0001AE E9000027            A   760    	LDX	_ir_rx_counter,#-0
                           A   761    ;  197			}
                           A   762    ;  198		}
                           A   763    ;  199	}
0001B2                     A   764    _3_L_55:
                           A   765    .line 199
0001B2 D6 0000             A   766    	CALL	__b_iframereset
0001B5 BF                  A   767    	IRET	
                           A   768    .endfunc "isr_timer0",199,"_isr_timer0"
                           A   769    	SEGMENT ROM_DATA
                           A   770    
                           A   771    
                           A   772    ;**************************** _init_cpu *******
                           A   773    ;Name                         Addr/Register   S
                           A   774    ;_EI                                 IMPORT  --
                           A   775    ;_SET_VECTOR                         IMPORT  --
                           A   776    ;_DI                                 IMPORT  --
                           A   777    
                           A   778    
                           A   779    ; Aggregate Stack Size: 0 (words)
                           A   780    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  16


PC     Object              I  Line    Source main.src
                           A   781    
                           A   782    	.FRAME _n_init_cpu,?_n_init_cpu,RDATA
                           A   783    	.FRAME _f_init_cpu,?_f_init_cpu,EDATA
                           A   784    	SEGMENT main_TEXT
0001B6                     A   785    _init_cpu:
                           A   786    .define "_init_cpu"
                           A   787    .value _init_cpu
                           A   788    .class 2
                           A   789    .type 65
                           A   790    .type 0
                           A   791    .endef
                           A   792    .begfunc "init_cpu",201,"_init_cpu"
0001B6 D6 0000             A   793    	CALL	__b_frameset00
                           A   794    ;  200	
                           A   795    ;  201	void init_cpu(void) {
                           A   796    ;  202		DI();
                           A   797    .line 202
0001B9 8F                  A   798    	DI
                           A   799    ;  203		
                           A   800    ;  204		//PA0: RELOAD/DBG. Input, external 
                           A   801    ;  205		//PA1: INHIBIT. Output.
                           A   802    ;  206		//PA2: 38KHz. T1OUT, output.
                           A   803    ;  207		//PA3: LAZERMOD. Input.
                           A   804    ;  208		//PA4: RXD. UART, input.
                           A   805    ;  209		//PA5: TXD. UART, output.
                           A   806    ;  210		
                           A   807    ;  211		//Set up Port A.
                           A   808    ;  212		PADD = 0x19;	//00011001
                           A   809    .line 212
0001BA E9010FD0            A   810    	LDX	4048,#1
0001BE E9190FD1            A   811    	LDX	4049,#25
                           A   812    ;  213		PAAF = 0x34;	//00110100
                           A   813    .line 213
0001C2 E9020FD0            A   814    	LDX	4048,#2
0001C6 E9340FD1            A   815    	LDX	4049,#52
                           A   816    ;  214		PAAFS1 = 0x04;	//00000100
                           A   817    .line 214
0001CA E9070FD0            A   818    	LDX	4048,#7
0001CE E9040FD1            A   819    	LDX	4049,#4
                           A   820    ;  215		PAAFS2 = 0x00;	//00000000
                           A   821    .line 215
0001D2 E9080FD0            A   822    	LDX	4048,#8
0001D6 E9000FD1            A   823    	LDX	4049,#-0
                           A   824    ;  216		//PAPUE = 0x10;	//00010000
                           A   825    ;  217		
                           A   826    ;  218		//Set up UART for 2000 baud, 8 data
                           A   827    ;  219		//Set baud rate
                           A   828    ;  220		U0BRH = 0x00;
                           A   829    .line 220
0001DA E9000F46            A   830    	LDX	3910,#-0
                           A   831    ;  221		U0BRL = 0xAD;
                           A   832    .line 221
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  17


PC     Object              I  Line    Source main.src
0001DE E9AD0F47            A   833    	LDX	3911,#173
                           A   834    ;  222		//Set up interrupt
                           A   835    ;  223		SET_VECTOR(UART0_RX_IVECT, isr_uart
                           A   836    ;  224		SET_VECTOR(UART0_TX_IVECT, isr_uart
                           A   837    ;  225		IRQ0ENH |= 0x18;
                           A   838    .line 225
0001E2 49180FC1            A   839    	ORX	4033,#24
                           A   840    ;  226		IRQ0ENL |= 0x18;
                           A   841    .line 226
0001E6 49180FC2            A   842    	ORX	4034,#24
                           A   843    ;  227		IRQ0 &= ~0x18;
                           A   844    .line 227
0001EA 59E70FC0            A   845    	ANDX	4032,#-25
                           A   846    ;  228		//Enable transmitter and receiver, 
                           A   847    ;  229		U0CTL0 = 0xC2; 	//11000010
                           A   848    .line 229
0001EE E9C20F42            A   849    	LDX	3906,#194
                           A   850    ;  230		//Enable interrupts on received dat
                           A   851    ;  231		U0CTL1 = 0x00;	//00000000
                           A   852    .line 231
0001F2 E9000F43            A   853    	LDX	3907,#-0
                           A   854    ;  232		
                           A   855    ;  233		//Set up Timer0 to be an 4KHz heart
                           A   856    ;  234		//8KHz now.
                           A   857    ;  235		//Disable timer, set mode to Contin
                           A   858    ;  236		T0CTL1 = 0x01;	//00000001
                           A   859    .line 236
0001F6 E9010F07            A   860    	LDX	3847,#1
                           A   861    ;  237		T0CTL0 = 0x00;	//00000000
                           A   862    .line 237
0001FA E9000F06            A   863    	LDX	3846,#-0
                           A   864    ;  238		//Reset count
                           A   865    ;  239		T0H = 0x00; T0L = 0x01;
                           A   866    .line 239
0001FE E9000F00            A   867    	LDX	3840,#-0
000202 E9010F01            A   868    	LDX	3841,#1
                           A   869    ;  240		//Set the reload value
                           A   870    ;  241		//T0RH = 0x05; T0RL = 0x5F;
                           A   871    ;  242		T0RH = 0x02; T0RL = 0xB3;
                           A   872    .line 242
000206 E9020F02            A   873    	LDX	3842,#2
00020A E9B30F03            A   874    	LDX	3843,#179
                           A   875    ;  243		//Set the interrupt vector and prio
                           A   876    ;  244		SET_VECTOR(TIMER0, isr_timer0);
                           A   877    ;  245		IRQ0ENH |= 0x20;
                           A   878    .line 245
00020E 49200FC1            A   879    	ORX	4033,#32
                           A   880    ;  246		IRQ0ENL |= 0x20;
                           A   881    .line 246
000212 49200FC2            A   882    	ORX	4034,#32
                           A   883    ;  247		//Enable timer
                           A   884    ;  248		T0CTL1 |= 0x80;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  18


PC     Object              I  Line    Source main.src
                           A   885    .line 248
000216 49800F07            A   886    	ORX	3847,#128
                           A   887    ;  249		
                           A   888    ;  250		//Set up Timer1 to be 38KHz, 50% du
                           A   889    ;  251		//Turn off timer, set mode to singl
                           A   890    ;  252		T1CTL1 = 0x43;	//01000011
                           A   891    .line 252
00021A E9430F0F            A   892    	LDX	3855,#67
                           A   893    ;  253		T1CTL0 = 0x00;	//00000000
                           A   894    .line 253
00021E E9000F0E            A   895    	LDX	3854,#-0
                           A   896    ;  254		//Reset count
                           A   897    ;  255		T1H = 0x00; T1L = 0x01;
                           A   898    .line 255
000222 E9000F08            A   899    	LDX	3848,#-0
000226 E9010F09            A   900    	LDX	3849,#1
                           A   901    ;  256		//Set PWM value(Duty cycle)
                           A   902    ;  257		T1PWMH = 0x00; T1PWML = 0x48;
                           A   903    .line 257
00022A E9000F0C            A   904    	LDX	3852,#-0
00022E E9480F0D            A   905    	LDX	3853,#72
                           A   906    ;  258		//Set the reload value(Period)
                           A   907    ;  259		T1RH = 0x00; T1RL = 0x90;
                           A   908    .line 259
000232 E9000F0A            A   909    	LDX	3850,#-0
000236 E9900F0B            A   910    	LDX	3851,#144
                           A   911    ;  260		//Enable timer
                           A   912    ;  261		T1CTL1 |= 0x80;
                           A   913    .line 261
00023A 49800F0F            A   914    	ORX	3855,#128
                           A   915    ;  262		
                           A   916    ;  263		//Turn off the inhibit line
                           A   917    ;  264		PAOUT &= 0xFD;
                           A   918    .line 264
00023E 59FD0FD3            A   919    	ANDX	4051,#253
                           A   920    ;  265		
                           A   921    ;  266		//lastIO = PAIN;
                           A   922    ;  267		//tempIO = PAIN;
                           A   923    ;  268		
                           A   924    ;  269		EI();
                           A   925    .line 269
000242 9F                  A   926    	EI
                           A   927    ;  270	}
                           A   928    .line 270
000243 D6 0000             A   929    	CALL	__b_framereset
000246 AF                  A   930    	RET	
                           A   931    .endfunc "init_cpu",270,"_init_cpu"
                           A   932    	SEGMENT ROM_DATA
                           A   933    
                           A   934    
                           A   935    ;**************************** _sendQueue ******
                           A   936    ;Name                         Addr/Register   S
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  19


PC     Object              I  Line    Source main.src
                           A   937    ;_ser_tx_size                        STATIC    
                           A   938    ;_ser_tx_buffer                      STATIC    
                           A   939    ;_temp_tx_buffer                     STATIC    
                           A   940    ;_temp_tx_size                       STATIC    
                           A   941    ;i                                      RR0    
                           A   942    
                           A   943    
                           A   944    ; Aggregate Stack Size: 0 (words)
                           A   945    
                           A   946    
                           A   947    	.FRAME _n_sendQueue,?_n_sendQueue,RDATA
                           A   948    	.FRAME _f_sendQueue,?_f_sendQueue,EDATA
                           A   949    	SEGMENT main_TEXT
000247                     A   950    _sendQueue:
                           A   951    .define "_sendQueue"
                           A   952    .value _sendQueue
                           A   953    .class 2
                           A   954    .type 65
                           A   955    .type 0
                           A   956    .endef
                           A   957    .begfunc "sendQueue",272,"_sendQueue"
                           A   958    ;  271	
                           A   959    ;  272	void sendQueue(void) {
                           A   960    .define "i"
                           A   961    .class 4
                           A   962    .reg 17
                           A   963    .type 3
                           A   964    .type 0
                           A   965    .endef
000247 D6 0000             A   966    	CALL	__b_frameset00
00024A 8B 0D               A   967    	JR	_5_L_58
                           A   968    ;  273		int i;
                           A   969    ;  274		
                           A   970    ;  275		//Copy the data from the temporary 
                           A   971    ;  276		for(i = 0;i < temp_tx_size;i++) {
00024C                     A   972    _5_L_59:
                           A   973    .line 276
00024C 84203F              A   974    	LDX	R2,_temp_tx_size
00024F A212                A   975    	CP	R1,R2
000251 1FA6E000            A   976    	CPC	R0,#-0
000255 1B 08               A   977    	JR	LT,_5_L_61
000257 8B 20               A   978    	JR	_5_L_62
000259                     A   979    _5_L_58:
000259 B0E0                A   980    	CLR	R0
00025B B0E1                A   981    	CLR	R1
00025D 8B ED               A   982    	JR	_5_L_59
00025F                     A   983    _5_L_61:
                           A   984    ;  277			ser_tx_buffer[i] = temp_tx_buff
                           A   985    .line 277
00025F 2C 00               A   986    	LD	R2,#high(_temp_tx_buffer)
000261 3C 2F               A   987    	LD	R3,#low(_temp_tx_buffer)
000263 0231                A   988    	ADD	R3,R1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  20


PC     Object              I  Line    Source main.src
000265 1220                A   989    	ADC	R2,R0
000267 4C 00               A   990    	LD	R4,#high(_ser_tx_buffer)
000269 5C 14               A   991    	LD	R5,#low(_ser_tx_buffer)
00026B 0251                A   992    	ADD	R5,R1
00026D 1240                A   993    	ADC	R4,R0
00026F 86E2E6              A   994    	LDX	R6,@RR2
000272 96E6E4              A   995    	LDX	@RR4,R6
                           A   996    .line 276
000275 A0E0                A   997    	INCW	RR0
                           A   998    ;  278		}
                           A   999    .line 278
000277 8B D3               A  1000    	JR	_5_L_59
000279                     A  1001    _5_L_62:
                           A  1002    ;  279		ser_tx_size = temp_tx_size;
                           A  1003    .line 279
000279 E8 03F024           A  1004    	LDX	_ser_tx_size,_temp_tx_size
                           A  1005    ;  280		
                           A  1006    ;  281		//Clear the temporary queue.
                           A  1007    ;  282		temp_tx_size = 0;
                           A  1008    .line 282
00027D E900003F            A  1009    	LDX	_temp_tx_size,#-0
                           A  1010    ;  283		
                           A  1011    ;  284		//Kickstart the UART.
                           A  1012    ;  285		IRQ0 |= 0x08;
                           A  1013    .line 285
000281 49080FC0            A  1014    	ORX	4032,#8
                           A  1015    ;  286	}
                           A  1016    .line 286
000285 D6 0000             A  1017    	CALL	__b_framereset
000288 AF                  A  1018    	RET	
                           A  1019    .endfunc "sendQueue",286,"_sendQueue"
                           A  1020    	SEGMENT ROM_DATA
                           A  1021    
                           A  1022    
                           A  1023    ;**************************** _queueByte ******
                           A  1024    ;Name                         Addr/Register   S
                           A  1025    ;_temp_tx_size                       STATIC    
                           A  1026    ;_temp_tx_buffer                     STATIC    
                           A  1027    ;input                                   R8    
                           A  1028    
                           A  1029    
                           A  1030    ; Aggregate Stack Size: 0 (words)
                           A  1031    
                           A  1032    
                           A  1033    	.FRAME _n_queueByte,?_n_queueByte,RDATA
                           A  1034    	.FRAME _f_queueByte,?_f_queueByte,EDATA
                           A  1035    	SEGMENT main_TEXT
000289                     A  1036    _queueByte:
                           A  1037    .define "_queueByte"
                           A  1038    .value _queueByte
                           A  1039    .class 2
                           A  1040    .type 65
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  21


PC     Object              I  Line    Source main.src
                           A  1041    .type 0
                           A  1042    .endef
                           A  1043    .begfunc "queueByte",288,"_queueByte"
                           A  1044    .define "input"
                           A  1045    .class 17
                           A  1046    .reg 9
                           A  1047    .type 12
                           A  1048    .type 0
                           A  1049    .endef
000289 D6 0000             A  1050    	CALL	__b_frameset00
                           A  1051    ;  287	
                           A  1052    ;  288	void queueByte(unsigned char input) {
                           A  1053    ;  289		//Add a byte to the temporary queue
                           A  1054    ;  290		temp_tx_buffer[temp_tx_size] = inpu
                           A  1055    .line 290
00028C 84203F              A  1056    	LDX	R2,_temp_tx_size
00028F 0C 00               A  1057    	LD	R0,#high(_temp_tx_buffer)
000291 1C 2F               A  1058    	LD	R1,#low(_temp_tx_buffer)
000293 0212                A  1059    	ADD	R1,R2
000295 16E000              A  1060    	ADC	R0,#0
000298 96E8E0              A  1061    	LDX	@RR0,R8
                           A  1062    ;  291		temp_tx_size += 1;
                           A  1063    .line 291
00029B 0901003F            A  1064    	ADDX	_temp_tx_size,#1
                           A  1065    ;  292	}
                           A  1066    .line 292
00029F D6 0000             A  1067    	CALL	__b_framereset
0002A2 AF                  A  1068    	RET	
                           A  1069    .endfunc "queueByte",292,"_queueByte"
                           A  1070    	SEGMENT ROM_DATA
                           A  1071    
                           A  1072    
                           A  1073    ;**************************** _queueChecksum **
                           A  1074    ;Name                         Addr/Register   S
                           A  1075    ;_temp_tx_buffer                     STATIC    
                           A  1076    ;_temp_tx_size                       STATIC    
                           A  1077    ;checksum                                R2    
                           A  1078    ;i                                      RR0    
                           A  1079    
                           A  1080    
                           A  1081    ; Aggregate Stack Size: 0 (words)
                           A  1082    
                           A  1083    
                           A  1084    	.FRAME _n_queueChecksum,?_n_queueChecksum,R
                           A  1085    	.FCALL _n_queueByte
                           A  1086    	.FRAME _f_queueChecksum,?_f_queueChecksum,E
                           A  1087    	.FCALL _f_queueByte
                           A  1088    	SEGMENT main_TEXT
0002A3                     A  1089    _queueChecksum:
                           A  1090    .define "_queueChecksum"
                           A  1091    .value _queueChecksum
                           A  1092    .class 2
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  22


PC     Object              I  Line    Source main.src
                           A  1093    .type 65
                           A  1094    .type 0
                           A  1095    .endef
                           A  1096    .begfunc "queueChecksum",294,"_queueChecksum"
                           A  1097    ;  293	
                           A  1098    ;  294	void queueChecksum(void) {
                           A  1099    .define "i"
                           A  1100    .class 4
                           A  1101    .reg 17
                           A  1102    .type 3
                           A  1103    .type 0
                           A  1104    .endef
                           A  1105    .define "checksum"
                           A  1106    .class 4
                           A  1107    .reg 3
                           A  1108    .type 12
                           A  1109    .type 0
                           A  1110    .endef
0002A3 D6 0000             A  1111    	CALL	__b_frameset00
                           A  1112    ;  295		int i;
                           A  1113    ;  296		unsigned char checksum = 0xFF;
                           A  1114    .line 296
0002A6 2CFF                A  1115    	LD	R2,#255
0002A8 8B 0D               A  1116    	JR	_7_L_66
                           A  1117    ;  297		
                           A  1118    ;  298		//Calculate a checksum for all the 
                           A  1119    ;  299		for(i = 0; i < temp_tx_size;i++) {
0002AA                     A  1120    _7_L_67:
                           A  1121    .line 299
0002AA 84303F              A  1122    	LDX	R3,_temp_tx_size
0002AD A213                A  1123    	CP	R1,R3
0002AF 1FA6E000            A  1124    	CPC	R0,#-0
0002B3 1B 08               A  1125    	JR	LT,_7_L_69
0002B5 8B 17               A  1126    	JR	_7_L_70
0002B7                     A  1127    _7_L_66:
0002B7 B0E0                A  1128    	CLR	R0
0002B9 B0E1                A  1129    	CLR	R1
0002BB 8B ED               A  1130    	JR	_7_L_67
0002BD                     A  1131    _7_L_69:
                           A  1132    ;  300			checksum -= temp_tx_buffer[i];
                           A  1133    .line 300
0002BD 4C 00               A  1134    	LD	R4,#high(_temp_tx_buffer)
0002BF 5C 2F               A  1135    	LD	R5,#low(_temp_tx_buffer)
0002C1 0251                A  1136    	ADD	R5,R1
0002C3 1240                A  1137    	ADC	R4,R0
0002C5 86E4E3              A  1138    	LDX	R3,@RR4
0002C8 2223                A  1139    	SUB	R2,R3
                           A  1140    .line 299
0002CA A0E0                A  1141    	INCW	RR0
                           A  1142    ;  301		}
                           A  1143    .line 301
0002CC 8B DC               A  1144    	JR	_7_L_67
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  23


PC     Object              I  Line    Source main.src
0002CE                     A  1145    _7_L_70:
                           A  1146    ;  302		
                           A  1147    ;  303		//Add the checksum to the queue.
                           A  1148    ;  304		queueByte(checksum);
                           A  1149    .line 304
0002CE E4E2E8              A  1150    	LD	R8,R2
0002D1 D6 0289             A  1151    	CALL	_queueByte
                           A  1152    ;  305	}
                           A  1153    .line 305
0002D4 D6 0000             A  1154    	CALL	__b_framereset
0002D7 AF                  A  1155    	RET	
                           A  1156    .endfunc "queueChecksum",305,"_queueChecksum"
                           A  1157    	SEGMENT ROM_DATA
                           A  1158    
                           A  1159    
                           A  1160    ;**************************** _loadAmmo *******
                           A  1161    ;Name                         Addr/Register   S
                           A  1162    ;_ir_loaded_tags                     STATIC    
                           A  1163    ;howMuch                                 R8    
                           A  1164    
                           A  1165    
                           A  1166    ; Aggregate Stack Size: 0 (words)
                           A  1167    
                           A  1168    
                           A  1169    	.FRAME _n_loadAmmo,?_n_loadAmmo,RDATA
                           A  1170    	.FRAME _f_loadAmmo,?_f_loadAmmo,EDATA
                           A  1171    	SEGMENT main_TEXT
0002D8                     A  1172    _loadAmmo:
                           A  1173    .define "_loadAmmo"
                           A  1174    .value _loadAmmo
                           A  1175    .class 2
                           A  1176    .type 65
                           A  1177    .type 0
                           A  1178    .endef
                           A  1179    .begfunc "loadAmmo",307,"_loadAmmo"
                           A  1180    .define "howMuch"
                           A  1181    .class 17
                           A  1182    .reg 9
                           A  1183    .type 12
                           A  1184    .type 0
                           A  1185    .endef
0002D8 D6 0000             A  1186    	CALL	__b_frameset00
                           A  1187    ;  306	
                           A  1188    ;  307	void loadAmmo(unsigned char howMuch) {
                           A  1189    ;  308		ir_loaded_tags = howMuch;
                           A  1190    .line 308
0002DB 948029              A  1191    	LDX	_ir_loaded_tags,R8
                           A  1192    ;  309		//INHIBIT should be high to generat
                           A  1193    ;  310		PAOUT |= 0x02;
                           A  1194    .line 310
0002DE 49020FD3            A  1195    	ORX	4051,#2
                           A  1196    ;  311	}
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  24


PC     Object              I  Line    Source main.src
                           A  1197    .line 311
0002E2 D6 0000             A  1198    	CALL	__b_framereset
0002E5 AF                  A  1199    	RET	
                           A  1200    .endfunc "loadAmmo",311,"_loadAmmo"
                           A  1201    	SEGMENT ROM_DATA
                           A  1202    
                           A  1203    
                           A  1204    ;**************************** _rxedResetBarrel 
                           A  1205    ;Name                         Addr/Register   S
                           A  1206    ;_reloadCooldown                     STATIC    
                           A  1207    ;_weAreReloading                     STATIC    
                           A  1208    ;_weAreRegistered                    STATIC    
                           A  1209    ;_sendBarrelReply                    STATIC    
                           A  1210    ;_sendLoadSpecial                    STATIC    
                           A  1211    ;_sendArmSpecial                     STATIC    
                           A  1212    ;_ir_loaded_tags                     STATIC    
                           A  1213    
                           A  1214    
                           A  1215    ; Aggregate Stack Size: 0 (words)
                           A  1216    
                           A  1217    
                           A  1218    	.FRAME _n_rxedResetBarrel,?_n_rxedResetBarr
                           A  1219    	.FRAME _f_rxedResetBarrel,?_f_rxedResetBarr
                           A  1220    	SEGMENT main_TEXT
0002E6                     A  1221    _rxedResetBarrel:
                           A  1222    .define "_rxedResetBarrel"
                           A  1223    .value _rxedResetBarrel
                           A  1224    .class 2
                           A  1225    .type 65
                           A  1226    .type 0
                           A  1227    .endef
                           A  1228    .begfunc "rxedResetBarrel",313,"_rxedResetBarre
0002E6 D6 0000             A  1229    	CALL	__b_frameset00
                           A  1230    ;  312	
                           A  1231    ;  313	void rxedResetBarrel(void) {
                           A  1232    ;  314		//This will reset any variables use
                           A  1233    ;  315		
                           A  1234    ;  316		ir_loaded_tags = 0;
                           A  1235    .line 316
0002E9 E9000029            A  1236    	LDX	_ir_loaded_tags,#-0
                           A  1237    ;  317		
                           A  1238    ;  318		sendArmSpecial = 0;
                           A  1239    .line 318
0002ED E9000042            A  1240    	LDX	_sendArmSpecial,#-0
                           A  1241    ;  319		sendLoadSpecial = 0;
                           A  1242    .line 319
0002F1 E9000041            A  1243    	LDX	_sendLoadSpecial,#-0
                           A  1244    ;  320		sendBarrelReply = 0;
                           A  1245    .line 320
0002F5 E9000040            A  1246    	LDX	_sendBarrelReply,#-0
                           A  1247    ;  321		
                           A  1248    ;  322		weAreRegistered = 0;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  25


PC     Object              I  Line    Source main.src
                           A  1249    .line 322
0002F9 E9000043            A  1250    	LDX	_weAreRegistered,#-0
                           A  1251    ;  323		weAreReloading = 0;
                           A  1252    .line 323
0002FD E9000044            A  1253    	LDX	_weAreReloading,#-0
                           A  1254    ;  324		
                           A  1255    ;  325		reloadCooldown = 800;
                           A  1256    .line 325
000301 E9030045            A  1257    	LDX	_reloadCooldown,#3
000305 E9200046            A  1258    	LDX	_reloadCooldown+1,#32
                           A  1259    ;  326		
                           A  1260    ;  327		PAOUT &= 0xFD;
                           A  1261    .line 327
000309 59FD0FD3            A  1262    	ANDX	4051,#253
                           A  1263    ;  328	}
                           A  1264    .line 328
00030D D6 0000             A  1265    	CALL	__b_framereset
000310 AF                  A  1266    	RET	
                           A  1267    .endfunc "rxedResetBarrel",328,"_rxedResetBarre
                           A  1268    	SEGMENT ROM_DATA
                           A  1269    
                           A  1270    
                           A  1271    ;**************************** _rxedRollCall ***
                           A  1272    ;Name                         Addr/Register   S
                           A  1273    ;_sendBarrelReply                    STATIC    
                           A  1274    
                           A  1275    
                           A  1276    ; Aggregate Stack Size: 0 (words)
                           A  1277    
                           A  1278    
                           A  1279    	.FRAME _n_rxedRollCall,?_n_rxedRollCall,RDA
                           A  1280    	.FRAME _f_rxedRollCall,?_f_rxedRollCall,EDA
                           A  1281    	SEGMENT main_TEXT
000311                     A  1282    _rxedRollCall:
                           A  1283    .define "_rxedRollCall"
                           A  1284    .value _rxedRollCall
                           A  1285    .class 2
                           A  1286    .type 65
                           A  1287    .type 0
                           A  1288    .endef
                           A  1289    .begfunc "rxedRollCall",330,"_rxedRollCall"
000311 D6 0000             A  1290    	CALL	__b_frameset00
                           A  1291    ;  329	
                           A  1292    ;  330	void rxedRollCall(void) {
                           A  1293    ;  331		/*	Format:		BType		$00
                           A  1294    ;  332						BData0		Blaster
                           A  1295    ;  333						BSum		$cs
                           A  1296    ;  334		*/
                           A  1297    ;  335		//We don't actually care about anyt
                           A  1298    ;  336		//Set a flag that will be seen by s
                           A  1299    ;  337		sendBarrelReply = 1;
                           A  1300    .line 337
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  26


PC     Object              I  Line    Source main.src
000314 E9010040            A  1301    	LDX	_sendBarrelReply,#1
                           A  1302    ;  338	}
                           A  1303    .line 338
000318 D6 0000             A  1304    	CALL	__b_framereset
00031B AF                  A  1305    	RET	
                           A  1306    .endfunc "rxedRollCall",338,"_rxedRollCall"
                           A  1307    	SEGMENT ROM_DATA
                           A  1308    
                           A  1309    
                           A  1310    ;**************************** _rxedBarrelSeen *
                           A  1311    ;Name                         Addr/Register   S
                           A  1312    ;_weAreRegistered                    STATIC    
                           A  1313    
                           A  1314    
                           A  1315    ; Aggregate Stack Size: 0 (words)
                           A  1316    
                           A  1317    
                           A  1318    	.FRAME _n_rxedBarrelSeen,?_n_rxedBarrelSeen
                           A  1319    	.FCALL _n_rxedResetBarrel
                           A  1320    	.FRAME _f_rxedBarrelSeen,?_f_rxedBarrelSeen
                           A  1321    	.FCALL _f_rxedResetBarrel
                           A  1322    	SEGMENT main_TEXT
00031C                     A  1323    _rxedBarrelSeen:
                           A  1324    .define "_rxedBarrelSeen"
                           A  1325    .value _rxedBarrelSeen
                           A  1326    .class 2
                           A  1327    .type 65
                           A  1328    .type 0
                           A  1329    .endef
                           A  1330    .begfunc "rxedBarrelSeen",340,"_rxedBarrelSeen"
00031C D6 0000             A  1331    	CALL	__b_frameset00
                           A  1332    ;  339	
                           A  1333    ;  340	void rxedBarrelSeen(void) {
                           A  1334    ;  341		/*	Format:		BType		$40
                           A  1335    ;  342						BSum		$cs
                           A  1336    ;  343		*/
                           A  1337    ;  344		//No data, no cares! This does mean
                           A  1338    ;  345		rxedResetBarrel();
                           A  1339    .line 345
00031F D6 02E6             A  1340    	CALL	_rxedResetBarrel
                           A  1341    ;  346		weAreRegistered = 1;
                           A  1342    .line 346
000322 E9010043            A  1343    	LDX	_weAreRegistered,#1
                           A  1344    ;  347	}
                           A  1345    .line 347
000326 D6 0000             A  1346    	CALL	__b_framereset
000329 AF                  A  1347    	RET	
                           A  1348    .endfunc "rxedBarrelSeen",347,"_rxedBarrelSeen"
                           A  1349    	SEGMENT ROM_DATA
                           A  1350    
                           A  1351    
                           A  1352    ;**************************** _rxedBarrelAck **
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  27


PC     Object              I  Line    Source main.src
                           A  1353    ;Name                         Addr/Register   S
                           A  1354    ;_reloadCooldown                     STATIC    
                           A  1355    ;_sendArmSpecial                     STATIC    
                           A  1356    ;_weAreReloading                     STATIC    
                           A  1357    
                           A  1358    
                           A  1359    ; Aggregate Stack Size: 0 (words)
                           A  1360    
                           A  1361    
                           A  1362    	.FRAME _n_rxedBarrelAck,?_n_rxedBarrelAck,R
                           A  1363    	.FCALL _n_loadAmmo
                           A  1364    	.FRAME _f_rxedBarrelAck,?_f_rxedBarrelAck,E
                           A  1365    	.FCALL _f_loadAmmo
                           A  1366    	SEGMENT main_TEXT
00032A                     A  1367    _rxedBarrelAck:
                           A  1368    .define "_rxedBarrelAck"
                           A  1369    .value _rxedBarrelAck
                           A  1370    .class 2
                           A  1371    .type 65
                           A  1372    .type 0
                           A  1373    .endef
                           A  1374    .begfunc "rxedBarrelAck",349,"_rxedBarrelAck"
00032A D6 0000             A  1375    	CALL	__b_frameset00
                           A  1376    ;  348	
                           A  1377    ;  349	void rxedBarrelAck(void) {
                           A  1378    ;  350		/*	Format:		BType		$41
                           A  1379    ;  351						BSum		$cs
                           A  1380    ;  352		*/
                           A  1381    ;  353		//This one we actually care about, 
                           A  1382    ;  354		if(weAreReloading == 1) {
                           A  1383    .line 354
00032D A9010044            A  1384    	CPX	_weAreReloading,#1
000331 EB 06               A  1385    	JR	NE,_12_L_78
                           A  1386    ;  355			//Because we still need to actu
                           A  1387    ;  356			//Flag that we need to send thi
                           A  1388    ;  357			sendArmSpecial = 1;
                           A  1389    .line 357
000333 E9010042            A  1390    	LDX	_sendArmSpecial,#1
                           A  1391    ;  358		} else if(weAreReloading == 2) {
                           A  1392    .line 358
000337 8B 17               A  1393    	JR	_12_L_79
000339                     A  1394    _12_L_78:
000339 A9020044            A  1395    	CPX	_weAreReloading,#2
00033D EB 11               A  1396    	JR	NE,_12_L_79
                           A  1397    ;  359			weAreReloading = 0;
                           A  1398    .line 359
00033F E9000044            A  1399    	LDX	_weAreReloading,#-0
                           A  1400    ;  360			//We're now in control of sendi
                           A  1401    ;  361			loadAmmo(AMMO);
                           A  1402    .line 361
000343 8C0F                A  1403    	LD	R8,#15
000345 D6 02D8             A  1404    	CALL	_loadAmmo
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  28


PC     Object              I  Line    Source main.src
                           A  1405    ;  362			//Slow down reloading a bit...
                           A  1406    ;  363			reloadCooldown = 800;
                           A  1407    .line 363
000348 E9030045            A  1408    	LDX	_reloadCooldown,#3
00034C E9200046            A  1409    	LDX	_reloadCooldown+1,#32
                           A  1410    ;  364		}
                           A  1411    ;  365	}
000350                     A  1412    _12_L_79:
                           A  1413    .line 365
000350 D6 0000             A  1414    	CALL	__b_framereset
000353 AF                  A  1415    	RET	
                           A  1416    .endfunc "rxedBarrelAck",365,"_rxedBarrelAck"
                           A  1417    	SEGMENT ROM_DATA
                           A  1418    
                           A  1419    
                           A  1420    ;**************************** _BarrelReply ****
                           A  1421    ;Name                         Addr/Register   S
                           A  1422    
                           A  1423    
                           A  1424    ; Aggregate Stack Size: 0 (words)
                           A  1425    
                           A  1426    
                           A  1427    	.FRAME _n_BarrelReply,?_n_BarrelReply,RDATA
                           A  1428    	.FCALL _n_queueByte
                           A  1429    	.FCALL _n_queueChecksum
                           A  1430    	.FCALL _n_sendQueue
                           A  1431    	.FRAME _f_BarrelReply,?_f_BarrelReply,EDATA
                           A  1432    	.FCALL _f_queueByte
                           A  1433    	.FCALL _f_queueChecksum
                           A  1434    	.FCALL _f_sendQueue
                           A  1435    	SEGMENT main_TEXT
000354                     A  1436    _BarrelReply:
                           A  1437    .define "_BarrelReply"
                           A  1438    .value _BarrelReply
                           A  1439    .class 2
                           A  1440    .type 65
                           A  1441    .type 0
                           A  1442    .endef
                           A  1443    .begfunc "BarrelReply",367,"_BarrelReply"
000354 D6 0000             A  1444    	CALL	__b_frameset00
                           A  1445    ;  366	
                           A  1446    ;  367	void BarrelReply(void) {
                           A  1447    ;  368		/*	BARREL-REPLY
                           A  1448    ;  369			Format:		BType		$40
                           A  1449    ;  370						BData0		Barrel 
                           A  1450    ;  371						BSum		$cs
                           A  1451    ;  372			Barrels send this block in resp
                           A  1452    ;  373			BData0 should be 0x01 for a sho
                           A  1453    ;  374			Other values are undefined, but
                           A  1454    ;  375		*/
                           A  1455    ;  376		
                           A  1456    ;  377		//BType
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  29


PC     Object              I  Line    Source main.src
                           A  1457    ;  378		queueByte(0x40);
                           A  1458    .line 378
000357 8C40                A  1459    	LD	R8,#64
000359 D6 0289             A  1460    	CALL	_queueByte
                           A  1461    ;  379		//BData0
                           A  1462    ;  380		queueByte(0x02);
                           A  1463    .line 380
00035C 8C02                A  1464    	LD	R8,#2
00035E D6 0289             A  1465    	CALL	_queueByte
                           A  1466    ;  381		//BSum
                           A  1467    ;  382		queueChecksum();
                           A  1468    .line 382
000361 D6 02A3             A  1469    	CALL	_queueChecksum
                           A  1470    ;  383		
                           A  1471    ;  384		//Send it!
                           A  1472    ;  385		sendQueue();
                           A  1473    .line 385
000364 D6 0247             A  1474    	CALL	_sendQueue
                           A  1475    ;  386	}
                           A  1476    .line 386
000367 D6 0000             A  1477    	CALL	__b_framereset
00036A AF                  A  1478    	RET	
                           A  1479    .endfunc "BarrelReply",386,"_BarrelReply"
                           A  1480    	SEGMENT ROM_DATA
                           A  1481    
                           A  1482    
                           A  1483    ;**************************** _LoadSpecial ****
                           A  1484    ;Name                         Addr/Register   S
                           A  1485    ;_weAreReloading                     STATIC    
                           A  1486    
                           A  1487    
                           A  1488    ; Aggregate Stack Size: 0 (words)
                           A  1489    
                           A  1490    
                           A  1491    	.FRAME _n_LoadSpecial,?_n_LoadSpecial,RDATA
                           A  1492    	.FCALL _n_queueByte
                           A  1493    	.FCALL _n_queueChecksum
                           A  1494    	.FCALL _n_sendQueue
                           A  1495    	.FRAME _f_LoadSpecial,?_f_LoadSpecial,EDATA
                           A  1496    	.FCALL _f_queueByte
                           A  1497    	.FCALL _f_queueChecksum
                           A  1498    	.FCALL _f_sendQueue
                           A  1499    	SEGMENT main_TEXT
00036B                     A  1500    _LoadSpecial:
                           A  1501    .define "_LoadSpecial"
                           A  1502    .value _LoadSpecial
                           A  1503    .class 2
                           A  1504    .type 65
                           A  1505    .type 0
                           A  1506    .endef
                           A  1507    .begfunc "LoadSpecial",388,"_LoadSpecial"
00036B D6 0000             A  1508    	CALL	__b_frameset00
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  30


PC     Object              I  Line    Source main.src
                           A  1509    ;  387	
                           A  1510    ;  388	void LoadSpecial(void) {
                           A  1511    ;  389		/*	LOAD-SPECIAL
                           A  1512    ;  390			Format:		BType		$41
                           A  1513    ;  391						BData0		Ammo Ne
                           A  1514    ;  392						BData1		DoubleT
                           A  1515    ;  393						BData2		LoadSFX
                           A  1516    ;  394						BData3		FireSFX
                           A  1517    ;  395						BData4		Display
                           A  1518    ;  396						BSum		$cs
                           A  1519    ;  397			Unloads any ready ammo and load
                           A  1520    ;  398		*/
                           A  1521    ;  399		
                           A  1522    ;  400		//BType
                           A  1523    ;  401		queueByte(0x41);
                           A  1524    .line 401
00036E 8C41                A  1525    	LD	R8,#65
000370 D6 0289             A  1526    	CALL	_queueByte
                           A  1527    ;  402		//BData0
                           A  1528    ;  403		queueByte(AMMO);
                           A  1529    .line 403
000373 8C0F                A  1530    	LD	R8,#15
000375 D6 0289             A  1531    	CALL	_queueByte
                           A  1532    ;  404		//BData1
                           A  1533    ;  405		queueByte(DOUBLETAPS);
                           A  1534    .line 405
000378 B0E8                A  1535    	CLR	R8
00037A D6 0289             A  1536    	CALL	_queueByte
                           A  1537    ;  406		//BData2
                           A  1538    ;  407		queueByte(LOADSFX);
                           A  1539    .line 407
00037D 8C0E                A  1540    	LD	R8,#14
00037F D6 0289             A  1541    	CALL	_queueByte
                           A  1542    ;  408		//BData3
                           A  1543    ;  409		queueByte(FIRESFX);
                           A  1544    .line 409
000382 8C0B                A  1545    	LD	R8,#11
000384 D6 0289             A  1546    	CALL	_queueByte
                           A  1547    ;  410		//BData4
                           A  1548    ;  411		queueByte(0);
                           A  1549    .line 411
000387 B0E8                A  1550    	CLR	R8
000389 D6 0289             A  1551    	CALL	_queueByte
                           A  1552    ;  412		//BSum
                           A  1553    ;  413		queueChecksum();
                           A  1554    .line 413
00038C D6 02A3             A  1555    	CALL	_queueChecksum
                           A  1556    ;  414		
                           A  1557    ;  415		//We also need to mark that we're t
                           A  1558    ;  416		weAreReloading = 1;
                           A  1559    .line 416
00038F E9010044            A  1560    	LDX	_weAreReloading,#1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  31


PC     Object              I  Line    Source main.src
                           A  1561    ;  417		
                           A  1562    ;  418		//Send it!
                           A  1563    ;  419		sendQueue();
                           A  1564    .line 419
000393 D6 0247             A  1565    	CALL	_sendQueue
                           A  1566    ;  420	}
                           A  1567    .line 420
000396 D6 0000             A  1568    	CALL	__b_framereset
000399 AF                  A  1569    	RET	
                           A  1570    .endfunc "LoadSpecial",420,"_LoadSpecial"
                           A  1571    	SEGMENT ROM_DATA
                           A  1572    
                           A  1573    
                           A  1574    ;**************************** _ArmSpecial *****
                           A  1575    ;Name                         Addr/Register   S
                           A  1576    ;_weAreReloading                     STATIC    
                           A  1577    
                           A  1578    
                           A  1579    ; Aggregate Stack Size: 0 (words)
                           A  1580    
                           A  1581    
                           A  1582    	.FRAME _n_ArmSpecial,?_n_ArmSpecial,RDATA
                           A  1583    	.FCALL _n_queueByte
                           A  1584    	.FCALL _n_queueChecksum
                           A  1585    	.FCALL _n_sendQueue
                           A  1586    	.FRAME _f_ArmSpecial,?_f_ArmSpecial,EDATA
                           A  1587    	.FCALL _f_queueByte
                           A  1588    	.FCALL _f_queueChecksum
                           A  1589    	.FCALL _f_sendQueue
                           A  1590    	SEGMENT main_TEXT
00039A                     A  1591    _ArmSpecial:
                           A  1592    .define "_ArmSpecial"
                           A  1593    .value _ArmSpecial
                           A  1594    .class 2
                           A  1595    .type 65
                           A  1596    .type 0
                           A  1597    .endef
                           A  1598    .begfunc "ArmSpecial",422,"_ArmSpecial"
00039A D6 0000             A  1599    	CALL	__b_frameset00
                           A  1600    ;  421	
                           A  1601    ;  422	void ArmSpecial(void) {
                           A  1602    ;  423		/*	ARM-SPECIAL
                           A  1603    ;  424			Format:		BType		$42
                           A  1604    ;  425						BData0	BurstSize (
                           A  1605    ;  426						BData1	Ammo (1-15)
                           A  1606    ;  427						BData2	TrigRate (1
                           A  1607    ;  428						BSum		$cs
                           A  1608    ;  429			BurstSize is in the range 1 to 
                           A  1609    ;  430			Ammo is the amount of ready amm
                           A  1610    ;  431			TrigRate is the number of milli
                           A  1611    ;  432		*/
                           A  1612    ;  433		
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  32


PC     Object              I  Line    Source main.src
                           A  1613    ;  434		//BType
                           A  1614    ;  435		queueByte(0x42);
                           A  1615    .line 435
00039D 8C42                A  1616    	LD	R8,#66
00039F D6 0289             A  1617    	CALL	_queueByte
                           A  1618    ;  436		//BData0
                           A  1619    ;  437		queueByte(BURSTSIZE);
                           A  1620    .line 437
0003A2 8C0F                A  1621    	LD	R8,#15
0003A4 D6 0289             A  1622    	CALL	_queueByte
                           A  1623    ;  438		//BData1
                           A  1624    ;  439		queueByte(AMMO);
                           A  1625    .line 439
0003A7 8C0F                A  1626    	LD	R8,#15
0003A9 D6 0289             A  1627    	CALL	_queueByte
                           A  1628    ;  440		//BData2
                           A  1629    ;  441		queueByte(REFIRERATE);
                           A  1630    .line 441
0003AC 8C10                A  1631    	LD	R8,#16
0003AE D6 0289             A  1632    	CALL	_queueByte
                           A  1633    ;  442		//BSum
                           A  1634    ;  443		queueChecksum();
                           A  1635    .line 443
0003B1 D6 02A3             A  1636    	CALL	_queueChecksum
                           A  1637    ;  444		
                           A  1638    ;  445		//Send it!
                           A  1639    ;  446		sendQueue();
                           A  1640    .line 446
0003B4 D6 0247             A  1641    	CALL	_sendQueue
                           A  1642    ;  447		
                           A  1643    ;  448		//We're expecting another ACK from 
                           A  1644    ;  449		weAreReloading = 2;
                           A  1645    .line 449
0003B7 E9020044            A  1646    	LDX	_weAreReloading,#2
                           A  1647    ;  450	}
                           A  1648    .line 450
0003BB D6 0000             A  1649    	CALL	__b_framereset
0003BE AF                  A  1650    	RET	
                           A  1651    .endfunc "ArmSpecial",450,"_ArmSpecial"
                           A  1652    	SEGMENT ROM_DATA
                           A  1653    
                           A  1654    
                           A  1655    ;**************************** _sendSomething **
                           A  1656    ;Name                         Addr/Register   S
                           A  1657    ;_ir_loaded_tags                     STATIC    
                           A  1658    ;_reloadCooldown                     STATIC    
                           A  1659    ;_weAreReloading                     STATIC    
                           A  1660    ;_sendLoadSpecial                    STATIC    
                           A  1661    ;_sendArmSpecial                     STATIC    
                           A  1662    ;_sendBarrelReply                    STATIC    
                           A  1663    ;_ser_tx_cooldown                    STATIC    
                           A  1664    ;_ser_tx_size                        STATIC    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  33


PC     Object              I  Line    Source main.src
                           A  1665    
                           A  1666    
                           A  1667    ; Aggregate Stack Size: 0 (words)
                           A  1668    
                           A  1669    
                           A  1670    	.FRAME _n_sendSomething,?_n_sendSomething,R
                           A  1671    	.FCALL _n_BarrelReply
                           A  1672    	.FCALL _n_ArmSpecial
                           A  1673    	.FCALL _n_LoadSpecial
                           A  1674    	.FRAME _f_sendSomething,?_f_sendSomething,E
                           A  1675    	.FCALL _f_BarrelReply
                           A  1676    	.FCALL _f_ArmSpecial
                           A  1677    	.FCALL _f_LoadSpecial
                           A  1678    	SEGMENT main_TEXT
0003BF                     A  1679    _sendSomething:
                           A  1680    .define "_sendSomething"
                           A  1681    .value _sendSomething
                           A  1682    .class 2
                           A  1683    .type 65
                           A  1684    .type 0
                           A  1685    .endef
                           A  1686    .begfunc "sendSomething",452,"_sendSomething"
0003BF D6 0000             A  1687    	CALL	__b_frameset00
                           A  1688    ;  451	
                           A  1689    ;  452	void sendSomething(void) {
                           A  1690    ;  453		if(!ser_tx_size && !ser_tx_cooldown
                           A  1691    .line 453
0003C2 A9000024            A  1692    	CPX	_ser_tx_size,#-0
0003C6 EB 47               A  1693    	JR	NE,_16_L_99
0003C8 A9000025            A  1694    	CPX	_ser_tx_cooldown,#-0
0003CC EB 41               A  1695    	JR	NE,_16_L_99
                           A  1696    ;  454			if(sendBarrelReply) {
                           A  1697    .line 454
0003CE A9000040            A  1698    	CPX	_sendBarrelReply,#-0
0003D2 6B 09               A  1699    	JR	Z,_16_L_86
                           A  1700    ;  455				sendBarrelReply = 0;
                           A  1701    .line 455
0003D4 E9000040            A  1702    	LDX	_sendBarrelReply,#-0
                           A  1703    ;  456				BarrelReply();
                           A  1704    .line 456
0003D8 D6 0354             A  1705    	CALL	_BarrelReply
                           A  1706    ;  457				return;
                           A  1707    .line 457
0003DB 8B 32               A  1708    	JR	_16_L_99
                           A  1709    ;  458			}
0003DD                     A  1710    _16_L_86:
                           A  1711    .line 458
                           A  1712    ;  459			if(sendArmSpecial) {
                           A  1713    .line 459
0003DD A9000042            A  1714    	CPX	_sendArmSpecial,#-0
0003E1 6B 09               A  1715    	JR	Z,_16_L_97
                           A  1716    ;  460				sendArmSpecial = 0;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  34


PC     Object              I  Line    Source main.src
                           A  1717    .line 460
0003E3 E9000042            A  1718    	LDX	_sendArmSpecial,#-0
                           A  1719    ;  461				ArmSpecial();
                           A  1720    .line 461
0003E7 D6 039A             A  1721    	CALL	_ArmSpecial
                           A  1722    ;  462				return;
                           A  1723    .line 462
0003EA 8B 23               A  1724    	JR	_16_L_99
                           A  1725    ;  463			}
0003EC                     A  1726    _16_L_97:
                           A  1727    .line 463
                           A  1728    ;  464			if(sendLoadSpecial) {
                           A  1729    .line 464
0003EC A9000041            A  1730    	CPX	_sendLoadSpecial,#-0
0003F0 6B 1D               A  1731    	JR	Z,_16_L_99
                           A  1732    ;  465				sendLoadSpecial = 0;
                           A  1733    .line 465
0003F2 E9000041            A  1734    	LDX	_sendLoadSpecial,#-0
                           A  1735    ;  466				if(RELOADMIDCLIP) {
                           A  1736    ;  467					if(!weAreReloading && !
                           A  1737    .line 467
0003F6 A9000044            A  1738    	CPX	_weAreReloading,#-0
0003FA EB 13               A  1739    	JR	NE,_16_L_95
0003FC 840045              A  1740    	LDX	R0,_reloadCooldown
0003FF 841046              A  1741    	LDX	R1,_reloadCooldown+1
000402 4201                A  1742    	OR	R0,R1
000404 EB 09               A  1743    	JR	NE,_16_L_95
                           A  1744    ;  468						if(ir_loaded_tags !
                           A  1745    .line 468
000406 A90F0029            A  1746    	CPX	_ir_loaded_tags,#15
00040A 6B 03               A  1747    	JR	Z,_16_L_95
                           A  1748    ;  469							LoadSpecial();
                           A  1749    .line 469
00040C D6 036B             A  1750    	CALL	_LoadSpecial
                           A  1751    ;  470						}
                           A  1752    ;  471					}
                           A  1753    ;  472				} else {
                           A  1754    ;  473					if(!weAreReloading && !
                           A  1755    ;  474						LoadSpecial();
                           A  1756    ;  475					}
                           A  1757    ;  476				}
00040F                     A  1758    _16_L_95:
                           A  1759    .line 476
                           A  1760    ;  477				return;
                           A  1761    ;  478			}
                           A  1762    ;  479		}
                           A  1763    ;  480	}
00040F                     A  1764    _16_L_99:
                           A  1765    .line 480
00040F D6 0000             A  1766    	CALL	__b_framereset
000412 AF                  A  1767    	RET	
                           A  1768    .endfunc "sendSomething",480,"_sendSomething"
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  35


PC     Object              I  Line    Source main.src
                           A  1769    	SEGMENT ROM_DATA
                           A  1770    ;	Jump Table for Switch Statement at line 487
000000                     A  1771    L__72:
000000 000B                A  1772    	DW	11
000002 0000                A  1773    	DW	0
000004 042A                A  1774    	DW	_17_L_100
000006 001E                A  1775    	DW	30
000008 042F                A  1776    	DW	_17_L_101
00000A 001F                A  1777    	DW	31
00000C 042F                A  1778    	DW	_17_L_102
00000E 0020                A  1779    	DW	32
000010 042F                A  1780    	DW	_17_L_103
000012 0040                A  1781    	DW	64
000014 0434                A  1782    	DW	_17_L_109
000016 0041                A  1783    	DW	65
000018 0439                A  1784    	DW	_17_L_110
00001A 005F                A  1785    	DW	95
00001C 042F                A  1786    	DW	_17_L_104
00001E 0060                A  1787    	DW	96
000020 042F                A  1788    	DW	_17_L_105
000022 0080                A  1789    	DW	128
000024 042F                A  1790    	DW	_17_L_106
000026 00A0                A  1791    	DW	160
000028 042F                A  1792    	DW	_17_L_107
00002A 00C0                A  1793    	DW	192
00002C 042F                A  1794    	DW	_17_L_108
00002E 043C                A  1795    	DW	_17_L_112
                           A  1796    
                           A  1797    
                           A  1798    ;**************************** _receiveSomething
                           A  1799    ;Name                         Addr/Register   S
                           A  1800    ;_captureBuffer                      STATIC    
                           A  1801    
                           A  1802    
                           A  1803    ; Aggregate Stack Size: 0 (words)
                           A  1804    
                           A  1805    
                           A  1806    	.FRAME _n_receiveSomething,?_n_receiveSomet
                           A  1807    	.FCALL _n_rxedRollCall
                           A  1808    	.FCALL _n_rxedResetBarrel
                           A  1809    	.FCALL _n_rxedBarrelSeen
                           A  1810    	.FCALL _n_rxedBarrelAck
                           A  1811    	.FRAME _f_receiveSomething,?_f_receiveSomet
                           A  1812    	.FCALL _f_rxedRollCall
                           A  1813    	.FCALL _f_rxedResetBarrel
                           A  1814    	.FCALL _f_rxedBarrelSeen
                           A  1815    	.FCALL _f_rxedBarrelAck
                           A  1816    	SEGMENT main_TEXT
000413                     A  1817    _receiveSomething:
                           A  1818    .define "_receiveSomething"
                           A  1819    .value _receiveSomething
                           A  1820    .class 2
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  36


PC     Object              I  Line    Source main.src
                           A  1821    .type 65
                           A  1822    .type 0
                           A  1823    .endef
                           A  1824    .begfunc "receiveSomething",482,"_receiveSometh
000413 D6 0000             A  1825    	CALL	__b_frameset00
                           A  1826    ;  481	
                           A  1827    ;  482	void receiveSomething(void) {
                           A  1828    ;  483		if(captureBuffer.size & 0x80) {
                           A  1829    .line 483
000416 79800011            A  1830    	TMX	_captureBuffer+17,#128
00041A 6B 24               A  1831    	JR	Z,_17_L_114
                           A  1832    ;  484			//There's a block in the buffer
                           A  1833    ;  485			
                           A  1834    ;  486			//Figure out what type it is an
                           A  1835    ;  487			switch(captureBuffer.buffer[0])
                           A  1836    .line 487
00041C 841001              A  1837    	LDX	R1,_captureBuffer+1
00041F B0E0                A  1838    	CLR	R0
000421 2C 00               A  1839    	LD	R2,#high(L__72)
000423 3C 00               A  1840    	LD	R3,#low(L__72)
000425 D6 0000             A  1841    	CALL	__b_ucase
000428 C4E0                A  1842    	JP	@RR0
                           A  1843    ;  488				case 0x00:
00042A                     A  1844    _17_L_100:
                           A  1845    .line 488
                           A  1846    ;  489					//ROLL-CALL
                           A  1847    ;  490					rxedRollCall();
                           A  1848    .line 490
00042A D6 0311             A  1849    	CALL	_rxedRollCall
                           A  1850    ;  491					break;
                           A  1851    .line 491
00042D 8B 0D               A  1852    	JR	_17_L_112
                           A  1853    ;  492				case 0x1E: //NO-ACCY
00042F                     A  1854    _17_L_101:
                           A  1855    .line 492
                           A  1856    ;  493				case 0x1F: //RESET-ALL
00042F                     A  1857    _17_L_102:
                           A  1858    .line 493
                           A  1859    ;  494				case 0x20: //ROLL-REPLY		00042F                     A  1860    _17_L_103:
                           A  1861    .line 494
                           A  1862    ;  495				case 0x5F: //RESET-BARREL
00042F                     A  1863    _17_L_104:
                           A  1864    .line 495
                           A  1865    ;  496				case 0x60: //POWERUP-REPLY
00042F                     A  1866    _17_L_105:
                           A  1867    .line 496
                           A  1868    ;  497				case 0x80: //RADAR-REPLY
00042F                     A  1869    _17_L_106:
                           A  1870    .line 497
                           A  1871    ;  498				case 0xA0: //MASTER-REPLY
00042F                     A  1872    _17_L_107:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  37


PC     Object              I  Line    Source main.src
                           A  1873    .line 498
                           A  1874    ;  499				case 0xC0: //RHOST-REPLY
00042F                     A  1875    _17_L_108:
                           A  1876    .line 499
                           A  1877    ;  500					//Any of these results 
                           A  1878    ;  501					rxedResetBarrel();
                           A  1879    .line 501
00042F D6 02E6             A  1880    	CALL	_rxedResetBarrel
                           A  1881    ;  502					break;
                           A  1882    .line 502
000432 8B 08               A  1883    	JR	_17_L_112
                           A  1884    ;  503				case 0x40:
000434                     A  1885    _17_L_109:
                           A  1886    .line 503
                           A  1887    ;  504					//BARREL-SEEN
                           A  1888    ;  505					rxedBarrelSeen();
                           A  1889    .line 505
000434 D6 031C             A  1890    	CALL	_rxedBarrelSeen
                           A  1891    ;  506					break;
                           A  1892    .line 506
000437 8B 03               A  1893    	JR	_17_L_112
                           A  1894    ;  507				case 0x41:
000439                     A  1895    _17_L_110:
                           A  1896    .line 507
                           A  1897    ;  508					//BARREL-ACK
                           A  1898    ;  509					rxedBarrelAck();
                           A  1899    .line 509
000439 D6 032A             A  1900    	CALL	_rxedBarrelAck
                           A  1901    ;  510					break;
                           A  1902    ;  511				default:
                           A  1903    ;  512					//Nothing we know how t
                           A  1904    ;  513					break;
                           A  1905    ;  514			}
00043C                     A  1906    _17_L_112:
                           A  1907    .line 514
                           A  1908    ;  515			captureBuffer.size = 0;
                           A  1909    .line 515
00043C E9000011            A  1910    	LDX	_captureBuffer+17,#-0
                           A  1911    ;  516		}
                           A  1912    ;  517	}
000440                     A  1913    _17_L_114:
                           A  1914    .line 517
000440 D6 0000             A  1915    	CALL	__b_framereset
000443 AF                  A  1916    	RET	
                           A  1917    .endfunc "receiveSomething",517,"_receiveSometh
                           A  1918    	SEGMENT ROM_DATA
                           A  1919    
                           A  1920    
                           A  1921    ;**************************** _main ***********
                           A  1922    ;Name                         Addr/Register   S
                           A  1923    ;_sendLoadSpecial                    STATIC    
                           A  1924    ;_reloadCooldown                     STATIC    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  38


PC     Object              I  Line    Source main.src
                           A  1925    ;_weAreReloading                     STATIC    
                           A  1926    ;_weAreRegistered                    STATIC    
                           A  1927    ;_btn_pressed                        STATIC    
                           A  1928    ;_captureBuffer                      STATIC    
                           A  1929    
                           A  1930    
                           A  1931    ; Aggregate Stack Size: 0 (words)
                           A  1932    
                           A  1933    
                           A  1934    	.FRAME _n_main,?_n_main,RDATA
                           A  1935    	.FCALL _n_init_cpu
                           A  1936    	.FCALL _n_receiveSomething
                           A  1937    	.FCALL _n_sendSomething
                           A  1938    	.FRAME _f_main,?_f_main,EDATA
                           A  1939    	.FCALL _f_init_cpu
                           A  1940    	.FCALL _f_receiveSomething
                           A  1941    	.FCALL _f_sendSomething
                           A  1942    	SEGMENT main_TEXT
000444                     A  1943    _main:
                           A  1944    .define "_main"
                           A  1945    .value _main
                           A  1946    .class 2
                           A  1947    .type 65
                           A  1948    .type 0
                           A  1949    .endef
                           A  1950    .begfunc "main",519,"_main"
000444 D6 0000             A  1951    	CALL	__b_frameset00
                           A  1952    ;  518	
                           A  1953    ;  519	void main(void) {
                           A  1954    ;  520		unsigned char i;
                           A  1955    ;  521		init_cpu();
                           A  1956    .line 521
000447 D6 01B6             A  1957    	CALL	_init_cpu
                           A  1958    ;  522		
                           A  1959    ;  523		//Initialize the checksum.
                           A  1960    ;  524		captureBuffer.checksum = 0xFF;
                           A  1961    .line 524
00044A E9FF0012            A  1962    	LDX	_captureBuffer+18,#255
                           A  1963    ;  525		
                           A  1964    ;  526		while(1) {
00044E                     A  1965    _18_L_119:
                           A  1966    .line 526
                           A  1967    ;  527			//Do stuff here. Not sure what 
                           A  1968    ;  528			
                           A  1969    ;  529			//Debugging thingy.
                           A  1970    ;  530			/*if(!ser_tx_size) {
                           A  1971    ;  531	            //No block ready to TX. Stu
                           A  1972    ;  532	            ser_tx_buffer[0] = 0xAA;
                           A  1973    ;  533				ser_tx_buffer[1] = 0x55;
                           A  1974    ;  534				ser_tx_buffer[2] = 0xAA;
                           A  1975    ;  535				ser_tx_buffer[3] = 0x55;
                           A  1976    ;  536	            ser_tx_size = 4;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  39


PC     Object              I  Line    Source main.src
                           A  1977    ;  537				IRQ0 |= 0x08;
                           A  1978    ;  538	        } else {
                           A  1979    ;  539				if(!(U0STAT0 ^ 0x06)) {
                           A  1980    ;  540					IRQ0 |= 0x08;
                           A  1981    ;  541				}
                           A  1982    ;  542			}*/
                           A  1983    ;  543			
                           A  1984    ;  544			//More debugging stuff.
                           A  1985    ;  545			//Echo everything back to the t
                           A  1986    ;  546			//Should put it in factory test
                           A  1987    ;  547			/*if((ser_rx_size & 0x80) && !s
                           A  1988    ;  548	            //Block received.
                           A  1989    ;  549	            //Echo it back for testing.
                           A  1990    ;  550	            unsigned char rx_size = (se
                           A  1991    ;  551				int i;
                           A  1992    ;  552				
                           A  1993    ;  553	            for(i = 0; i < rx_size;i++)
                           A  1994    ;  554	                ser_tx_buffer[i] = ser_
                           A  1995    ;  555	            }
                           A  1996    ;  556				
                           A  1997    ;  557	            ser_tx_size = rx_size;
                           A  1998    ;  558	            ser_rx_size = 0;
                           A  1999    ;  559				IRQ0 |= 0x08;
                           A  2000    ;  560	        } else {
                           A  2001    ;  561				if(!(U0STAT0 ^ 0x06)) {
                           A  2002    ;  562					IRQ0 |= 0x08;
                           A  2003    ;  563				}
                           A  2004    ;  564			}*/
                           A  2005    ;  565			
                           A  2006    ;  566			receiveSomething();
                           A  2007    .line 566
00044E D6 0413             A  2008    	CALL	_receiveSomething
                           A  2009    ;  567			sendSomething();
                           A  2010    .line 567
000451 D6 03BF             A  2011    	CALL	_sendSomething
                           A  2012    ;  568			if(btn_pressed && weAreRegister
                           A  2013    .line 568
000454 A900002C            A  2014    	CPX	_btn_pressed,#-0
000458 6B F4               A  2015    	JR	Z,_18_L_119
00045A A9000043            A  2016    	CPX	_weAreRegistered,#-0
00045E 6B EE               A  2017    	JR	Z,_18_L_119
                           A  2018    ;  569				btn_pressed = 0;
                           A  2019    .line 569
000460 E900002C            A  2020    	LDX	_btn_pressed,#-0
                           A  2021    ;  570				if(!weAreReloading && !relo
                           A  2022    .line 570
000464 A9000044            A  2023    	CPX	_weAreReloading,#-0
000468 EB E4               A  2024    	JR	NE,_18_L_119
00046A 840045              A  2025    	LDX	R0,_reloadCooldown
00046D 841046              A  2026    	LDX	R1,_reloadCooldown+1
000470 4201                A  2027    	OR	R0,R1
000472 EB DA               A  2028    	JR	NE,_18_L_119
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  40


PC     Object              I  Line    Source main.src
                           A  2029    ;  571					sendLoadSpecial = 1;
                           A  2030    .line 571
000474 E9010041            A  2031    	LDX	_sendLoadSpecial,#1
                           A  2032    ;  572				}
                           A  2033    ;  573			}
                           A  2034    ;  574		}
                           A  2035    .line 574
000478 8B D4               A  2036    	JR	_18_L_119
                           A  2037    .line 575
00047A D6 0000             A  2038    	CALL	__b_framereset
00047D AF                  A  2039    	RET	
                           A  2040    .endfunc "main",575,"_main"
00000C 008E                A  2041    	VECTOR	TIMER0=_isr_timer0
000010 0047                A  2042    	VECTOR	UART0_TX=_isr_uarttx
00000E 0000                A  2043    	VECTOR	UART0_RX=_isr_uartrx
                           A  2044    	XREF __b_ucase:ROM
                           A  2045    	XREF __b_framereset:ROM
                           A  2046    	XREF __b_iframereset:ROM
                           A  2047    	XREF __b_frameset00:ROM
                           A  2048    	XREF __b_iframeset00:ROM
                           A  2049    	XDEF _main
                           A  2050    	XDEF _receiveSomething
                           A  2051    	XDEF _sendSomething
                           A  2052    	XDEF _ArmSpecial
                           A  2053    	XDEF _LoadSpecial
                           A  2054    	XDEF _BarrelReply
                           A  2055    	XDEF _rxedBarrelAck
                           A  2056    	XDEF _rxedBarrelSeen
                           A  2057    	XDEF _rxedRollCall
                           A  2058    	XDEF _rxedResetBarrel
                           A  2059    	XDEF _loadAmmo
                           A  2060    	XDEF _queueChecksum
                           A  2061    	XDEF _queueByte
                           A  2062    	XDEF _sendQueue
                           A  2063    	XDEF _init_cpu
                           A  2064    	XDEF _isr_timer0
                           A  2065    	XDEF _isr_uarttx
                           A  2066    	XDEF _isr_uartrx
                           A  2067    	XDEF _reloadCooldown
                           A  2068    	XDEF _weAreReloading
                           A  2069    	XDEF _weAreRegistered
                           A  2070    	XDEF _sendArmSpecial
                           A  2071    	XDEF _sendLoadSpecial
                           A  2072    	XDEF _sendBarrelReply
                           A  2073    	XDEF _temp_tx_size
                           A  2074    	XDEF _temp_tx_buffer
                           A  2075    	XDEF _lastIO
                           A  2076    	XDEF _tempIO
                           A  2077    	XDEF _btn_pressed
                           A  2078    	XDEF _btn_prelim
                           A  2079    	XDEF _btn_counter
                           A  2080    	XDEF _ir_loaded_tags
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 14-Dec-13     09:44:58     page:  41


PC     Object              I  Line    Source main.src
                           A  2081    	XDEF _ir_rx_bits
                           A  2082    	XDEF _ir_rx_counter
                           A  2083    	XDEF _ser_tx_currentbyte
                           A  2084    	XDEF _ser_tx_cooldown
                           A  2085    	XDEF _ser_tx_size
                           A  2086    	XDEF _ser_tx_buffer
                           A  2087    	XDEF _ser_rx_eob_counter
                           A  2088    	XDEF _captureBuffer
                           A  2089    	END


Errors: 0
Warnings: 0
Lines Assembled: 2090
