Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -fastcall -const=RAM -mo
                           A     3    ; -nooptlink -regvar -reduceopt -debug -norevaa
                           A     4    ; -alias 
                           A     5    	DEFINE main_TEXT,SPACE=ROM
                           A     6    	FILE	"..\..\LTX-RA~1\MAIN.C"
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_BSS
000000                     A     9    _captureBuffer:
000000                     A    10    	DS	19
                           A    11    .define "captureBuffer"
                           A    12    .alias "_captureBuffer"
                           A    13    .class 83
                           A    14    .value _captureBuffer
                           A    15    .tag "ser_rx"
                           A    16    .type 8
                           A    17    .type 0
                           A    18    .endef
                           A    19    	SEGMENT main_TEXT
                           A    20    .begrec "ser_rx",19
                           A    21    .define "hasrxed"
                           A    22    .value 0
                           A    23    .class 8
                           A    24    .type 12
                           A    25    .type 0
                           A    26    .endef
                           A    27    .define "buffer"
                           A    28    .value 1
                           A    29    .class 8
                           A    30    .dim 16
                           A    31    .type 108
                           A    32    .type 0
                           A    33    .endef
                           A    34    .define "size"
                           A    35    .value 17
                           A    36    .class 8
                           A    37    .type 12
                           A    38    .type 0
                           A    39    .endef
                           A    40    .define "checksum"
                           A    41    .value 18
                           A    42    .class 8
                           A    43    .type 12
                           A    44    .type 0
                           A    45    .endef
                           A    46    .endrec "ser_rx"
                           A    47    	SEGMENT FAR_BSS
000013                     A    48    _ser_rx_eob_counter:
000013                     A    49    	DS	1
                           A    50    .define "ser_rx_eob_counter"
                           A    51    .alias "_ser_rx_eob_counter"
                           A    52    .class 83
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .value _ser_rx_eob_counter
                           A    54    .type 12
                           A    55    .type 0
                           A    56    .endef
000014                     A    57    _ser_tx_buffer:
000014                     A    58    	DS	16
                           A    59    .define "ser_tx_buffer"
                           A    60    .alias "_ser_tx_buffer"
                           A    61    .class 83
                           A    62    .value _ser_tx_buffer
                           A    63    .dim 16
                           A    64    .type 108
                           A    65    .type 0
                           A    66    .endef
000024                     A    67    _ser_tx_size:
000024                     A    68    	DS	1
                           A    69    .define "ser_tx_size"
                           A    70    .alias "_ser_tx_size"
                           A    71    .class 83
                           A    72    .value _ser_tx_size
                           A    73    .type 12
                           A    74    .type 0
                           A    75    .endef
000025                     A    76    _ser_tx_cooldown:
000025                     A    77    	DS	1
                           A    78    .define "ser_tx_cooldown"
                           A    79    .alias "_ser_tx_cooldown"
                           A    80    .class 83
                           A    81    .value _ser_tx_cooldown
                           A    82    .type 12
                           A    83    .type 0
                           A    84    .endef
000026                     A    85    _ser_tx_currentbyte:
000026                     A    86    	DS	1
                           A    87    .define "ser_tx_currentbyte"
                           A    88    .alias "_ser_tx_currentbyte"
                           A    89    .class 83
                           A    90    .value _ser_tx_currentbyte
                           A    91    .type 12
                           A    92    .type 0
                           A    93    .endef
000027                     A    94    _ir_rx_counter:
000027                     A    95    	DS	1
                           A    96    .define "ir_rx_counter"
                           A    97    .alias "_ir_rx_counter"
                           A    98    .class 83
                           A    99    .value _ir_rx_counter
                           A   100    .type 12
                           A   101    .type 0
                           A   102    .endef
000028                     A   103    _ir_rx_bits:
000028                     A   104    	DS	1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .define "ir_rx_bits"
                           A   106    .alias "_ir_rx_bits"
                           A   107    .class 83
                           A   108    .value _ir_rx_bits
                           A   109    .type 12
                           A   110    .type 0
                           A   111    .endef
000029                     A   112    _ir_loaded_tags:
000029                     A   113    	DS	1
                           A   114    .define "ir_loaded_tags"
                           A   115    .alias "_ir_loaded_tags"
                           A   116    .class 83
                           A   117    .value _ir_loaded_tags
                           A   118    .type 12
                           A   119    .type 0
                           A   120    .endef
00002A                     A   121    _btn_counter:
00002A                     A   122    	DS	1
                           A   123    .define "btn_counter"
                           A   124    .alias "_btn_counter"
                           A   125    .class 83
                           A   126    .value _btn_counter
                           A   127    .type 12
                           A   128    .type 0
                           A   129    .endef
00002B                     A   130    _btn_prelim:
00002B                     A   131    	DS	1
                           A   132    .define "btn_prelim"
                           A   133    .alias "_btn_prelim"
                           A   134    .class 83
                           A   135    .value _btn_prelim
                           A   136    .type 12
                           A   137    .type 0
                           A   138    .endef
00002C                     A   139    _btn_pressed:
00002C                     A   140    	DS	1
                           A   141    .define "btn_pressed"
                           A   142    .alias "_btn_pressed"
                           A   143    .class 83
                           A   144    .value _btn_pressed
                           A   145    .type 12
                           A   146    .type 0
                           A   147    .endef
00002D                     A   148    _tempIO:
00002D                     A   149    	DS	1
                           A   150    .define "tempIO"
                           A   151    .alias "_tempIO"
                           A   152    .class 83
                           A   153    .value _tempIO
                           A   154    .type 12
                           A   155    .type 0
                           A   156    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   4


PC     Object              I  Line    Source main.src
00002E                     A   157    _lastIO:
00002E                     A   158    	DS	1
                           A   159    .define "lastIO"
                           A   160    .alias "_lastIO"
                           A   161    .class 83
                           A   162    .value _lastIO
                           A   163    .type 12
                           A   164    .type 0
                           A   165    .endef
00002F                     A   166    _temp_tx_buffer:
00002F                     A   167    	DS	16
                           A   168    .define "temp_tx_buffer"
                           A   169    .alias "_temp_tx_buffer"
                           A   170    .class 83
                           A   171    .value _temp_tx_buffer
                           A   172    .dim 16
                           A   173    .type 108
                           A   174    .type 0
                           A   175    .endef
00003F                     A   176    _temp_tx_size:
00003F                     A   177    	DS	1
                           A   178    .define "temp_tx_size"
                           A   179    .alias "_temp_tx_size"
                           A   180    .class 83
                           A   181    .value _temp_tx_size
                           A   182    .type 12
                           A   183    .type 0
                           A   184    .endef
000040                     A   185    _sendBarrelReply:
000040                     A   186    	DS	1
                           A   187    .define "sendBarrelReply"
                           A   188    .alias "_sendBarrelReply"
                           A   189    .class 83
                           A   190    .value _sendBarrelReply
                           A   191    .type 12
                           A   192    .type 0
                           A   193    .endef
000041                     A   194    _sendLoadSpecial:
000041                     A   195    	DS	1
                           A   196    .define "sendLoadSpecial"
                           A   197    .alias "_sendLoadSpecial"
                           A   198    .class 83
                           A   199    .value _sendLoadSpecial
                           A   200    .type 12
                           A   201    .type 0
                           A   202    .endef
000042                     A   203    _sendArmSpecial:
000042                     A   204    	DS	1
                           A   205    .define "sendArmSpecial"
                           A   206    .alias "_sendArmSpecial"
                           A   207    .class 83
                           A   208    .value _sendArmSpecial
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   5


PC     Object              I  Line    Source main.src
                           A   209    .type 12
                           A   210    .type 0
                           A   211    .endef
000043                     A   212    _weAreRegistered:
000043                     A   213    	DS	1
                           A   214    .define "weAreRegistered"
                           A   215    .alias "_weAreRegistered"
                           A   216    .class 83
                           A   217    .value _weAreRegistered
                           A   218    .type 12
                           A   219    .type 0
                           A   220    .endef
000044                     A   221    _weAreReloading:
000044                     A   222    	DS	1
                           A   223    .define "weAreReloading"
                           A   224    .alias "_weAreReloading"
                           A   225    .class 83
                           A   226    .value _weAreReloading
                           A   227    .type 12
                           A   228    .type 0
                           A   229    .endef
000045                     A   230    _reloadCooldown:
000045                     A   231    	DS	2*1
                           A   232    .define "reloadCooldown"
                           A   233    .alias "_reloadCooldown"
                           A   234    .class 83
                           A   235    .value _reloadCooldown
                           A   236    .type 13
                           A   237    .type 0
                           A   238    .endef
                           A   239    	SEGMENT ROM_DATA
                           A   240    
                           A   241    
                           A   242    ;**************************** _isr_uartrx *****
                           A   243    ;Name                         Addr/Register   S
                           A   244    ;_ser_rx_eob_counter                 STATIC    
                           A   245    ;_captureBuffer                      STATIC    
                           A   246    ;temp                                    R0    
                           A   247    
                           A   248    
                           A   249    ; Aggregate Stack Size: 0 (words)
                           A   250    
                           A   251    
                           A   252    	.FRAME _n_isr_uartrx,?_n_isr_uartrx,RDATA
                           A   253    	.FRAME _f_isr_uartrx,?_f_isr_uartrx,EDATA
                           A   254    	SEGMENT main_TEXT
000000                     A   255    _isr_uartrx:
                           A   256    .define "_isr_uartrx"
                           A   257    .value _isr_uartrx
                           A   258    .class 2
                           A   259    .type 65
                           A   260    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   6


PC     Object              I  Line    Source main.src
                           A   261    .endef
                           A   262    .begfunc "isr_uartrx",84,"_isr_uartrx"
                           A   263    ;    1	/*
                           A   264    ;    2	*   DIY LTX RapidFire
                           A   265    ;    3	*   Copyright (C) 2013  Ryan L. "Izzy84
                           A   266    ;    4	*
                           A   267    ;    5	*    This program is free software; you
                           A   268    ;    6	*    it under the terms of the GNU Gene
                           A   269    ;    7	*    the Free Software Foundation; eith
                           A   270    ;    8	*    (at your option) any later version
                           A   271    ;    9	*
                           A   272    ;   10	*    This program is distributed in the
                           A   273    ;   11	*    but WITHOUT ANY WARRANTY; without 
                           A   274    ;   12	*    MERCHANTABILITY or FITNESS FOR A P
                           A   275    ;   13	*    GNU General Public License for mor
                           A   276    ;   14	*
                           A   277    ;   15	*    You should have received a copy of
                           A   278    ;   16	*    with this program; if not, write t
                           A   279    ;   17	*    51 Franklin Street, Fifth Floor, B
                           A   280    ;   18	*/
                           A   281    ;   19	
                           A   282    ;   20	#include <ez8.h>
                           A   283    ;   21	
                           A   284    ;   22	#define WEAPONTYPE 1		/* 	1: Mach
                           A   285    ;   23									2: Snip
                           A   286    ;   24								*/
                           A   287    ;   25	
                           A   288    ;   26	#if WEAPONTYPE==1
                           A   289    ;   27		//Machinegun
                           A   290    ;   28		#define DOUBLETAPS 0
                           A   291    ;   29		#define AMMO 15
                           A   292    ;   30		#define BURSTSIZE 15
                           A   293    ;   31		#define REFIRERATE 16
                           A   294    ;   32		#define LOADSFX 14
                           A   295    ;   33		#define FIRESFX 11
                           A   296    ;   34		#define RELOADMIDCLIP 1
                           A   297    ;   35	#endif
                           A   298    ;   36	
                           A   299    ;   37	#if WEAPONTYPE==2
                           A   300    ;   38		//Sniper
                           A   301    ;   39		#define DOUBLETAPS 1
                           A   302    ;   40		#define AMMO 15
                           A   303    ;   41		#define BURSTSIZE 5
                           A   304    ;   42		#define REFIRERATE 16
                           A   305    ;   43		#define LOADSFX 14
                           A   306    ;   44		#define FIRESFX 13
                           A   307    ;   45		#define RELOADMIDCLIP 0
                           A   308    ;   46	#endif
                           A   309    ;   47	
                           A   310    ;   48	struct ser_rx {
                           A   311    ;   49		volatile unsigned char hasrxed;
                           A   312    ;   50		volatile unsigned char buffer[16];
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   7


PC     Object              I  Line    Source main.src
                           A   313    ;   51		volatile unsigned char size;
                           A   314    ;   52		volatile unsigned char checksum;
                           A   315    ;   53	} captureBuffer;
                           A   316    ;   54	
                           A   317    ;   55	volatile unsigned char ser_rx_eob_count
                           A   318    ;   56	
                           A   319    ;   57	volatile unsigned char ser_tx_buffer[16
                           A   320    ;   58	volatile unsigned char ser_tx_size;
                           A   321    ;   59	volatile unsigned char ser_tx_cooldown;
                           A   322    ;   60	volatile unsigned char ser_tx_currentby
                           A   323    ;   61	
                           A   324    ;   62	volatile unsigned char ir_rx_counter;
                           A   325    ;   63	volatile unsigned char ir_rx_bits;
                           A   326    ;   64	volatile unsigned char ir_loaded_tags;
                           A   327    ;   65	
                           A   328    ;   66	volatile unsigned char btn_counter;
                           A   329    ;   67	volatile unsigned char btn_prelim;
                           A   330    ;   68	volatile unsigned char btn_pressed;
                           A   331    ;   69	
                           A   332    ;   70	volatile unsigned char tempIO;
                           A   333    ;   71	volatile unsigned char lastIO;
                           A   334    ;   72	
                           A   335    ;   73	volatile unsigned char temp_tx_buffer[1
                           A   336    ;   74	volatile unsigned char temp_tx_size;
                           A   337    ;   75	
                           A   338    ;   76	volatile unsigned char sendBarrelReply;
                           A   339    ;   77	volatile unsigned char sendLoadSpecial;
                           A   340    ;   78	volatile unsigned char sendArmSpecial;
                           A   341    ;   79	volatile unsigned char weAreRegistered;
                           A   342    ;   80	volatile unsigned char weAreReloading;
                           A   343    ;   81	
                           A   344    ;   82	volatile unsigned int reloadCooldown;
                           A   345    ;   83	
                           A   346    ;   84	void interrupt isr_uartrx(void) {
                           A   347    .define "temp"
                           A   348    .class 4
                           A   349    .reg 1
                           A   350    .type 12
                           A   351    .type 0
                           A   352    .endef
000000 C8FFD0              A   353    	PUSHX	4093
000003 D6 0000             A   354    	CALL	__b_iframeset00
                           A   355    ;   85		unsigned char temp;
                           A   356    ;   86		
                           A   357    ;   87		temp = U0RXD;
                           A   358    .line 87
000006 840F40              A   359    	LDX	R0,3904
                           A   360    ;   88		//Byte received
                           A   361    ;   89		if((U0STAT0 & 0x78) == 0x78) {
                           A   362    .line 89
000009 841F41              A   363    	LDX	R1,3905
00000C 56E178              A   364    	AND	R1,#120
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   8


PC     Object              I  Line    Source main.src
00000F E4E1E2              A   365    	LD	R2,R1
000012 A6E178              A   366    	CP	R1,#120
000015 6B 2C               A   367    	JR	Z,_1_L_5
                           A   368    ;   90			//Error. Do nothing.
                           A   369    ;   91			return;
                           A   370    .line 91
                           A   371    ;   92		} else {
                           A   372    .line 92
                           A   373    ;   93			//If the interrupt was because 
                           A   374    ;   94			if(!(captureBuffer.size & 0x80)
                           A   375    .line 94
000017 79800011            A   376    	TMX	_captureBuffer+17,#128
00001B EB 22               A   377    	JR	NE,_1_L_4
                           A   378    ;   95				//If we're not waiting for 
                           A   379    ;   96				captureBuffer.buffer[captur
                           A   380    .line 96
00001D 841011              A   381    	LDX	R1,_captureBuffer+17
000020 E4E1E2              A   382    	LD	R2,R1
000023 2C 00               A   383    	LD	R2,#high(_captureBuffer+1)
000025 3C 01               A   384    	LD	R3,#low(_captureBuffer+1)
000027 0231                A   385    	ADD	R3,R1
000029 16E200              A   386    	ADC	R2,#0
00002C 96E0E2              A   387    	LDX	@RR2,R0
00002F 09010011            A   388    	ADDX	_captureBuffer+17,#1
                           A   389    ;   97				captureBuffer.checksum -= t
                           A   390    .line 97
000033 28EE0012            A   391    	SUBX	_captureBuffer+18,R0
                           A   392    ;   98				//captureBuffer[captureBuff
                           A   393    ;   99				ser_rx_eob_counter = 0;
                           A   394    .line 99
000037 E9000013            A   395    	LDX	_ser_rx_eob_counter,#-0
                           A   396    ;  100				captureBuffer.hasrxed = 1;
                           A   397    .line 100
00003B E9010000            A   398    	LDX	_captureBuffer,#1
                           A   399    ;  101			}
                           A   400    ;  102		}
00003F                     A   401    _1_L_4:
                           A   402    .line 102
                           A   403    ;  103		//Clear the interrupt bit
                           A   404    ;  104		IRQ0 &= 0xEF;
                           A   405    .line 104
00003F 59EF0FC0            A   406    	ANDX	4032,#239
                           A   407    ;  105	}
000043                     A   408    _1_L_5:
                           A   409    .line 105
000043 D6 0000             A   410    	CALL	__b_iframereset
000046 BF                  A   411    	IRET	
                           A   412    .endfunc "isr_uartrx",105,"_isr_uartrx"
                           A   413    	SEGMENT ROM_DATA
                           A   414    
                           A   415    
                           A   416    ;**************************** _isr_uarttx *****
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:   9


PC     Object              I  Line    Source main.src
                           A   417    ;Name                         Addr/Register   S
                           A   418    ;_ser_tx_buffer                      STATIC    
                           A   419    ;_ser_tx_currentbyte                 STATIC    
                           A   420    ;_ser_tx_cooldown                    STATIC    
                           A   421    ;_ser_tx_size                        STATIC    
                           A   422    
                           A   423    
                           A   424    ; Aggregate Stack Size: 0 (words)
                           A   425    
                           A   426    
                           A   427    	.FRAME _n_isr_uarttx,?_n_isr_uarttx,RDATA
                           A   428    	.FRAME _f_isr_uarttx,?_f_isr_uarttx,EDATA
                           A   429    	SEGMENT main_TEXT
000047                     A   430    _isr_uarttx:
                           A   431    .define "_isr_uarttx"
                           A   432    .value _isr_uarttx
                           A   433    .class 2
                           A   434    .type 65
                           A   435    .type 0
                           A   436    .endef
                           A   437    .begfunc "isr_uarttx",107,"_isr_uarttx"
000047 C8FFD0              A   438    	PUSHX	4093
00004A D6 0000             A   439    	CALL	__b_iframeset00
                           A   440    ;  106	
                           A   441    ;  107	void interrupt isr_uarttx(void) {
                           A   442    ;  108		//Ready to transmit a byte
                           A   443    ;  109		if(ser_tx_size && !ser_tx_cooldown)
                           A   444    .line 109
00004D A9000024            A   445    	CPX	_ser_tx_size,#-0
000051 6B 33               A   446    	JR	Z,_2_L_11
000053 A9000025            A   447    	CPX	_ser_tx_cooldown,#-0
000057 EB 2D               A   448    	JR	NE,_2_L_11
                           A   449    ;  110	        //If there's something in the t
                           A   450    ;  111			if(ser_tx_currentbyte == ser_tx
                           A   451    .line 111
000059 A8 024026           A   452    	CPX	_ser_tx_currentbyte,_ser_tx_size
00005D EB 0E               A   453    	JR	NE,_2_L_9
                           A   454    ;  112				//That was the last byte th
                           A   455    ;  113				ser_tx_currentbyte = 0;
                           A   456    .line 113
00005F E9000026            A   457    	LDX	_ser_tx_currentbyte,#-0
                           A   458    ;  114				ser_tx_size = 0;
                           A   459    .line 114
000063 E9000024            A   460    	LDX	_ser_tx_size,#-0
                           A   461    ;  115				ser_tx_cooldown = 116; //Si
                           A   462    .line 115
000067 E9740025            A   463    	LDX	_ser_tx_cooldown,#116
                           A   464    ;  116										//,
                           A   465    ;  117										//,
                           A   466    ;  118										//T
                           A   467    ;  119										//T
                           A   468    ;  120			} else {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  10


PC     Object              I  Line    Source main.src
                           A   469    .line 120
00006B 8B 19               A   470    	JR	_2_L_11
00006D                     A   471    _2_L_9:
                           A   472    ;  121				//There's still bytes to se
                           A   473    ;  122				U0TXD = ser_tx_buffer[ser_t
                           A   474    .line 122
00006D 842026              A   475    	LDX	R2,_ser_tx_currentbyte
000070 0C 00               A   476    	LD	R0,#high(_ser_tx_buffer)
000072 1C 14               A   477    	LD	R1,#low(_ser_tx_buffer)
000074 0212                A   478    	ADD	R1,R2
000076 16E000              A   479    	ADC	R0,#0
000079 86E0E2              A   480    	LDX	R2,@RR0
00007C 942F40              A   481    	LDX	3904,R2
                           A   482    ;  123				ser_tx_currentbyte++;
                           A   483    .line 123
00007F 840026              A   484    	LDX	R0,_ser_tx_currentbyte
000082 09010026            A   485    	ADDX	_ser_tx_currentbyte,#1
                           A   486    ;  124			}
                           A   487    ;  125		}
000086                     A   488    _2_L_11:
                           A   489    .line 125
                           A   490    ;  126		//Clear the interrupt bit.
                           A   491    ;  127		IRQ0 &= 0xF7;
                           A   492    .line 127
000086 59F70FC0            A   493    	ANDX	4032,#247
                           A   494    ;  128	}
                           A   495    .line 128
00008A D6 0000             A   496    	CALL	__b_iframereset
00008D BF                  A   497    	IRET	
                           A   498    .endfunc "isr_uarttx",128,"_isr_uarttx"
                           A   499    	SEGMENT ROM_DATA
                           A   500    
                           A   501    
                           A   502    ;**************************** _isr_timer0 *****
                           A   503    ;Name                         Addr/Register   S
                           A   504    ;_ir_loaded_tags                     STATIC    
                           A   505    ;_ir_rx_counter                      STATIC    
                           A   506    ;_ir_rx_bits                         STATIC    
                           A   507    ;_btn_pressed                        STATIC    
                           A   508    ;_btn_prelim                         STATIC    
                           A   509    ;_btn_counter                        STATIC    
                           A   510    ;_captureBuffer                      STATIC    
                           A   511    ;_reloadCooldown                     STATIC    
                           A   512    ;_ser_tx_cooldown                    STATIC    
                           A   513    ;_ser_rx_eob_counter                 STATIC    
                           A   514    ;_lastIO                             STATIC    
                           A   515    ;_tempIO                             STATIC    
                           A   516    
                           A   517    
                           A   518    ; Aggregate Stack Size: 0 (words)
                           A   519    
                           A   520    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  11


PC     Object              I  Line    Source main.src
                           A   521    	.FRAME _n_isr_timer0,?_n_isr_timer0,RDATA
                           A   522    	.FRAME _f_isr_timer0,?_f_isr_timer0,EDATA
                           A   523    	SEGMENT main_TEXT
00008E                     A   524    _isr_timer0:
                           A   525    .define "_isr_timer0"
                           A   526    .value _isr_timer0
                           A   527    .class 2
                           A   528    .type 65
                           A   529    .type 0
                           A   530    .endef
                           A   531    .begfunc "isr_timer0",130,"_isr_timer0"
00008E C8FFD0              A   532    	PUSHX	4093
000091 D6 0000             A   533    	CALL	__b_iframeset00
                           A   534    ;  129	
                           A   535    ;  130	void interrupt isr_timer0(void) {
                           A   536    ;  131		//4KHz interrupt.
                           A   537    ;  132		
                           A   538    ;  133		lastIO = tempIO;
                           A   539    .line 133
000094 E8 02D02E           A   540    	LDX	_lastIO,_tempIO
                           A   541    ;  134		tempIO = PAIN;
                           A   542    .line 134
000098 E8FD202D            A   543    	LDX	_tempIO,4050
                           A   544    ;  135		
                           A   545    ;  136		//Various 1/8ms timers
                           A   546    ;  137		ser_rx_eob_counter += 1;
                           A   547    .line 137
00009C 09010013            A   548    	ADDX	_ser_rx_eob_counter,#1
                           A   549    ;  138		if(ser_tx_cooldown) {
                           A   550    .line 138
0000A0 A9000025            A   551    	CPX	_ser_tx_cooldown,#-0
0000A4 6B 04               A   552    	JR	Z,_3_L_15
                           A   553    ;  139			ser_tx_cooldown -= 1;
                           A   554    .line 139
0000A6 29010025            A   555    	SUBX	_ser_tx_cooldown,#1
                           A   556    ;  140		}
0000AA                     A   557    _3_L_15:
                           A   558    .line 140
                           A   559    ;  141		if(reloadCooldown) {
                           A   560    .line 141
0000AA 840045              A   561    	LDX	R0,_reloadCooldown
0000AD 841046              A   562    	LDX	R1,_reloadCooldown+1
0000B0 4201                A   563    	OR	R0,R1
0000B2 6B 08               A   564    	JR	Z,_3_L_21
                           A   565    ;  142			reloadCooldown -= 1;
                           A   566    .line 142
0000B4 29010046            A   567    	SUBX	_reloadCooldown+1,#1
0000B8 39000045            A   568    	SBCX	_reloadCooldown,#-0
                           A   569    ;  143		}
0000BC                     A   570    _3_L_21:
                           A   571    .line 143
                           A   572    ;  144		
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  12


PC     Object              I  Line    Source main.src
                           A   573    ;  145		//Serial RX end-of-block stuff.
                           A   574    ;  146		//if((ser_rx_eob_counter == 30) && 
                           A   575    ;  147		if((ser_rx_eob_counter == 60) && ca
                           A   576    .line 147
0000BC A93C0013            A   577    	CPX	_ser_rx_eob_counter,#60
0000C0 EB 1E               A   578    	JR	NE,_3_L_29
0000C2 A9000000            A   579    	CPX	_captureBuffer,#-0
0000C6 6B 18               A   580    	JR	Z,_3_L_29
                           A   581    ;  148	        captureBuffer.hasrxed = 0;
                           A   582    .line 148
0000C8 E9000000            A   583    	LDX	_captureBuffer,#-0
                           A   584    ;  149	        if(!captureBuffer.checksum) {
                           A   585    .line 149
0000CC A9000012            A   586    	CPX	_captureBuffer+18,#-0
0000D0 EB 06               A   587    	JR	NE,_3_L_18
                           A   588    ;  150	            captureBuffer.size |= 0x80;
                           A   589    .line 150
0000D2 49800011            A   590    	ORX	_captureBuffer+17,#128
                           A   591    ;  151	        } else {
                           A   592    .line 151
0000D6 8B 04               A   593    	JR	_3_L_19
0000D8                     A   594    _3_L_18:
                           A   595    ;  152	            captureBuffer.size = 0;
                           A   596    .line 152
0000D8 E9000011            A   597    	LDX	_captureBuffer+17,#-0
                           A   598    ;  153	        }
0000DC                     A   599    _3_L_19:
                           A   600    .line 153
                           A   601    ;  154	        captureBuffer.checksum = 0xFF;
                           A   602    .line 154
0000DC E9FF0012            A   603    	LDX	_captureBuffer+18,#255
                           A   604    ;  155	    }
0000E0                     A   605    _3_L_29:
                           A   606    .line 155
                           A   607    ;  156		
                           A   608    ;  157		//Button stuff
                           A   609    ;  158		if((tempIO & 0x01) != (lastIO & 0x0
                           A   610    .line 158
0000E0 84002D              A   611    	LDX	R0,_tempIO
0000E3 56E001              A   612    	AND	R0,#1
0000E6 84102E              A   613    	LDX	R1,_lastIO
0000E9 56E101              A   614    	AND	R1,#1
0000EC A201                A   615    	CP	R0,R1
0000EE 6B 16               A   616    	JR	Z,_3_L_28
                           A   617    ;  159	        //Button state changed, clear t
                           A   618    ;  160	        btn_counter = 0;
                           A   619    .line 160
0000F0 E900002A            A   620    	LDX	_btn_counter,#-0
                           A   621    ;  161	        if(!(tempIO & 0x01)) {
                           A   622    .line 161
0000F4 7901002D            A   623    	TMX	_tempIO,#1
0000F8 EB 06               A   624    	JR	NE,_3_L_23
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  13


PC     Object              I  Line    Source main.src
                           A   625    ;  162	            //Was just pressed
                           A   626    ;  163	            //Set a flag.
                           A   627    ;  164	            btn_prelim = 1;
                           A   628    .line 164
0000FA E901002B            A   629    	LDX	_btn_prelim,#1
                           A   630    ;  165	        } else {
                           A   631    .line 165
0000FE 8B 21               A   632    	JR	_3_L_54
000100                     A   633    _3_L_23:
                           A   634    ;  166				btn_prelim = 0;
                           A   635    .line 166
000100 E900002B            A   636    	LDX	_btn_prelim,#-0
                           A   637    ;  167			}
                           A   638    ;  168	    } else {
                           A   639    .line 168
000104 8B 1B               A   640    	JR	_3_L_54
000106                     A   641    _3_L_28:
                           A   642    ;  169	        btn_counter++;
                           A   643    .line 169
000106 84002A              A   644    	LDX	R0,_btn_counter
000109 0901002A            A   645    	ADDX	_btn_counter,#1
                           A   646    ;  170	        if(btn_prelim && (btn_counter >
                           A   647    .line 170
00010D A900002B            A   648    	CPX	_btn_prelim,#-0
000111 6B 0E               A   649    	JR	Z,_3_L_54
000113 A903002A            A   650    	CPX	_btn_counter,#3
000117 3B 08               A   651    	JR	ULE,_3_L_54
                           A   652    ;  171	            btn_prelim = 0;
                           A   653    .line 171
000119 E900002B            A   654    	LDX	_btn_prelim,#-0
                           A   655    ;  172	            btn_pressed = 1;
                           A   656    .line 172
00011D E901002C            A   657    	LDX	_btn_pressed,#1
                           A   658    ;  173	        }
                           A   659    ;  174	    }
000121                     A   660    _3_L_54:
                           A   661    .line 174
                           A   662    ;  175		
                           A   663    ;  176		//IR stuff
                           A   664    ;  177		if((tempIO & 0x08) != (lastIO & 0x0
                           A   665    .line 177
000121 84002D              A   666    	LDX	R0,_tempIO
000124 56E008              A   667    	AND	R0,#8
000127 84102E              A   668    	LDX	R1,_lastIO
00012A 56E108              A   669    	AND	R1,#8
00012D A201                A   670    	CP	R0,R1
00012F 6B 4F               A   671    	JR	Z,_3_L_53
                           A   672    ;  178			//LAZERMOD's state has changed
                           A   673    ;  179			 if(ir_rx_bits == 1) {
                           A   674    .line 179
000131 A9010028            A   675    	CPX	_ir_rx_bits,#1
000135 EB 15               A   676    	JR	NE,_3_L_42
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  14


PC     Object              I  Line    Source main.src
                           A   677    ;  180				//if((ir_rx_counter > 22) &
                           A   678    ;  181				 if((ir_rx_counter > 45) &&
                           A   679    .line 181
000137 A92D0027            A   680    	CPX	_ir_rx_counter,#45
00013B 3B 3D               A   681    	JR	ULE,_3_L_43
00013D A9330027            A   682    	CPX	_ir_rx_counter,#51
000141 FB 37               A   683    	JR	NC,_3_L_43
                           A   684    ;  182					//If it's between 5.75m
                           A   685    ;  183					ir_rx_bits++;
                           A   686    .line 183
000143 840028              A   687    	LDX	R0,_ir_rx_bits
000146 09010028            A   688    	ADDX	_ir_rx_bits,#1
                           A   689    ;  184				}
                           A   690    ;  185			 } else if(ir_rx_bits < 3) {
                           A   691    .line 185
00014A 8B 2E               A   692    	JR	_3_L_43
00014C                     A   693    _3_L_42:
00014C A9030028            A   694    	CPX	_ir_rx_bits,#3
000150 FB 15               A   695    	JR	NC,_3_L_40
                           A   696    ;  186				//if((ir_rx_counter > 10) &
                           A   697    ;  187				 if((ir_rx_counter > 21) &&
                           A   698    .line 187
000152 A9150027            A   699    	CPX	_ir_rx_counter,#21
000156 3B 22               A   700    	JR	ULE,_3_L_43
000158 A91B0027            A   701    	CPX	_ir_rx_counter,#27
00015C FB 1C               A   702    	JR	NC,_3_L_43
                           A   703    ;  188					//If it's between 2.75m
                           A   704    ;  189					ir_rx_bits++;
                           A   705    .line 189
00015E 840028              A   706    	LDX	R0,_ir_rx_bits
000161 09010028            A   707    	ADDX	_ir_rx_bits,#1
                           A   708    ;  190				}
                           A   709    ;  191			} else {
                           A   710    .line 191
000165 8B 13               A   711    	JR	_3_L_43
000167                     A   712    _3_L_40:
                           A   713    ;  192				//if((ir_rx_counter > 2) &&
                           A   714    ;  193				if((ir_rx_counter > 5) && (
                           A   715    .line 193
000167 A9050027            A   716    	CPX	_ir_rx_counter,#5
00016B 3B 0D               A   717    	JR	ULE,_3_L_43
00016D A9130027            A   718    	CPX	_ir_rx_counter,#19
000171 FB 07               A   719    	JR	NC,_3_L_43
                           A   720    ;  194					//If it's between 0.75m
                           A   721    ;  195					ir_rx_bits++;
                           A   722    .line 195
000173 840028              A   723    	LDX	R0,_ir_rx_bits
000176 09010028            A   724    	ADDX	_ir_rx_bits,#1
                           A   725    ;  196				}
                           A   726    ;  197			}
00017A                     A   727    _3_L_43:
                           A   728    .line 197
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  15


PC     Object              I  Line    Source main.src
                           A   729    ;  198			ir_rx_counter = 0;
                           A   730    .line 198
00017A E9000027            A   731    	LDX	_ir_rx_counter,#-0
                           A   732    ;  199		} else {
                           A   733    .line 199
00017E 8B 32               A   734    	JR	_3_L_55
000180                     A   735    _3_L_53:
                           A   736    ;  200			ir_rx_counter++;
                           A   737    .line 200
000180 840027              A   738    	LDX	R0,_ir_rx_counter
000183 09010027            A   739    	ADDX	_ir_rx_counter,#1
                           A   740    ;  201			//if(ir_rx_counter > 40) {
                           A   741    ;  202			if(ir_rx_counter > 64) {
                           A   742    .line 202
000187 A9400027            A   743    	CPX	_ir_rx_counter,#64
00018B 3B 25               A   744    	JR	ULE,_3_L_55
                           A   745    ;  203				//End of IR packet
                           A   746    ;  204				if(ir_rx_bits == 17) {
                           A   747    .line 204
00018D A9110028            A   748    	CPX	_ir_rx_bits,#17
000191 EB 17               A   749    	JR	NE,_3_L_50
                           A   750    ;  205					//Tag of some sort.
                           A   751    ;  206					if(ir_loaded_tags) {
                           A   752    .line 206
000193 A9000029            A   753    	CPX	_ir_loaded_tags,#-0
000197 6B 07               A   754    	JR	Z,_3_L_48
                           A   755    ;  207						ir_loaded_tags--;
                           A   756    .line 207
000199 840029              A   757    	LDX	R0,_ir_loaded_tags
00019C 29010029            A   758    	SUBX	_ir_loaded_tags,#1
                           A   759    ;  208					}
0001A0                     A   760    _3_L_48:
                           A   761    .line 208
                           A   762    ;  209					if(!ir_loaded_tags) {
                           A   763    .line 209
0001A0 A9000029            A   764    	CPX	_ir_loaded_tags,#-0
0001A4 EB 04               A   765    	JR	NE,_3_L_50
                           A   766    ;  210						//Turn off the INHI
                           A   767    ;  211						PAOUT &= 0xFD;
                           A   768    .line 211
0001A6 59FD0FD3            A   769    	ANDX	4051,#253
                           A   770    ;  212					}
                           A   771    ;  213				}
0001AA                     A   772    _3_L_50:
                           A   773    .line 213
                           A   774    ;  214				ir_rx_bits = 0;
                           A   775    .line 214
0001AA E9000028            A   776    	LDX	_ir_rx_bits,#-0
                           A   777    ;  215				ir_rx_counter = 0;
                           A   778    .line 215
0001AE E9000027            A   779    	LDX	_ir_rx_counter,#-0
                           A   780    ;  216			}
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  16


PC     Object              I  Line    Source main.src
                           A   781    ;  217		}
                           A   782    ;  218	}
0001B2                     A   783    _3_L_55:
                           A   784    .line 218
0001B2 D6 0000             A   785    	CALL	__b_iframereset
0001B5 BF                  A   786    	IRET	
                           A   787    .endfunc "isr_timer0",218,"_isr_timer0"
                           A   788    	SEGMENT ROM_DATA
                           A   789    
                           A   790    
                           A   791    ;**************************** _init_cpu *******
                           A   792    ;Name                         Addr/Register   S
                           A   793    ;_EI                                 IMPORT  --
                           A   794    ;_SET_VECTOR                         IMPORT  --
                           A   795    ;_DI                                 IMPORT  --
                           A   796    
                           A   797    
                           A   798    ; Aggregate Stack Size: 0 (words)
                           A   799    
                           A   800    
                           A   801    	.FRAME _n_init_cpu,?_n_init_cpu,RDATA
                           A   802    	.FRAME _f_init_cpu,?_f_init_cpu,EDATA
                           A   803    	SEGMENT main_TEXT
0001B6                     A   804    _init_cpu:
                           A   805    .define "_init_cpu"
                           A   806    .value _init_cpu
                           A   807    .class 2
                           A   808    .type 65
                           A   809    .type 0
                           A   810    .endef
                           A   811    .begfunc "init_cpu",220,"_init_cpu"
0001B6 D6 0000             A   812    	CALL	__b_frameset00
                           A   813    ;  219	
                           A   814    ;  220	void init_cpu(void) {
                           A   815    ;  221		DI();
                           A   816    .line 221
0001B9 8F                  A   817    	DI
                           A   818    ;  222		
                           A   819    ;  223		//PA0: RELOAD/DBG. Input, external 
                           A   820    ;  224		//PA1: INHIBIT. Output.
                           A   821    ;  225		//PA2: 38KHz. T1OUT, output.
                           A   822    ;  226		//PA3: LAZERMOD. Input.
                           A   823    ;  227		//PA4: RXD. UART, input.
                           A   824    ;  228		//PA5: TXD. UART, output.
                           A   825    ;  229		
                           A   826    ;  230		//Set up Port A.
                           A   827    ;  231		PADD = 0x19;	//00011001
                           A   828    .line 231
0001BA E9010FD0            A   829    	LDX	4048,#1
0001BE E9190FD1            A   830    	LDX	4049,#25
                           A   831    ;  232		PAAF = 0x34;	//00110100
                           A   832    .line 232
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  17


PC     Object              I  Line    Source main.src
0001C2 E9020FD0            A   833    	LDX	4048,#2
0001C6 E9340FD1            A   834    	LDX	4049,#52
                           A   835    ;  233		PAAFS1 = 0x04;	//00000100
                           A   836    .line 233
0001CA E9070FD0            A   837    	LDX	4048,#7
0001CE E9040FD1            A   838    	LDX	4049,#4
                           A   839    ;  234		PAAFS2 = 0x00;	//00000000
                           A   840    .line 234
0001D2 E9080FD0            A   841    	LDX	4048,#8
0001D6 E9000FD1            A   842    	LDX	4049,#-0
                           A   843    ;  235		//PAPUE = 0x10;	//00010000
                           A   844    ;  236		
                           A   845    ;  237		//Set up UART for 2000 baud, 8 data
                           A   846    ;  238		//Set baud rate
                           A   847    ;  239		U0BRH = 0x00;
                           A   848    .line 239
0001DA E9000F46            A   849    	LDX	3910,#-0
                           A   850    ;  240		U0BRL = 0xAD;
                           A   851    .line 240
0001DE E9AD0F47            A   852    	LDX	3911,#173
                           A   853    ;  241		//Set up interrupt
                           A   854    ;  242		SET_VECTOR(UART0_RX_IVECT, isr_uart
                           A   855    ;  243		SET_VECTOR(UART0_TX_IVECT, isr_uart
                           A   856    ;  244		IRQ0ENH |= 0x18;
                           A   857    .line 244
0001E2 49180FC1            A   858    	ORX	4033,#24
                           A   859    ;  245		IRQ0ENL |= 0x18;
                           A   860    .line 245
0001E6 49180FC2            A   861    	ORX	4034,#24
                           A   862    ;  246		IRQ0 &= ~0x18;
                           A   863    .line 246
0001EA 59E70FC0            A   864    	ANDX	4032,#-25
                           A   865    ;  247		//Enable transmitter and receiver, 
                           A   866    ;  248		U0CTL0 = 0xC2; 	//11000010
                           A   867    .line 248
0001EE E9C20F42            A   868    	LDX	3906,#194
                           A   869    ;  249		//Enable interrupts on received dat
                           A   870    ;  250		U0CTL1 = 0x00;	//00000000
                           A   871    .line 250
0001F2 E9000F43            A   872    	LDX	3907,#-0
                           A   873    ;  251		
                           A   874    ;  252		//Set up Timer0 to be an 4KHz heart
                           A   875    ;  253		//8KHz now.
                           A   876    ;  254		//Disable timer, set mode to Contin
                           A   877    ;  255		T0CTL1 = 0x01;	//00000001
                           A   878    .line 255
0001F6 E9010F07            A   879    	LDX	3847,#1
                           A   880    ;  256		T0CTL0 = 0x00;	//00000000
                           A   881    .line 256
0001FA E9000F06            A   882    	LDX	3846,#-0
                           A   883    ;  257		//Reset count
                           A   884    ;  258		T0H = 0x00; T0L = 0x01;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  18


PC     Object              I  Line    Source main.src
                           A   885    .line 258
0001FE E9000F00            A   886    	LDX	3840,#-0
000202 E9010F01            A   887    	LDX	3841,#1
                           A   888    ;  259		//Set the reload value
                           A   889    ;  260		//T0RH = 0x05; T0RL = 0x5F;
                           A   890    ;  261		T0RH = 0x02; T0RL = 0xB3;
                           A   891    .line 261
000206 E9020F02            A   892    	LDX	3842,#2
00020A E9B30F03            A   893    	LDX	3843,#179
                           A   894    ;  262		//Set the interrupt vector and prio
                           A   895    ;  263		SET_VECTOR(TIMER0, isr_timer0);
                           A   896    ;  264		IRQ0ENH |= 0x20;
                           A   897    .line 264
00020E 49200FC1            A   898    	ORX	4033,#32
                           A   899    ;  265		IRQ0ENL |= 0x20;
                           A   900    .line 265
000212 49200FC2            A   901    	ORX	4034,#32
                           A   902    ;  266		//Enable timer
                           A   903    ;  267		T0CTL1 |= 0x80;
                           A   904    .line 267
000216 49800F07            A   905    	ORX	3847,#128
                           A   906    ;  268		
                           A   907    ;  269		//Set up Timer1 to be 38KHz, 50% du
                           A   908    ;  270		//Turn off timer, set mode to singl
                           A   909    ;  271		T1CTL1 = 0x43;	//01000011
                           A   910    .line 271
00021A E9430F0F            A   911    	LDX	3855,#67
                           A   912    ;  272		T1CTL0 = 0x00;	//00000000
                           A   913    .line 272
00021E E9000F0E            A   914    	LDX	3854,#-0
                           A   915    ;  273		//Reset count
                           A   916    ;  274		T1H = 0x00; T1L = 0x01;
                           A   917    .line 274
000222 E9000F08            A   918    	LDX	3848,#-0
000226 E9010F09            A   919    	LDX	3849,#1
                           A   920    ;  275		//Set PWM value(Duty cycle)
                           A   921    ;  276		T1PWMH = 0x00; T1PWML = 0x48;
                           A   922    .line 276
00022A E9000F0C            A   923    	LDX	3852,#-0
00022E E9480F0D            A   924    	LDX	3853,#72
                           A   925    ;  277		//Set the reload value(Period)
                           A   926    ;  278		T1RH = 0x00; T1RL = 0x90;
                           A   927    .line 278
000232 E9000F0A            A   928    	LDX	3850,#-0
000236 E9900F0B            A   929    	LDX	3851,#144
                           A   930    ;  279		//Enable timer
                           A   931    ;  280		T1CTL1 |= 0x80;
                           A   932    .line 280
00023A 49800F0F            A   933    	ORX	3855,#128
                           A   934    ;  281		
                           A   935    ;  282		//Turn off the inhibit line
                           A   936    ;  283		PAOUT &= 0xFD;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  19


PC     Object              I  Line    Source main.src
                           A   937    .line 283
00023E 59FD0FD3            A   938    	ANDX	4051,#253
                           A   939    ;  284		
                           A   940    ;  285		//lastIO = PAIN;
                           A   941    ;  286		//tempIO = PAIN;
                           A   942    ;  287		
                           A   943    ;  288		EI();
                           A   944    .line 288
000242 9F                  A   945    	EI
                           A   946    ;  289	}
                           A   947    .line 289
000243 D6 0000             A   948    	CALL	__b_framereset
000246 AF                  A   949    	RET	
                           A   950    .endfunc "init_cpu",289,"_init_cpu"
                           A   951    	SEGMENT ROM_DATA
                           A   952    
                           A   953    
                           A   954    ;**************************** _sendQueue ******
                           A   955    ;Name                         Addr/Register   S
                           A   956    ;_ser_tx_size                        STATIC    
                           A   957    ;_ser_tx_buffer                      STATIC    
                           A   958    ;_temp_tx_buffer                     STATIC    
                           A   959    ;_temp_tx_size                       STATIC    
                           A   960    ;i                                      RR0    
                           A   961    
                           A   962    
                           A   963    ; Aggregate Stack Size: 0 (words)
                           A   964    
                           A   965    
                           A   966    	.FRAME _n_sendQueue,?_n_sendQueue,RDATA
                           A   967    	.FRAME _f_sendQueue,?_f_sendQueue,EDATA
                           A   968    	SEGMENT main_TEXT
000247                     A   969    _sendQueue:
                           A   970    .define "_sendQueue"
                           A   971    .value _sendQueue
                           A   972    .class 2
                           A   973    .type 65
                           A   974    .type 0
                           A   975    .endef
                           A   976    .begfunc "sendQueue",291,"_sendQueue"
                           A   977    ;  290	
                           A   978    ;  291	void sendQueue(void) {
                           A   979    .define "i"
                           A   980    .class 4
                           A   981    .reg 17
                           A   982    .type 3
                           A   983    .type 0
                           A   984    .endef
000247 D6 0000             A   985    	CALL	__b_frameset00
00024A 8B 0D               A   986    	JR	_5_L_58
                           A   987    ;  292		int i;
                           A   988    ;  293		
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  20


PC     Object              I  Line    Source main.src
                           A   989    ;  294		//Copy the data from the temporary 
                           A   990    ;  295		for(i = 0;i < temp_tx_size;i++) {
00024C                     A   991    _5_L_59:
                           A   992    .line 295
00024C 84203F              A   993    	LDX	R2,_temp_tx_size
00024F A212                A   994    	CP	R1,R2
000251 1FA6E000            A   995    	CPC	R0,#-0
000255 1B 08               A   996    	JR	LT,_5_L_61
000257 8B 20               A   997    	JR	_5_L_62
000259                     A   998    _5_L_58:
000259 B0E0                A   999    	CLR	R0
00025B B0E1                A  1000    	CLR	R1
00025D 8B ED               A  1001    	JR	_5_L_59
00025F                     A  1002    _5_L_61:
                           A  1003    ;  296			ser_tx_buffer[i] = temp_tx_buff
                           A  1004    .line 296
00025F 2C 00               A  1005    	LD	R2,#high(_temp_tx_buffer)
000261 3C 2F               A  1006    	LD	R3,#low(_temp_tx_buffer)
000263 0231                A  1007    	ADD	R3,R1
000265 1220                A  1008    	ADC	R2,R0
000267 4C 00               A  1009    	LD	R4,#high(_ser_tx_buffer)
000269 5C 14               A  1010    	LD	R5,#low(_ser_tx_buffer)
00026B 0251                A  1011    	ADD	R5,R1
00026D 1240                A  1012    	ADC	R4,R0
00026F 86E2E6              A  1013    	LDX	R6,@RR2
000272 96E6E4              A  1014    	LDX	@RR4,R6
                           A  1015    .line 295
000275 A0E0                A  1016    	INCW	RR0
                           A  1017    ;  297		}
                           A  1018    .line 297
000277 8B D3               A  1019    	JR	_5_L_59
000279                     A  1020    _5_L_62:
                           A  1021    ;  298		ser_tx_size = temp_tx_size;
                           A  1022    .line 298
000279 E8 03F024           A  1023    	LDX	_ser_tx_size,_temp_tx_size
                           A  1024    ;  299		
                           A  1025    ;  300		//Clear the temporary queue.
                           A  1026    ;  301		temp_tx_size = 0;
                           A  1027    .line 301
00027D E900003F            A  1028    	LDX	_temp_tx_size,#-0
                           A  1029    ;  302		
                           A  1030    ;  303		//Kickstart the UART.
                           A  1031    ;  304		IRQ0 |= 0x08;
                           A  1032    .line 304
000281 49080FC0            A  1033    	ORX	4032,#8
                           A  1034    ;  305	}
                           A  1035    .line 305
000285 D6 0000             A  1036    	CALL	__b_framereset
000288 AF                  A  1037    	RET	
                           A  1038    .endfunc "sendQueue",305,"_sendQueue"
                           A  1039    	SEGMENT ROM_DATA
                           A  1040    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  21


PC     Object              I  Line    Source main.src
                           A  1041    
                           A  1042    ;**************************** _queueByte ******
                           A  1043    ;Name                         Addr/Register   S
                           A  1044    ;_temp_tx_size                       STATIC    
                           A  1045    ;_temp_tx_buffer                     STATIC    
                           A  1046    ;input                                   R8    
                           A  1047    
                           A  1048    
                           A  1049    ; Aggregate Stack Size: 0 (words)
                           A  1050    
                           A  1051    
                           A  1052    	.FRAME _n_queueByte,?_n_queueByte,RDATA
                           A  1053    	.FRAME _f_queueByte,?_f_queueByte,EDATA
                           A  1054    	SEGMENT main_TEXT
000289                     A  1055    _queueByte:
                           A  1056    .define "_queueByte"
                           A  1057    .value _queueByte
                           A  1058    .class 2
                           A  1059    .type 65
                           A  1060    .type 0
                           A  1061    .endef
                           A  1062    .begfunc "queueByte",307,"_queueByte"
                           A  1063    .define "input"
                           A  1064    .class 17
                           A  1065    .reg 9
                           A  1066    .type 12
                           A  1067    .type 0
                           A  1068    .endef
000289 D6 0000             A  1069    	CALL	__b_frameset00
                           A  1070    ;  306	
                           A  1071    ;  307	void queueByte(unsigned char input) {
                           A  1072    ;  308		//Add a byte to the temporary queue
                           A  1073    ;  309		temp_tx_buffer[temp_tx_size] = inpu
                           A  1074    .line 309
00028C 84203F              A  1075    	LDX	R2,_temp_tx_size
00028F 0C 00               A  1076    	LD	R0,#high(_temp_tx_buffer)
000291 1C 2F               A  1077    	LD	R1,#low(_temp_tx_buffer)
000293 0212                A  1078    	ADD	R1,R2
000295 16E000              A  1079    	ADC	R0,#0
000298 96E8E0              A  1080    	LDX	@RR0,R8
                           A  1081    ;  310		temp_tx_size += 1;
                           A  1082    .line 310
00029B 0901003F            A  1083    	ADDX	_temp_tx_size,#1
                           A  1084    ;  311	}
                           A  1085    .line 311
00029F D6 0000             A  1086    	CALL	__b_framereset
0002A2 AF                  A  1087    	RET	
                           A  1088    .endfunc "queueByte",311,"_queueByte"
                           A  1089    	SEGMENT ROM_DATA
                           A  1090    
                           A  1091    
                           A  1092    ;**************************** _queueChecksum **
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  22


PC     Object              I  Line    Source main.src
                           A  1093    ;Name                         Addr/Register   S
                           A  1094    ;_temp_tx_buffer                     STATIC    
                           A  1095    ;_temp_tx_size                       STATIC    
                           A  1096    ;checksum                                R2    
                           A  1097    ;i                                      RR0    
                           A  1098    
                           A  1099    
                           A  1100    ; Aggregate Stack Size: 0 (words)
                           A  1101    
                           A  1102    
                           A  1103    	.FRAME _n_queueChecksum,?_n_queueChecksum,R
                           A  1104    	.FCALL _n_queueByte
                           A  1105    	.FRAME _f_queueChecksum,?_f_queueChecksum,E
                           A  1106    	.FCALL _f_queueByte
                           A  1107    	SEGMENT main_TEXT
0002A3                     A  1108    _queueChecksum:
                           A  1109    .define "_queueChecksum"
                           A  1110    .value _queueChecksum
                           A  1111    .class 2
                           A  1112    .type 65
                           A  1113    .type 0
                           A  1114    .endef
                           A  1115    .begfunc "queueChecksum",313,"_queueChecksum"
                           A  1116    ;  312	
                           A  1117    ;  313	void queueChecksum(void) {
                           A  1118    .define "i"
                           A  1119    .class 4
                           A  1120    .reg 17
                           A  1121    .type 3
                           A  1122    .type 0
                           A  1123    .endef
                           A  1124    .define "checksum"
                           A  1125    .class 4
                           A  1126    .reg 3
                           A  1127    .type 12
                           A  1128    .type 0
                           A  1129    .endef
0002A3 D6 0000             A  1130    	CALL	__b_frameset00
                           A  1131    ;  314		int i;
                           A  1132    ;  315		unsigned char checksum = 0xFF;
                           A  1133    .line 315
0002A6 2CFF                A  1134    	LD	R2,#255
0002A8 8B 0D               A  1135    	JR	_7_L_66
                           A  1136    ;  316		
                           A  1137    ;  317		//Calculate a checksum for all the 
                           A  1138    ;  318		for(i = 0; i < temp_tx_size;i++) {
0002AA                     A  1139    _7_L_67:
                           A  1140    .line 318
0002AA 84303F              A  1141    	LDX	R3,_temp_tx_size
0002AD A213                A  1142    	CP	R1,R3
0002AF 1FA6E000            A  1143    	CPC	R0,#-0
0002B3 1B 08               A  1144    	JR	LT,_7_L_69
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  23


PC     Object              I  Line    Source main.src
0002B5 8B 17               A  1145    	JR	_7_L_70
0002B7                     A  1146    _7_L_66:
0002B7 B0E0                A  1147    	CLR	R0
0002B9 B0E1                A  1148    	CLR	R1
0002BB 8B ED               A  1149    	JR	_7_L_67
0002BD                     A  1150    _7_L_69:
                           A  1151    ;  319			checksum -= temp_tx_buffer[i];
                           A  1152    .line 319
0002BD 4C 00               A  1153    	LD	R4,#high(_temp_tx_buffer)
0002BF 5C 2F               A  1154    	LD	R5,#low(_temp_tx_buffer)
0002C1 0251                A  1155    	ADD	R5,R1
0002C3 1240                A  1156    	ADC	R4,R0
0002C5 86E4E3              A  1157    	LDX	R3,@RR4
0002C8 2223                A  1158    	SUB	R2,R3
                           A  1159    .line 318
0002CA A0E0                A  1160    	INCW	RR0
                           A  1161    ;  320		}
                           A  1162    .line 320
0002CC 8B DC               A  1163    	JR	_7_L_67
0002CE                     A  1164    _7_L_70:
                           A  1165    ;  321		
                           A  1166    ;  322		//Add the checksum to the queue.
                           A  1167    ;  323		queueByte(checksum);
                           A  1168    .line 323
0002CE E4E2E8              A  1169    	LD	R8,R2
0002D1 D6 0289             A  1170    	CALL	_queueByte
                           A  1171    ;  324	}
                           A  1172    .line 324
0002D4 D6 0000             A  1173    	CALL	__b_framereset
0002D7 AF                  A  1174    	RET	
                           A  1175    .endfunc "queueChecksum",324,"_queueChecksum"
                           A  1176    	SEGMENT ROM_DATA
                           A  1177    
                           A  1178    
                           A  1179    ;**************************** _loadAmmo *******
                           A  1180    ;Name                         Addr/Register   S
                           A  1181    ;_ir_loaded_tags                     STATIC    
                           A  1182    ;howMuch                                 R8    
                           A  1183    
                           A  1184    
                           A  1185    ; Aggregate Stack Size: 0 (words)
                           A  1186    
                           A  1187    
                           A  1188    	.FRAME _n_loadAmmo,?_n_loadAmmo,RDATA
                           A  1189    	.FRAME _f_loadAmmo,?_f_loadAmmo,EDATA
                           A  1190    	SEGMENT main_TEXT
0002D8                     A  1191    _loadAmmo:
                           A  1192    .define "_loadAmmo"
                           A  1193    .value _loadAmmo
                           A  1194    .class 2
                           A  1195    .type 65
                           A  1196    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  24


PC     Object              I  Line    Source main.src
                           A  1197    .endef
                           A  1198    .begfunc "loadAmmo",326,"_loadAmmo"
                           A  1199    .define "howMuch"
                           A  1200    .class 17
                           A  1201    .reg 9
                           A  1202    .type 12
                           A  1203    .type 0
                           A  1204    .endef
0002D8 D6 0000             A  1205    	CALL	__b_frameset00
                           A  1206    ;  325	
                           A  1207    ;  326	void loadAmmo(unsigned char howMuch) {
                           A  1208    ;  327		ir_loaded_tags = howMuch;
                           A  1209    .line 327
0002DB 948029              A  1210    	LDX	_ir_loaded_tags,R8
                           A  1211    ;  328		//INHIBIT should be high to generat
                           A  1212    ;  329		PAOUT |= 0x02;
                           A  1213    .line 329
0002DE 49020FD3            A  1214    	ORX	4051,#2
                           A  1215    ;  330	}
                           A  1216    .line 330
0002E2 D6 0000             A  1217    	CALL	__b_framereset
0002E5 AF                  A  1218    	RET	
                           A  1219    .endfunc "loadAmmo",330,"_loadAmmo"
                           A  1220    	SEGMENT ROM_DATA
                           A  1221    
                           A  1222    
                           A  1223    ;**************************** _rxedResetBarrel 
                           A  1224    ;Name                         Addr/Register   S
                           A  1225    ;_reloadCooldown                     STATIC    
                           A  1226    ;_weAreReloading                     STATIC    
                           A  1227    ;_weAreRegistered                    STATIC    
                           A  1228    ;_sendBarrelReply                    STATIC    
                           A  1229    ;_sendLoadSpecial                    STATIC    
                           A  1230    ;_sendArmSpecial                     STATIC    
                           A  1231    ;_ir_loaded_tags                     STATIC    
                           A  1232    
                           A  1233    
                           A  1234    ; Aggregate Stack Size: 0 (words)
                           A  1235    
                           A  1236    
                           A  1237    	.FRAME _n_rxedResetBarrel,?_n_rxedResetBarr
                           A  1238    	.FRAME _f_rxedResetBarrel,?_f_rxedResetBarr
                           A  1239    	SEGMENT main_TEXT
0002E6                     A  1240    _rxedResetBarrel:
                           A  1241    .define "_rxedResetBarrel"
                           A  1242    .value _rxedResetBarrel
                           A  1243    .class 2
                           A  1244    .type 65
                           A  1245    .type 0
                           A  1246    .endef
                           A  1247    .begfunc "rxedResetBarrel",332,"_rxedResetBarre
0002E6 D6 0000             A  1248    	CALL	__b_frameset00
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  25


PC     Object              I  Line    Source main.src
                           A  1249    ;  331	
                           A  1250    ;  332	void rxedResetBarrel(void) {
                           A  1251    ;  333		//This will reset any variables use
                           A  1252    ;  334		
                           A  1253    ;  335		ir_loaded_tags = 0;
                           A  1254    .line 335
0002E9 E9000029            A  1255    	LDX	_ir_loaded_tags,#-0
                           A  1256    ;  336		
                           A  1257    ;  337		sendArmSpecial = 0;
                           A  1258    .line 337
0002ED E9000042            A  1259    	LDX	_sendArmSpecial,#-0
                           A  1260    ;  338		sendLoadSpecial = 0;
                           A  1261    .line 338
0002F1 E9000041            A  1262    	LDX	_sendLoadSpecial,#-0
                           A  1263    ;  339		sendBarrelReply = 0;
                           A  1264    .line 339
0002F5 E9000040            A  1265    	LDX	_sendBarrelReply,#-0
                           A  1266    ;  340		
                           A  1267    ;  341		weAreRegistered = 0;
                           A  1268    .line 341
0002F9 E9000043            A  1269    	LDX	_weAreRegistered,#-0
                           A  1270    ;  342		weAreReloading = 0;
                           A  1271    .line 342
0002FD E9000044            A  1272    	LDX	_weAreReloading,#-0
                           A  1273    ;  343		
                           A  1274    ;  344		reloadCooldown = 800;
                           A  1275    .line 344
000301 E9030045            A  1276    	LDX	_reloadCooldown,#3
000305 E9200046            A  1277    	LDX	_reloadCooldown+1,#32
                           A  1278    ;  345		
                           A  1279    ;  346		PAOUT &= 0xFD;
                           A  1280    .line 346
000309 59FD0FD3            A  1281    	ANDX	4051,#253
                           A  1282    ;  347	}
                           A  1283    .line 347
00030D D6 0000             A  1284    	CALL	__b_framereset
000310 AF                  A  1285    	RET	
                           A  1286    .endfunc "rxedResetBarrel",347,"_rxedResetBarre
                           A  1287    	SEGMENT ROM_DATA
                           A  1288    
                           A  1289    
                           A  1290    ;**************************** _rxedRollCall ***
                           A  1291    ;Name                         Addr/Register   S
                           A  1292    ;_sendBarrelReply                    STATIC    
                           A  1293    
                           A  1294    
                           A  1295    ; Aggregate Stack Size: 0 (words)
                           A  1296    
                           A  1297    
                           A  1298    	.FRAME _n_rxedRollCall,?_n_rxedRollCall,RDA
                           A  1299    	.FRAME _f_rxedRollCall,?_f_rxedRollCall,EDA
                           A  1300    	SEGMENT main_TEXT
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  26


PC     Object              I  Line    Source main.src
000311                     A  1301    _rxedRollCall:
                           A  1302    .define "_rxedRollCall"
                           A  1303    .value _rxedRollCall
                           A  1304    .class 2
                           A  1305    .type 65
                           A  1306    .type 0
                           A  1307    .endef
                           A  1308    .begfunc "rxedRollCall",349,"_rxedRollCall"
000311 D6 0000             A  1309    	CALL	__b_frameset00
                           A  1310    ;  348	
                           A  1311    ;  349	void rxedRollCall(void) {
                           A  1312    ;  350		/*	Format:		BType		$00
                           A  1313    ;  351						BData0		Blaster
                           A  1314    ;  352						BSum		$cs
                           A  1315    ;  353		*/
                           A  1316    ;  354		//We don't actually care about anyt
                           A  1317    ;  355		//Set a flag that will be seen by s
                           A  1318    ;  356		sendBarrelReply = 1;
                           A  1319    .line 356
000314 E9010040            A  1320    	LDX	_sendBarrelReply,#1
                           A  1321    ;  357	}
                           A  1322    .line 357
000318 D6 0000             A  1323    	CALL	__b_framereset
00031B AF                  A  1324    	RET	
                           A  1325    .endfunc "rxedRollCall",357,"_rxedRollCall"
                           A  1326    	SEGMENT ROM_DATA
                           A  1327    
                           A  1328    
                           A  1329    ;**************************** _rxedBarrelSeen *
                           A  1330    ;Name                         Addr/Register   S
                           A  1331    ;_weAreRegistered                    STATIC    
                           A  1332    
                           A  1333    
                           A  1334    ; Aggregate Stack Size: 0 (words)
                           A  1335    
                           A  1336    
                           A  1337    	.FRAME _n_rxedBarrelSeen,?_n_rxedBarrelSeen
                           A  1338    	.FCALL _n_rxedResetBarrel
                           A  1339    	.FRAME _f_rxedBarrelSeen,?_f_rxedBarrelSeen
                           A  1340    	.FCALL _f_rxedResetBarrel
                           A  1341    	SEGMENT main_TEXT
00031C                     A  1342    _rxedBarrelSeen:
                           A  1343    .define "_rxedBarrelSeen"
                           A  1344    .value _rxedBarrelSeen
                           A  1345    .class 2
                           A  1346    .type 65
                           A  1347    .type 0
                           A  1348    .endef
                           A  1349    .begfunc "rxedBarrelSeen",359,"_rxedBarrelSeen"
00031C D6 0000             A  1350    	CALL	__b_frameset00
                           A  1351    ;  358	
                           A  1352    ;  359	void rxedBarrelSeen(void) {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  27


PC     Object              I  Line    Source main.src
                           A  1353    ;  360		/*	Format:		BType		$40
                           A  1354    ;  361						BSum		$cs
                           A  1355    ;  362		*/
                           A  1356    ;  363		//No data, no cares! This does mean
                           A  1357    ;  364		rxedResetBarrel();
                           A  1358    .line 364
00031F D6 02E6             A  1359    	CALL	_rxedResetBarrel
                           A  1360    ;  365		weAreRegistered = 1;
                           A  1361    .line 365
000322 E9010043            A  1362    	LDX	_weAreRegistered,#1
                           A  1363    ;  366	}
                           A  1364    .line 366
000326 D6 0000             A  1365    	CALL	__b_framereset
000329 AF                  A  1366    	RET	
                           A  1367    .endfunc "rxedBarrelSeen",366,"_rxedBarrelSeen"
                           A  1368    	SEGMENT ROM_DATA
                           A  1369    
                           A  1370    
                           A  1371    ;**************************** _rxedBarrelAck **
                           A  1372    ;Name                         Addr/Register   S
                           A  1373    ;_reloadCooldown                     STATIC    
                           A  1374    ;_sendArmSpecial                     STATIC    
                           A  1375    ;_weAreReloading                     STATIC    
                           A  1376    
                           A  1377    
                           A  1378    ; Aggregate Stack Size: 0 (words)
                           A  1379    
                           A  1380    
                           A  1381    	.FRAME _n_rxedBarrelAck,?_n_rxedBarrelAck,R
                           A  1382    	.FCALL _n_loadAmmo
                           A  1383    	.FRAME _f_rxedBarrelAck,?_f_rxedBarrelAck,E
                           A  1384    	.FCALL _f_loadAmmo
                           A  1385    	SEGMENT main_TEXT
00032A                     A  1386    _rxedBarrelAck:
                           A  1387    .define "_rxedBarrelAck"
                           A  1388    .value _rxedBarrelAck
                           A  1389    .class 2
                           A  1390    .type 65
                           A  1391    .type 0
                           A  1392    .endef
                           A  1393    .begfunc "rxedBarrelAck",368,"_rxedBarrelAck"
00032A D6 0000             A  1394    	CALL	__b_frameset00
                           A  1395    ;  367	
                           A  1396    ;  368	void rxedBarrelAck(void) {
                           A  1397    ;  369		/*	Format:		BType		$41
                           A  1398    ;  370						BSum		$cs
                           A  1399    ;  371		*/
                           A  1400    ;  372		//This one we actually care about, 
                           A  1401    ;  373		if(weAreReloading == 1) {
                           A  1402    .line 373
00032D A9010044            A  1403    	CPX	_weAreReloading,#1
000331 EB 06               A  1404    	JR	NE,_12_L_78
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  28


PC     Object              I  Line    Source main.src
                           A  1405    ;  374			//Because we still need to actu
                           A  1406    ;  375			//Flag that we need to send thi
                           A  1407    ;  376			sendArmSpecial = 1;
                           A  1408    .line 376
000333 E9010042            A  1409    	LDX	_sendArmSpecial,#1
                           A  1410    ;  377		} else if(weAreReloading == 2) {
                           A  1411    .line 377
000337 8B 17               A  1412    	JR	_12_L_79
000339                     A  1413    _12_L_78:
000339 A9020044            A  1414    	CPX	_weAreReloading,#2
00033D EB 11               A  1415    	JR	NE,_12_L_79
                           A  1416    ;  378			weAreReloading = 0;
                           A  1417    .line 378
00033F E9000044            A  1418    	LDX	_weAreReloading,#-0
                           A  1419    ;  379			//We're now in control of sendi
                           A  1420    ;  380			loadAmmo(AMMO);
                           A  1421    .line 380
000343 8C0F                A  1422    	LD	R8,#15
000345 D6 02D8             A  1423    	CALL	_loadAmmo
                           A  1424    ;  381			//Slow down reloading a bit...
                           A  1425    ;  382			reloadCooldown = 800;
                           A  1426    .line 382
000348 E9030045            A  1427    	LDX	_reloadCooldown,#3
00034C E9200046            A  1428    	LDX	_reloadCooldown+1,#32
                           A  1429    ;  383		}
                           A  1430    ;  384	}
000350                     A  1431    _12_L_79:
                           A  1432    .line 384
000350 D6 0000             A  1433    	CALL	__b_framereset
000353 AF                  A  1434    	RET	
                           A  1435    .endfunc "rxedBarrelAck",384,"_rxedBarrelAck"
                           A  1436    	SEGMENT ROM_DATA
                           A  1437    
                           A  1438    
                           A  1439    ;**************************** _BarrelReply ****
                           A  1440    ;Name                         Addr/Register   S
                           A  1441    
                           A  1442    
                           A  1443    ; Aggregate Stack Size: 0 (words)
                           A  1444    
                           A  1445    
                           A  1446    	.FRAME _n_BarrelReply,?_n_BarrelReply,RDATA
                           A  1447    	.FCALL _n_queueByte
                           A  1448    	.FCALL _n_queueChecksum
                           A  1449    	.FCALL _n_sendQueue
                           A  1450    	.FRAME _f_BarrelReply,?_f_BarrelReply,EDATA
                           A  1451    	.FCALL _f_queueByte
                           A  1452    	.FCALL _f_queueChecksum
                           A  1453    	.FCALL _f_sendQueue
                           A  1454    	SEGMENT main_TEXT
000354                     A  1455    _BarrelReply:
                           A  1456    .define "_BarrelReply"
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  29


PC     Object              I  Line    Source main.src
                           A  1457    .value _BarrelReply
                           A  1458    .class 2
                           A  1459    .type 65
                           A  1460    .type 0
                           A  1461    .endef
                           A  1462    .begfunc "BarrelReply",386,"_BarrelReply"
000354 D6 0000             A  1463    	CALL	__b_frameset00
                           A  1464    ;  385	
                           A  1465    ;  386	void BarrelReply(void) {
                           A  1466    ;  387		/*	BARREL-REPLY
                           A  1467    ;  388			Format:		BType		$40
                           A  1468    ;  389						BData0		Barrel 
                           A  1469    ;  390						BSum		$cs
                           A  1470    ;  391			Barrels send this block in resp
                           A  1471    ;  392			BData0 should be 0x01 for a sho
                           A  1472    ;  393			Other values are undefined, but
                           A  1473    ;  394		*/
                           A  1474    ;  395		
                           A  1475    ;  396		//BType
                           A  1476    ;  397		queueByte(0x40);
                           A  1477    .line 397
000357 8C40                A  1478    	LD	R8,#64
000359 D6 0289             A  1479    	CALL	_queueByte
                           A  1480    ;  398		//BData0
                           A  1481    ;  399		queueByte(0x02);
                           A  1482    .line 399
00035C 8C02                A  1483    	LD	R8,#2
00035E D6 0289             A  1484    	CALL	_queueByte
                           A  1485    ;  400		//BSum
                           A  1486    ;  401		queueChecksum();
                           A  1487    .line 401
000361 D6 02A3             A  1488    	CALL	_queueChecksum
                           A  1489    ;  402		
                           A  1490    ;  403		//Send it!
                           A  1491    ;  404		sendQueue();
                           A  1492    .line 404
000364 D6 0247             A  1493    	CALL	_sendQueue
                           A  1494    ;  405	}
                           A  1495    .line 405
000367 D6 0000             A  1496    	CALL	__b_framereset
00036A AF                  A  1497    	RET	
                           A  1498    .endfunc "BarrelReply",405,"_BarrelReply"
                           A  1499    	SEGMENT ROM_DATA
                           A  1500    
                           A  1501    
                           A  1502    ;**************************** _LoadSpecial ****
                           A  1503    ;Name                         Addr/Register   S
                           A  1504    ;_weAreReloading                     STATIC    
                           A  1505    
                           A  1506    
                           A  1507    ; Aggregate Stack Size: 0 (words)
                           A  1508    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  30


PC     Object              I  Line    Source main.src
                           A  1509    
                           A  1510    	.FRAME _n_LoadSpecial,?_n_LoadSpecial,RDATA
                           A  1511    	.FCALL _n_queueByte
                           A  1512    	.FCALL _n_queueChecksum
                           A  1513    	.FCALL _n_sendQueue
                           A  1514    	.FRAME _f_LoadSpecial,?_f_LoadSpecial,EDATA
                           A  1515    	.FCALL _f_queueByte
                           A  1516    	.FCALL _f_queueChecksum
                           A  1517    	.FCALL _f_sendQueue
                           A  1518    	SEGMENT main_TEXT
00036B                     A  1519    _LoadSpecial:
                           A  1520    .define "_LoadSpecial"
                           A  1521    .value _LoadSpecial
                           A  1522    .class 2
                           A  1523    .type 65
                           A  1524    .type 0
                           A  1525    .endef
                           A  1526    .begfunc "LoadSpecial",407,"_LoadSpecial"
00036B D6 0000             A  1527    	CALL	__b_frameset00
                           A  1528    ;  406	
                           A  1529    ;  407	void LoadSpecial(void) {
                           A  1530    ;  408		/*	LOAD-SPECIAL
                           A  1531    ;  409			Format:		BType		$41
                           A  1532    ;  410						BData0		Ammo Ne
                           A  1533    ;  411						BData1		DoubleT
                           A  1534    ;  412						BData2		LoadSFX
                           A  1535    ;  413						BData3		FireSFX
                           A  1536    ;  414						BData4		Display
                           A  1537    ;  415						BSum		$cs
                           A  1538    ;  416			Unloads any ready ammo and load
                           A  1539    ;  417		*/
                           A  1540    ;  418		
                           A  1541    ;  419		//BType
                           A  1542    ;  420		queueByte(0x41);
                           A  1543    .line 420
00036E 8C41                A  1544    	LD	R8,#65
000370 D6 0289             A  1545    	CALL	_queueByte
                           A  1546    ;  421		//BData0
                           A  1547    ;  422		queueByte(AMMO);
                           A  1548    .line 422
000373 8C0F                A  1549    	LD	R8,#15
000375 D6 0289             A  1550    	CALL	_queueByte
                           A  1551    ;  423		//BData1
                           A  1552    ;  424		queueByte(DOUBLETAPS);
                           A  1553    .line 424
000378 B0E8                A  1554    	CLR	R8
00037A D6 0289             A  1555    	CALL	_queueByte
                           A  1556    ;  425		//BData2
                           A  1557    ;  426		queueByte(LOADSFX);
                           A  1558    .line 426
00037D 8C0E                A  1559    	LD	R8,#14
00037F D6 0289             A  1560    	CALL	_queueByte
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  31


PC     Object              I  Line    Source main.src
                           A  1561    ;  427		//BData3
                           A  1562    ;  428		queueByte(FIRESFX);
                           A  1563    .line 428
000382 8C0B                A  1564    	LD	R8,#11
000384 D6 0289             A  1565    	CALL	_queueByte
                           A  1566    ;  429		//BData4
                           A  1567    ;  430		queueByte(0);
                           A  1568    .line 430
000387 B0E8                A  1569    	CLR	R8
000389 D6 0289             A  1570    	CALL	_queueByte
                           A  1571    ;  431		//BSum
                           A  1572    ;  432		queueChecksum();
                           A  1573    .line 432
00038C D6 02A3             A  1574    	CALL	_queueChecksum
                           A  1575    ;  433		
                           A  1576    ;  434		//We also need to mark that we're t
                           A  1577    ;  435		weAreReloading = 1;
                           A  1578    .line 435
00038F E9010044            A  1579    	LDX	_weAreReloading,#1
                           A  1580    ;  436		
                           A  1581    ;  437		//Send it!
                           A  1582    ;  438		sendQueue();
                           A  1583    .line 438
000393 D6 0247             A  1584    	CALL	_sendQueue
                           A  1585    ;  439	}
                           A  1586    .line 439
000396 D6 0000             A  1587    	CALL	__b_framereset
000399 AF                  A  1588    	RET	
                           A  1589    .endfunc "LoadSpecial",439,"_LoadSpecial"
                           A  1590    	SEGMENT ROM_DATA
                           A  1591    
                           A  1592    
                           A  1593    ;**************************** _ArmSpecial *****
                           A  1594    ;Name                         Addr/Register   S
                           A  1595    ;_weAreReloading                     STATIC    
                           A  1596    
                           A  1597    
                           A  1598    ; Aggregate Stack Size: 0 (words)
                           A  1599    
                           A  1600    
                           A  1601    	.FRAME _n_ArmSpecial,?_n_ArmSpecial,RDATA
                           A  1602    	.FCALL _n_queueByte
                           A  1603    	.FCALL _n_queueChecksum
                           A  1604    	.FCALL _n_sendQueue
                           A  1605    	.FRAME _f_ArmSpecial,?_f_ArmSpecial,EDATA
                           A  1606    	.FCALL _f_queueByte
                           A  1607    	.FCALL _f_queueChecksum
                           A  1608    	.FCALL _f_sendQueue
                           A  1609    	SEGMENT main_TEXT
00039A                     A  1610    _ArmSpecial:
                           A  1611    .define "_ArmSpecial"
                           A  1612    .value _ArmSpecial
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  32


PC     Object              I  Line    Source main.src
                           A  1613    .class 2
                           A  1614    .type 65
                           A  1615    .type 0
                           A  1616    .endef
                           A  1617    .begfunc "ArmSpecial",441,"_ArmSpecial"
00039A D6 0000             A  1618    	CALL	__b_frameset00
                           A  1619    ;  440	
                           A  1620    ;  441	void ArmSpecial(void) {
                           A  1621    ;  442		/*	ARM-SPECIAL
                           A  1622    ;  443			Format:		BType		$42
                           A  1623    ;  444						BData0	BurstSize (
                           A  1624    ;  445						BData1	Ammo (1-15)
                           A  1625    ;  446						BData2	TrigRate (1
                           A  1626    ;  447						BSum		$cs
                           A  1627    ;  448			BurstSize is in the range 1 to 
                           A  1628    ;  449			Ammo is the amount of ready amm
                           A  1629    ;  450			TrigRate is the number of milli
                           A  1630    ;  451		*/
                           A  1631    ;  452		
                           A  1632    ;  453		//BType
                           A  1633    ;  454		queueByte(0x42);
                           A  1634    .line 454
00039D 8C42                A  1635    	LD	R8,#66
00039F D6 0289             A  1636    	CALL	_queueByte
                           A  1637    ;  455		//BData0
                           A  1638    ;  456		queueByte(BURSTSIZE);
                           A  1639    .line 456
0003A2 8C0F                A  1640    	LD	R8,#15
0003A4 D6 0289             A  1641    	CALL	_queueByte
                           A  1642    ;  457		//BData1
                           A  1643    ;  458		queueByte(AMMO);
                           A  1644    .line 458
0003A7 8C0F                A  1645    	LD	R8,#15
0003A9 D6 0289             A  1646    	CALL	_queueByte
                           A  1647    ;  459		//BData2
                           A  1648    ;  460		queueByte(REFIRERATE);
                           A  1649    .line 460
0003AC 8C10                A  1650    	LD	R8,#16
0003AE D6 0289             A  1651    	CALL	_queueByte
                           A  1652    ;  461		//BSum
                           A  1653    ;  462		queueChecksum();
                           A  1654    .line 462
0003B1 D6 02A3             A  1655    	CALL	_queueChecksum
                           A  1656    ;  463		
                           A  1657    ;  464		//Send it!
                           A  1658    ;  465		sendQueue();
                           A  1659    .line 465
0003B4 D6 0247             A  1660    	CALL	_sendQueue
                           A  1661    ;  466		
                           A  1662    ;  467		//We're expecting another ACK from 
                           A  1663    ;  468		weAreReloading = 2;
                           A  1664    .line 468
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  33


PC     Object              I  Line    Source main.src
0003B7 E9020044            A  1665    	LDX	_weAreReloading,#2
                           A  1666    ;  469	}
                           A  1667    .line 469
0003BB D6 0000             A  1668    	CALL	__b_framereset
0003BE AF                  A  1669    	RET	
                           A  1670    .endfunc "ArmSpecial",469,"_ArmSpecial"
                           A  1671    	SEGMENT ROM_DATA
                           A  1672    
                           A  1673    
                           A  1674    ;**************************** _sendSomething **
                           A  1675    ;Name                         Addr/Register   S
                           A  1676    ;_ir_loaded_tags                     STATIC    
                           A  1677    ;_reloadCooldown                     STATIC    
                           A  1678    ;_weAreReloading                     STATIC    
                           A  1679    ;_sendLoadSpecial                    STATIC    
                           A  1680    ;_sendArmSpecial                     STATIC    
                           A  1681    ;_sendBarrelReply                    STATIC    
                           A  1682    ;_ser_tx_cooldown                    STATIC    
                           A  1683    ;_ser_tx_size                        STATIC    
                           A  1684    
                           A  1685    
                           A  1686    ; Aggregate Stack Size: 0 (words)
                           A  1687    
                           A  1688    
                           A  1689    	.FRAME _n_sendSomething,?_n_sendSomething,R
                           A  1690    	.FCALL _n_BarrelReply
                           A  1691    	.FCALL _n_ArmSpecial
                           A  1692    	.FCALL _n_LoadSpecial
                           A  1693    	.FRAME _f_sendSomething,?_f_sendSomething,E
                           A  1694    	.FCALL _f_BarrelReply
                           A  1695    	.FCALL _f_ArmSpecial
                           A  1696    	.FCALL _f_LoadSpecial
                           A  1697    	SEGMENT main_TEXT
0003BF                     A  1698    _sendSomething:
                           A  1699    .define "_sendSomething"
                           A  1700    .value _sendSomething
                           A  1701    .class 2
                           A  1702    .type 65
                           A  1703    .type 0
                           A  1704    .endef
                           A  1705    .begfunc "sendSomething",471,"_sendSomething"
0003BF D6 0000             A  1706    	CALL	__b_frameset00
                           A  1707    ;  470	
                           A  1708    ;  471	void sendSomething(void) {
                           A  1709    ;  472		if(!ser_tx_size && !ser_tx_cooldown
                           A  1710    .line 472
0003C2 A9000024            A  1711    	CPX	_ser_tx_size,#-0
0003C6 EB 47               A  1712    	JR	NE,_16_L_99
0003C8 A9000025            A  1713    	CPX	_ser_tx_cooldown,#-0
0003CC EB 41               A  1714    	JR	NE,_16_L_99
                           A  1715    ;  473			if(sendBarrelReply) {
                           A  1716    .line 473
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  34


PC     Object              I  Line    Source main.src
0003CE A9000040            A  1717    	CPX	_sendBarrelReply,#-0
0003D2 6B 09               A  1718    	JR	Z,_16_L_86
                           A  1719    ;  474				sendBarrelReply = 0;
                           A  1720    .line 474
0003D4 E9000040            A  1721    	LDX	_sendBarrelReply,#-0
                           A  1722    ;  475				BarrelReply();
                           A  1723    .line 475
0003D8 D6 0354             A  1724    	CALL	_BarrelReply
                           A  1725    ;  476				return;
                           A  1726    .line 476
0003DB 8B 32               A  1727    	JR	_16_L_99
                           A  1728    ;  477			}
0003DD                     A  1729    _16_L_86:
                           A  1730    .line 477
                           A  1731    ;  478			if(sendArmSpecial) {
                           A  1732    .line 478
0003DD A9000042            A  1733    	CPX	_sendArmSpecial,#-0
0003E1 6B 09               A  1734    	JR	Z,_16_L_97
                           A  1735    ;  479				sendArmSpecial = 0;
                           A  1736    .line 479
0003E3 E9000042            A  1737    	LDX	_sendArmSpecial,#-0
                           A  1738    ;  480				ArmSpecial();
                           A  1739    .line 480
0003E7 D6 039A             A  1740    	CALL	_ArmSpecial
                           A  1741    ;  481				return;
                           A  1742    .line 481
0003EA 8B 23               A  1743    	JR	_16_L_99
                           A  1744    ;  482			}
0003EC                     A  1745    _16_L_97:
                           A  1746    .line 482
                           A  1747    ;  483			if(sendLoadSpecial) {
                           A  1748    .line 483
0003EC A9000041            A  1749    	CPX	_sendLoadSpecial,#-0
0003F0 6B 1D               A  1750    	JR	Z,_16_L_99
                           A  1751    ;  484				sendLoadSpecial = 0;
                           A  1752    .line 484
0003F2 E9000041            A  1753    	LDX	_sendLoadSpecial,#-0
                           A  1754    ;  485				if(RELOADMIDCLIP) {
                           A  1755    ;  486					if(!weAreReloading && !
                           A  1756    .line 486
0003F6 A9000044            A  1757    	CPX	_weAreReloading,#-0
0003FA EB 13               A  1758    	JR	NE,_16_L_95
0003FC 840045              A  1759    	LDX	R0,_reloadCooldown
0003FF 841046              A  1760    	LDX	R1,_reloadCooldown+1
000402 4201                A  1761    	OR	R0,R1
000404 EB 09               A  1762    	JR	NE,_16_L_95
                           A  1763    ;  487						if(ir_loaded_tags !
                           A  1764    .line 487
000406 A90F0029            A  1765    	CPX	_ir_loaded_tags,#15
00040A 6B 03               A  1766    	JR	Z,_16_L_95
                           A  1767    ;  488							LoadSpecial();
                           A  1768    .line 488
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  35


PC     Object              I  Line    Source main.src
00040C D6 036B             A  1769    	CALL	_LoadSpecial
                           A  1770    ;  489						}
                           A  1771    ;  490					}
                           A  1772    ;  491				} else {
                           A  1773    ;  492					if(!weAreReloading && !
                           A  1774    ;  493						LoadSpecial();
                           A  1775    ;  494					}
                           A  1776    ;  495				}
00040F                     A  1777    _16_L_95:
                           A  1778    .line 495
                           A  1779    ;  496				return;
                           A  1780    ;  497			}
                           A  1781    ;  498		}
                           A  1782    ;  499	}
00040F                     A  1783    _16_L_99:
                           A  1784    .line 499
00040F D6 0000             A  1785    	CALL	__b_framereset
000412 AF                  A  1786    	RET	
                           A  1787    .endfunc "sendSomething",499,"_sendSomething"
                           A  1788    	SEGMENT ROM_DATA
                           A  1789    ;	Jump Table for Switch Statement at line 506
000000                     A  1790    L__72:
000000 000B                A  1791    	DW	11
000002 0000                A  1792    	DW	0
000004 042A                A  1793    	DW	_17_L_100
000006 001E                A  1794    	DW	30
000008 042F                A  1795    	DW	_17_L_101
00000A 001F                A  1796    	DW	31
00000C 042F                A  1797    	DW	_17_L_102
00000E 0020                A  1798    	DW	32
000010 042F                A  1799    	DW	_17_L_103
000012 0040                A  1800    	DW	64
000014 0434                A  1801    	DW	_17_L_109
000016 0041                A  1802    	DW	65
000018 0439                A  1803    	DW	_17_L_110
00001A 005F                A  1804    	DW	95
00001C 042F                A  1805    	DW	_17_L_104
00001E 0060                A  1806    	DW	96
000020 042F                A  1807    	DW	_17_L_105
000022 0080                A  1808    	DW	128
000024 042F                A  1809    	DW	_17_L_106
000026 00A0                A  1810    	DW	160
000028 042F                A  1811    	DW	_17_L_107
00002A 00C0                A  1812    	DW	192
00002C 042F                A  1813    	DW	_17_L_108
00002E 043C                A  1814    	DW	_17_L_112
                           A  1815    
                           A  1816    
                           A  1817    ;**************************** _receiveSomething
                           A  1818    ;Name                         Addr/Register   S
                           A  1819    ;_captureBuffer                      STATIC    
                           A  1820    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  36


PC     Object              I  Line    Source main.src
                           A  1821    
                           A  1822    ; Aggregate Stack Size: 0 (words)
                           A  1823    
                           A  1824    
                           A  1825    	.FRAME _n_receiveSomething,?_n_receiveSomet
                           A  1826    	.FCALL _n_rxedRollCall
                           A  1827    	.FCALL _n_rxedResetBarrel
                           A  1828    	.FCALL _n_rxedBarrelSeen
                           A  1829    	.FCALL _n_rxedBarrelAck
                           A  1830    	.FRAME _f_receiveSomething,?_f_receiveSomet
                           A  1831    	.FCALL _f_rxedRollCall
                           A  1832    	.FCALL _f_rxedResetBarrel
                           A  1833    	.FCALL _f_rxedBarrelSeen
                           A  1834    	.FCALL _f_rxedBarrelAck
                           A  1835    	SEGMENT main_TEXT
000413                     A  1836    _receiveSomething:
                           A  1837    .define "_receiveSomething"
                           A  1838    .value _receiveSomething
                           A  1839    .class 2
                           A  1840    .type 65
                           A  1841    .type 0
                           A  1842    .endef
                           A  1843    .begfunc "receiveSomething",501,"_receiveSometh
000413 D6 0000             A  1844    	CALL	__b_frameset00
                           A  1845    ;  500	
                           A  1846    ;  501	void receiveSomething(void) {
                           A  1847    ;  502		if(captureBuffer.size & 0x80) {
                           A  1848    .line 502
000416 79800011            A  1849    	TMX	_captureBuffer+17,#128
00041A 6B 24               A  1850    	JR	Z,_17_L_114
                           A  1851    ;  503			//There's a block in the buffer
                           A  1852    ;  504			
                           A  1853    ;  505			//Figure out what type it is an
                           A  1854    ;  506			switch(captureBuffer.buffer[0])
                           A  1855    .line 506
00041C 841001              A  1856    	LDX	R1,_captureBuffer+1
00041F B0E0                A  1857    	CLR	R0
000421 2C 00               A  1858    	LD	R2,#high(L__72)
000423 3C 00               A  1859    	LD	R3,#low(L__72)
000425 D6 0000             A  1860    	CALL	__b_ucase
000428 C4E0                A  1861    	JP	@RR0
                           A  1862    ;  507				case 0x00:
00042A                     A  1863    _17_L_100:
                           A  1864    .line 507
                           A  1865    ;  508					//ROLL-CALL
                           A  1866    ;  509					rxedRollCall();
                           A  1867    .line 509
00042A D6 0311             A  1868    	CALL	_rxedRollCall
                           A  1869    ;  510					break;
                           A  1870    .line 510
00042D 8B 0D               A  1871    	JR	_17_L_112
                           A  1872    ;  511				case 0x1E: //NO-ACCY
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  37


PC     Object              I  Line    Source main.src
00042F                     A  1873    _17_L_101:
                           A  1874    .line 511
                           A  1875    ;  512				case 0x1F: //RESET-ALL
00042F                     A  1876    _17_L_102:
                           A  1877    .line 512
                           A  1878    ;  513				case 0x20: //ROLL-REPLY		00042F                     A  1879    _17_L_103:
                           A  1880    .line 513
                           A  1881    ;  514				case 0x5F: //RESET-BARREL
00042F                     A  1882    _17_L_104:
                           A  1883    .line 514
                           A  1884    ;  515				case 0x60: //POWERUP-REPLY
00042F                     A  1885    _17_L_105:
                           A  1886    .line 515
                           A  1887    ;  516				case 0x80: //RADAR-REPLY
00042F                     A  1888    _17_L_106:
                           A  1889    .line 516
                           A  1890    ;  517				case 0xA0: //MASTER-REPLY
00042F                     A  1891    _17_L_107:
                           A  1892    .line 517
                           A  1893    ;  518				case 0xC0: //RHOST-REPLY
00042F                     A  1894    _17_L_108:
                           A  1895    .line 518
                           A  1896    ;  519					//Any of these results 
                           A  1897    ;  520					rxedResetBarrel();
                           A  1898    .line 520
00042F D6 02E6             A  1899    	CALL	_rxedResetBarrel
                           A  1900    ;  521					break;
                           A  1901    .line 521
000432 8B 08               A  1902    	JR	_17_L_112
                           A  1903    ;  522				case 0x40:
000434                     A  1904    _17_L_109:
                           A  1905    .line 522
                           A  1906    ;  523					//BARREL-SEEN
                           A  1907    ;  524					rxedBarrelSeen();
                           A  1908    .line 524
000434 D6 031C             A  1909    	CALL	_rxedBarrelSeen
                           A  1910    ;  525					break;
                           A  1911    .line 525
000437 8B 03               A  1912    	JR	_17_L_112
                           A  1913    ;  526				case 0x41:
000439                     A  1914    _17_L_110:
                           A  1915    .line 526
                           A  1916    ;  527					//BARREL-ACK
                           A  1917    ;  528					rxedBarrelAck();
                           A  1918    .line 528
000439 D6 032A             A  1919    	CALL	_rxedBarrelAck
                           A  1920    ;  529					break;
                           A  1921    ;  530				default:
                           A  1922    ;  531					//Nothing we know how t
                           A  1923    ;  532					break;
                           A  1924    ;  533			}
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  38


PC     Object              I  Line    Source main.src
00043C                     A  1925    _17_L_112:
                           A  1926    .line 533
                           A  1927    ;  534			captureBuffer.size = 0;
                           A  1928    .line 534
00043C E9000011            A  1929    	LDX	_captureBuffer+17,#-0
                           A  1930    ;  535		}
                           A  1931    ;  536	}
000440                     A  1932    _17_L_114:
                           A  1933    .line 536
000440 D6 0000             A  1934    	CALL	__b_framereset
000443 AF                  A  1935    	RET	
                           A  1936    .endfunc "receiveSomething",536,"_receiveSometh
                           A  1937    	SEGMENT ROM_DATA
                           A  1938    
                           A  1939    
                           A  1940    ;**************************** _main ***********
                           A  1941    ;Name                         Addr/Register   S
                           A  1942    ;_sendLoadSpecial                    STATIC    
                           A  1943    ;_reloadCooldown                     STATIC    
                           A  1944    ;_weAreReloading                     STATIC    
                           A  1945    ;_weAreRegistered                    STATIC    
                           A  1946    ;_btn_pressed                        STATIC    
                           A  1947    ;_captureBuffer                      STATIC    
                           A  1948    
                           A  1949    
                           A  1950    ; Aggregate Stack Size: 0 (words)
                           A  1951    
                           A  1952    
                           A  1953    	.FRAME _n_main,?_n_main,RDATA
                           A  1954    	.FCALL _n_init_cpu
                           A  1955    	.FCALL _n_receiveSomething
                           A  1956    	.FCALL _n_sendSomething
                           A  1957    	.FRAME _f_main,?_f_main,EDATA
                           A  1958    	.FCALL _f_init_cpu
                           A  1959    	.FCALL _f_receiveSomething
                           A  1960    	.FCALL _f_sendSomething
                           A  1961    	SEGMENT main_TEXT
000444                     A  1962    _main:
                           A  1963    .define "_main"
                           A  1964    .value _main
                           A  1965    .class 2
                           A  1966    .type 65
                           A  1967    .type 0
                           A  1968    .endef
                           A  1969    .begfunc "main",538,"_main"
000444 D6 0000             A  1970    	CALL	__b_frameset00
                           A  1971    ;  537	
                           A  1972    ;  538	void main(void) {
                           A  1973    ;  539		unsigned char i;
                           A  1974    ;  540		init_cpu();
                           A  1975    .line 540
000447 D6 01B6             A  1976    	CALL	_init_cpu
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  39


PC     Object              I  Line    Source main.src
                           A  1977    ;  541		
                           A  1978    ;  542		//Initialize the checksum.
                           A  1979    ;  543		captureBuffer.checksum = 0xFF;
                           A  1980    .line 543
00044A E9FF0012            A  1981    	LDX	_captureBuffer+18,#255
                           A  1982    ;  544		
                           A  1983    ;  545		while(1) {
00044E                     A  1984    _18_L_119:
                           A  1985    .line 545
                           A  1986    ;  546			//Do stuff here. Not sure what 
                           A  1987    ;  547			
                           A  1988    ;  548			//Debugging thingy.
                           A  1989    ;  549			/*if(!ser_tx_size) {
                           A  1990    ;  550	            //No block ready to TX. Stu
                           A  1991    ;  551	            ser_tx_buffer[0] = 0xAA;
                           A  1992    ;  552				ser_tx_buffer[1] = 0x55;
                           A  1993    ;  553				ser_tx_buffer[2] = 0xAA;
                           A  1994    ;  554				ser_tx_buffer[3] = 0x55;
                           A  1995    ;  555	            ser_tx_size = 4;
                           A  1996    ;  556				IRQ0 |= 0x08;
                           A  1997    ;  557	        } else {
                           A  1998    ;  558				if(!(U0STAT0 ^ 0x06)) {
                           A  1999    ;  559					IRQ0 |= 0x08;
                           A  2000    ;  560				}
                           A  2001    ;  561			}*/
                           A  2002    ;  562			
                           A  2003    ;  563			//More debugging stuff.
                           A  2004    ;  564			//Echo everything back to the t
                           A  2005    ;  565			//Should put it in factory test
                           A  2006    ;  566			/*if((ser_rx_size & 0x80) && !s
                           A  2007    ;  567	            //Block received.
                           A  2008    ;  568	            //Echo it back for testing.
                           A  2009    ;  569	            unsigned char rx_size = (se
                           A  2010    ;  570				int i;
                           A  2011    ;  571				
                           A  2012    ;  572	            for(i = 0; i < rx_size;i++)
                           A  2013    ;  573	                ser_tx_buffer[i] = ser_
                           A  2014    ;  574	            }
                           A  2015    ;  575				
                           A  2016    ;  576	            ser_tx_size = rx_size;
                           A  2017    ;  577	            ser_rx_size = 0;
                           A  2018    ;  578				IRQ0 |= 0x08;
                           A  2019    ;  579	        } else {
                           A  2020    ;  580				if(!(U0STAT0 ^ 0x06)) {
                           A  2021    ;  581					IRQ0 |= 0x08;
                           A  2022    ;  582				}
                           A  2023    ;  583			}*/
                           A  2024    ;  584			
                           A  2025    ;  585			receiveSomething();
                           A  2026    .line 585
00044E D6 0413             A  2027    	CALL	_receiveSomething
                           A  2028    ;  586			sendSomething();
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  40


PC     Object              I  Line    Source main.src
                           A  2029    .line 586
000451 D6 03BF             A  2030    	CALL	_sendSomething
                           A  2031    ;  587			if(btn_pressed && weAreRegister
                           A  2032    .line 587
000454 A900002C            A  2033    	CPX	_btn_pressed,#-0
000458 6B F4               A  2034    	JR	Z,_18_L_119
00045A A9000043            A  2035    	CPX	_weAreRegistered,#-0
00045E 6B EE               A  2036    	JR	Z,_18_L_119
                           A  2037    ;  588				btn_pressed = 0;
                           A  2038    .line 588
000460 E900002C            A  2039    	LDX	_btn_pressed,#-0
                           A  2040    ;  589				if(!weAreReloading && !relo
                           A  2041    .line 589
000464 A9000044            A  2042    	CPX	_weAreReloading,#-0
000468 EB E4               A  2043    	JR	NE,_18_L_119
00046A 840045              A  2044    	LDX	R0,_reloadCooldown
00046D 841046              A  2045    	LDX	R1,_reloadCooldown+1
000470 4201                A  2046    	OR	R0,R1
000472 EB DA               A  2047    	JR	NE,_18_L_119
                           A  2048    ;  590					sendLoadSpecial = 1;
                           A  2049    .line 590
000474 E9010041            A  2050    	LDX	_sendLoadSpecial,#1
                           A  2051    ;  591				}
                           A  2052    ;  592			}
                           A  2053    ;  593		}
                           A  2054    .line 593
000478 8B D4               A  2055    	JR	_18_L_119
                           A  2056    .line 594
00047A D6 0000             A  2057    	CALL	__b_framereset
00047D AF                  A  2058    	RET	
                           A  2059    .endfunc "main",594,"_main"
00000C 008E                A  2060    	VECTOR	TIMER0=_isr_timer0
000010 0047                A  2061    	VECTOR	UART0_TX=_isr_uarttx
00000E 0000                A  2062    	VECTOR	UART0_RX=_isr_uartrx
                           A  2063    	XREF __b_ucase:ROM
                           A  2064    	XREF __b_framereset:ROM
                           A  2065    	XREF __b_iframereset:ROM
                           A  2066    	XREF __b_frameset00:ROM
                           A  2067    	XREF __b_iframeset00:ROM
                           A  2068    	XDEF _main
                           A  2069    	XDEF _receiveSomething
                           A  2070    	XDEF _sendSomething
                           A  2071    	XDEF _ArmSpecial
                           A  2072    	XDEF _LoadSpecial
                           A  2073    	XDEF _BarrelReply
                           A  2074    	XDEF _rxedBarrelAck
                           A  2075    	XDEF _rxedBarrelSeen
                           A  2076    	XDEF _rxedRollCall
                           A  2077    	XDEF _rxedResetBarrel
                           A  2078    	XDEF _loadAmmo
                           A  2079    	XDEF _queueChecksum
                           A  2080    	XDEF _queueByte
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     14:14:45     page:  41


PC     Object              I  Line    Source main.src
                           A  2081    	XDEF _sendQueue
                           A  2082    	XDEF _init_cpu
                           A  2083    	XDEF _isr_timer0
                           A  2084    	XDEF _isr_uarttx
                           A  2085    	XDEF _isr_uartrx
                           A  2086    	XDEF _reloadCooldown
                           A  2087    	XDEF _weAreReloading
                           A  2088    	XDEF _weAreRegistered
                           A  2089    	XDEF _sendArmSpecial
                           A  2090    	XDEF _sendLoadSpecial
                           A  2091    	XDEF _sendBarrelReply
                           A  2092    	XDEF _temp_tx_size
                           A  2093    	XDEF _temp_tx_buffer
                           A  2094    	XDEF _lastIO
                           A  2095    	XDEF _tempIO
                           A  2096    	XDEF _btn_pressed
                           A  2097    	XDEF _btn_prelim
                           A  2098    	XDEF _btn_counter
                           A  2099    	XDEF _ir_loaded_tags
                           A  2100    	XDEF _ir_rx_bits
                           A  2101    	XDEF _ir_rx_counter
                           A  2102    	XDEF _ser_tx_currentbyte
                           A  2103    	XDEF _ser_tx_cooldown
                           A  2104    	XDEF _ser_tx_size
                           A  2105    	XDEF _ser_tx_buffer
                           A  2106    	XDEF _ser_rx_eob_counter
                           A  2107    	XDEF _captureBuffer
                           A  2108    	END


Errors: 0
Warnings: 0
Lines Assembled: 2109
