Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -fastcall -const=RAM -mo
                           A     3    ; -nooptlink -regvar -reduceopt -debug -norevaa
                           A     4    ; -alias 
                           A     5    	DEFINE main_TEXT,SPACE=ROM
                           A     6    	FILE	"..\..\LTX-RA~1\MAIN.C"
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_BSS
000000                     A     9    _captureBuffer:
000000                     A    10    	DS	19
                           A    11    .define "captureBuffer"
                           A    12    .alias "_captureBuffer"
                           A    13    .class 83
                           A    14    .value _captureBuffer
                           A    15    .tag "ser_rx"
                           A    16    .type 8
                           A    17    .type 0
                           A    18    .endef
                           A    19    	SEGMENT main_TEXT
                           A    20    .begrec "ser_rx",19
                           A    21    .define "hasrxed"
                           A    22    .value 0
                           A    23    .class 8
                           A    24    .type 12
                           A    25    .type 0
                           A    26    .endef
                           A    27    .define "buffer"
                           A    28    .value 1
                           A    29    .class 8
                           A    30    .dim 16
                           A    31    .type 108
                           A    32    .type 0
                           A    33    .endef
                           A    34    .define "size"
                           A    35    .value 17
                           A    36    .class 8
                           A    37    .type 12
                           A    38    .type 0
                           A    39    .endef
                           A    40    .define "checksum"
                           A    41    .value 18
                           A    42    .class 8
                           A    43    .type 12
                           A    44    .type 0
                           A    45    .endef
                           A    46    .endrec "ser_rx"
                           A    47    	SEGMENT FAR_BSS
000013                     A    48    _ser_rx_eob_counter:
000013                     A    49    	DS	1
                           A    50    .define "ser_rx_eob_counter"
                           A    51    .alias "_ser_rx_eob_counter"
                           A    52    .class 83
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .value _ser_rx_eob_counter
                           A    54    .type 12
                           A    55    .type 0
                           A    56    .endef
000014                     A    57    _ser_tx_buffer:
000014                     A    58    	DS	16
                           A    59    .define "ser_tx_buffer"
                           A    60    .alias "_ser_tx_buffer"
                           A    61    .class 83
                           A    62    .value _ser_tx_buffer
                           A    63    .dim 16
                           A    64    .type 108
                           A    65    .type 0
                           A    66    .endef
000024                     A    67    _ser_tx_size:
000024                     A    68    	DS	1
                           A    69    .define "ser_tx_size"
                           A    70    .alias "_ser_tx_size"
                           A    71    .class 83
                           A    72    .value _ser_tx_size
                           A    73    .type 12
                           A    74    .type 0
                           A    75    .endef
000025                     A    76    _ser_tx_cooldown:
000025                     A    77    	DS	1
                           A    78    .define "ser_tx_cooldown"
                           A    79    .alias "_ser_tx_cooldown"
                           A    80    .class 83
                           A    81    .value _ser_tx_cooldown
                           A    82    .type 12
                           A    83    .type 0
                           A    84    .endef
000026                     A    85    _ser_tx_currentbyte:
000026                     A    86    	DS	1
                           A    87    .define "ser_tx_currentbyte"
                           A    88    .alias "_ser_tx_currentbyte"
                           A    89    .class 83
                           A    90    .value _ser_tx_currentbyte
                           A    91    .type 12
                           A    92    .type 0
                           A    93    .endef
000027                     A    94    _ir_rx_counter:
000027                     A    95    	DS	1
                           A    96    .define "ir_rx_counter"
                           A    97    .alias "_ir_rx_counter"
                           A    98    .class 83
                           A    99    .value _ir_rx_counter
                           A   100    .type 12
                           A   101    .type 0
                           A   102    .endef
000028                     A   103    _ir_rx_halfbits:
000028                     A   104    	DS	1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .define "ir_rx_halfbits"
                           A   106    .alias "_ir_rx_halfbits"
                           A   107    .class 83
                           A   108    .value _ir_rx_halfbits
                           A   109    .type 12
                           A   110    .type 0
                           A   111    .endef
000029                     A   112    _ir_loaded_tags:
000029                     A   113    	DS	1
                           A   114    .define "ir_loaded_tags"
                           A   115    .alias "_ir_loaded_tags"
                           A   116    .class 83
                           A   117    .value _ir_loaded_tags
                           A   118    .type 12
                           A   119    .type 0
                           A   120    .endef
00002A                     A   121    _btn_counter:
00002A                     A   122    	DS	1
                           A   123    .define "btn_counter"
                           A   124    .alias "_btn_counter"
                           A   125    .class 83
                           A   126    .value _btn_counter
                           A   127    .type 12
                           A   128    .type 0
                           A   129    .endef
00002B                     A   130    _btn_prelim:
00002B                     A   131    	DS	1
                           A   132    .define "btn_prelim"
                           A   133    .alias "_btn_prelim"
                           A   134    .class 83
                           A   135    .value _btn_prelim
                           A   136    .type 12
                           A   137    .type 0
                           A   138    .endef
00002C                     A   139    _btn_pressed:
00002C                     A   140    	DS	1
                           A   141    .define "btn_pressed"
                           A   142    .alias "_btn_pressed"
                           A   143    .class 83
                           A   144    .value _btn_pressed
                           A   145    .type 12
                           A   146    .type 0
                           A   147    .endef
00002D                     A   148    _tempIO:
00002D                     A   149    	DS	1
                           A   150    .define "tempIO"
                           A   151    .alias "_tempIO"
                           A   152    .class 83
                           A   153    .value _tempIO
                           A   154    .type 12
                           A   155    .type 0
                           A   156    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   4


PC     Object              I  Line    Source main.src
00002E                     A   157    _lastIO:
00002E                     A   158    	DS	1
                           A   159    .define "lastIO"
                           A   160    .alias "_lastIO"
                           A   161    .class 83
                           A   162    .value _lastIO
                           A   163    .type 12
                           A   164    .type 0
                           A   165    .endef
00002F                     A   166    _temp_tx_buffer:
00002F                     A   167    	DS	16
                           A   168    .define "temp_tx_buffer"
                           A   169    .alias "_temp_tx_buffer"
                           A   170    .class 83
                           A   171    .value _temp_tx_buffer
                           A   172    .dim 16
                           A   173    .type 108
                           A   174    .type 0
                           A   175    .endef
00003F                     A   176    _temp_tx_size:
00003F                     A   177    	DS	1
                           A   178    .define "temp_tx_size"
                           A   179    .alias "_temp_tx_size"
                           A   180    .class 83
                           A   181    .value _temp_tx_size
                           A   182    .type 12
                           A   183    .type 0
                           A   184    .endef
000040                     A   185    _sendBarrelReply:
000040                     A   186    	DS	1
                           A   187    .define "sendBarrelReply"
                           A   188    .alias "_sendBarrelReply"
                           A   189    .class 83
                           A   190    .value _sendBarrelReply
                           A   191    .type 12
                           A   192    .type 0
                           A   193    .endef
000041                     A   194    _sendLoadSpecial:
000041                     A   195    	DS	1
                           A   196    .define "sendLoadSpecial"
                           A   197    .alias "_sendLoadSpecial"
                           A   198    .class 83
                           A   199    .value _sendLoadSpecial
                           A   200    .type 12
                           A   201    .type 0
                           A   202    .endef
000042                     A   203    _sendArmSpecial:
000042                     A   204    	DS	1
                           A   205    .define "sendArmSpecial"
                           A   206    .alias "_sendArmSpecial"
                           A   207    .class 83
                           A   208    .value _sendArmSpecial
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   5


PC     Object              I  Line    Source main.src
                           A   209    .type 12
                           A   210    .type 0
                           A   211    .endef
000043                     A   212    _weAreRegistered:
000043                     A   213    	DS	1
                           A   214    .define "weAreRegistered"
                           A   215    .alias "_weAreRegistered"
                           A   216    .class 83
                           A   217    .value _weAreRegistered
                           A   218    .type 12
                           A   219    .type 0
                           A   220    .endef
000044                     A   221    _weAreReloading:
000044                     A   222    	DS	1
                           A   223    .define "weAreReloading"
                           A   224    .alias "_weAreReloading"
                           A   225    .class 83
                           A   226    .value _weAreReloading
                           A   227    .type 12
                           A   228    .type 0
                           A   229    .endef
000045                     A   230    _reloadCooldown:
000045                     A   231    	DS	2*1
                           A   232    .define "reloadCooldown"
                           A   233    .alias "_reloadCooldown"
                           A   234    .class 83
                           A   235    .value _reloadCooldown
                           A   236    .type 13
                           A   237    .type 0
                           A   238    .endef
                           A   239    	SEGMENT ROM_DATA
                           A   240    
                           A   241    
                           A   242    ;**************************** _isr_uartrx *****
                           A   243    ;Name                         Addr/Register   S
                           A   244    ;_ser_rx_eob_counter                 STATIC    
                           A   245    ;_captureBuffer                      STATIC    
                           A   246    ;temp                                    R0    
                           A   247    
                           A   248    
                           A   249    ; Aggregate Stack Size: 0 (words)
                           A   250    
                           A   251    
                           A   252    	.FRAME _n_isr_uartrx,?_n_isr_uartrx,RDATA
                           A   253    	.FRAME _f_isr_uartrx,?_f_isr_uartrx,EDATA
                           A   254    	SEGMENT main_TEXT
000000                     A   255    _isr_uartrx:
                           A   256    .define "_isr_uartrx"
                           A   257    .value _isr_uartrx
                           A   258    .class 2
                           A   259    .type 65
                           A   260    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   6


PC     Object              I  Line    Source main.src
                           A   261    .endef
                           A   262    .begfunc "isr_uartrx",128,"_isr_uartrx"
                           A   263    ;    1	/*
                           A   264    ;    2	*   DIY LTX RapidFire
                           A   265    ;    3	*   Copyright (C) 2013  Ryan L. "Izzy84
                           A   266    ;    4	*
                           A   267    ;    5	*    This program is free software; you
                           A   268    ;    6	*    it under the terms of the GNU Gene
                           A   269    ;    7	*    the Free Software Foundation; eith
                           A   270    ;    8	*    (at your option) any later version
                           A   271    ;    9	*
                           A   272    ;   10	*    This program is distributed in the
                           A   273    ;   11	*    but WITHOUT ANY WARRANTY; without 
                           A   274    ;   12	*    MERCHANTABILITY or FITNESS FOR A P
                           A   275    ;   13	*    GNU General Public License for mor
                           A   276    ;   14	*
                           A   277    ;   15	*    You should have received a copy of
                           A   278    ;   16	*    with this program; if not, write t
                           A   279    ;   17	*    51 Franklin Street, Fifth Floor, B
                           A   280    ;   18	*/
                           A   281    ;   19	
                           A   282    ;   20	#include <ez8.h>
                           A   283    ;   21	
                           A   284    ;   22	#define WEAPONPROFILE 1		/* 	1: Mach
                           A   285    ;   23									2: Snip
                           A   286    ;   24								*/
                           A   287    ;   25	
                           A   288    ;   26	#if WEAPONPROFILE==1
                           A   289    ;   27		//Machinegun
                           A   290    ;   28		#define BARRELTYPE 2		//Barre
                           A   291    ;   29									// Othe
                           A   292    ;   30		#define AMMONEEDED 15		//Ammo 
                           A   293    ;   31									// Rang
                           A   294    ;   32		#define AMMO 15				//Ammo 
                           A   295    ;   33									// Shou
                           A   296    ;   34		#define DOUBLETAPS 0		//Doubl
                           A   297    ;   35		#define BURSTSIZE 15		//Burst
                           A   298    ;   36									// Rang
                           A   299    ;   37		#define TRIGRATE 16			//TrigR
                           A   300    ;   38									// Rang
                           A   301    ;   39		#define LOADSFX 14			//LoadS
                           A   302    ;   40		#define FIRESFX 11			//FireS
                           A   303    ;   41									// spec
                           A   304    ;   42									//SFX f
                           A   305    ;   43									// 0: N
                           A   306    ;   44									// 1: S
                           A   307    ;   45									// 2: E
                           A   308    ;   46									// 3: T
                           A   309    ;   47									// 4: A
                           A   310    ;   48									// 5: A
                           A   311    ;   49									// 6: S
                           A   312    ;   50									// 7: S
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   7


PC     Object              I  Line    Source main.src
                           A   313    ;   51									// 8: S
                           A   314    ;   52									// 9: S
                           A   315    ;   53									// 10: 
                           A   316    ;   54									// 11: 
                           A   317    ;   55									// 12: 
                           A   318    ;   56									// 13: 
                           A   319    ;   57									// 14: 
                           A   320    ;   58		#define DISPLAYMODE	0		//Displ
                           A   321    ;   59									//Known
                           A   322    ;   60									// 0x00
                           A   323    ;   61									// 0x20
                           A   324    ;   62									// 0x40
                           A   325    ;   63									// 0x80
                           A   326    ;   64									// Usin
                           A   327    ;   65		#define RELOADMIDCLIP 1		//Wheth
                           A   328    ;   66	#endif	
                           A   329    ;   67	
                           A   330    ;   68	#if WEAPONPROFILE==2
                           A   331    ;   69		//Sniper
                           A   332    ;   70		#define BARRELTYPE 3
                           A   333    ;   71		#define AMMONEEDED 12
                           A   334    ;   72		#define AMMO 4
                           A   335    ;   73		#define DOUBLETAPS 3
                           A   336    ;   74		#define BURSTSIZE 1
                           A   337    ;   75		#define TRIGRATE 200
                           A   338    ;   76		#define LOADSFX 14
                           A   339    ;   77		#define FIRESFX 13
                           A   340    ;   78		#define DISPLAYMODE 0
                           A   341    ;   79		#define RELOADMIDCLIP 0
                           A   342    ;   80	#endif
                           A   343    ;   81	
                           A   344    ;   82	//Beyond this is the actual code. Unles
                           A   345    ;   83	// probably don't need to go beyond her
                           A   346    ;   84	/**************************************
                           A   347    ;   85	***************************************
                           A   348    ;   86	*                                      
                           A   349    ;   87	*        DANGER                        
                           A   350    ;   88	*                                      
                           A   351    ;   89	***************************************
                           A   352    ;   90	***************************************
                           A   353    ;   91	
                           A   354    ;   92	struct ser_rx {
                           A   355    ;   93		volatile unsigned char hasrxed;
                           A   356    ;   94		volatile unsigned char buffer[16];
                           A   357    ;   95		volatile unsigned char size;
                           A   358    ;   96		volatile unsigned char checksum;
                           A   359    ;   97	} captureBuffer;
                           A   360    ;   98	
                           A   361    ;   99	volatile unsigned char ser_rx_eob_count
                           A   362    ;  100	
                           A   363    ;  101	volatile unsigned char ser_tx_buffer[16
                           A   364    ;  102	volatile unsigned char ser_tx_size;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   8


PC     Object              I  Line    Source main.src
                           A   365    ;  103	volatile unsigned char ser_tx_cooldown;
                           A   366    ;  104	volatile unsigned char ser_tx_currentby
                           A   367    ;  105	
                           A   368    ;  106	volatile unsigned char ir_rx_counter;
                           A   369    ;  107	volatile unsigned char ir_rx_halfbits;
                           A   370    ;  108	volatile unsigned char ir_loaded_tags;
                           A   371    ;  109	
                           A   372    ;  110	volatile unsigned char btn_counter;
                           A   373    ;  111	volatile unsigned char btn_prelim;
                           A   374    ;  112	volatile unsigned char btn_pressed;
                           A   375    ;  113	
                           A   376    ;  114	volatile unsigned char tempIO;
                           A   377    ;  115	volatile unsigned char lastIO;
                           A   378    ;  116	
                           A   379    ;  117	volatile unsigned char temp_tx_buffer[1
                           A   380    ;  118	volatile unsigned char temp_tx_size;
                           A   381    ;  119	
                           A   382    ;  120	volatile unsigned char sendBarrelReply;
                           A   383    ;  121	volatile unsigned char sendLoadSpecial;
                           A   384    ;  122	volatile unsigned char sendArmSpecial;
                           A   385    ;  123	volatile unsigned char weAreRegistered;
                           A   386    ;  124	volatile unsigned char weAreReloading;
                           A   387    ;  125	
                           A   388    ;  126	volatile unsigned int reloadCooldown;
                           A   389    ;  127	
                           A   390    ;  128	void interrupt isr_uartrx(void) {
                           A   391    .define "temp"
                           A   392    .class 4
                           A   393    .reg 1
                           A   394    .type 12
                           A   395    .type 0
                           A   396    .endef
000000 C8FFD0              A   397    	PUSHX	4093
000003 D6 0000             A   398    	CALL	__b_iframeset00
                           A   399    ;  129		unsigned char temp;
                           A   400    ;  130		
                           A   401    ;  131		temp = U0RXD;
                           A   402    .line 131
000006 840F40              A   403    	LDX	R0,3904
                           A   404    ;  132		//Byte received
                           A   405    ;  133		if((U0STAT0 & 0x78) == 0x78) {
                           A   406    .line 133
000009 841F41              A   407    	LDX	R1,3905
00000C 56E178              A   408    	AND	R1,#120
00000F E4E1E2              A   409    	LD	R2,R1
000012 A6E178              A   410    	CP	R1,#120
000015 6B 2C               A   411    	JR	Z,_1_L_5
                           A   412    ;  134			//Error during reception. Do no
                           A   413    ;  135			return;
                           A   414    .line 135
                           A   415    ;  136		} else {
                           A   416    .line 136
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:   9


PC     Object              I  Line    Source main.src
                           A   417    ;  137			//If the interrupt was because 
                           A   418    ;  138			if(!(captureBuffer.size & 0x80)
                           A   419    .line 138
000017 79800011            A   420    	TMX	_captureBuffer+17,#128
00001B EB 22               A   421    	JR	NE,_1_L_4
                           A   422    ;  139				captureBuffer.buffer[captur
                           A   423    .line 139
00001D 841011              A   424    	LDX	R1,_captureBuffer+17
000020 E4E1E2              A   425    	LD	R2,R1
000023 2C 00               A   426    	LD	R2,#high(_captureBuffer+1)
000025 3C 01               A   427    	LD	R3,#low(_captureBuffer+1)
000027 0231                A   428    	ADD	R3,R1
000029 16E200              A   429    	ADC	R2,#0
00002C 96E0E2              A   430    	LDX	@RR2,R0
00002F 09010011            A   431    	ADDX	_captureBuffer+17,#1
                           A   432    ;  140				captureBuffer.checksum -= t
                           A   433    .line 140
000033 28EE0012            A   434    	SUBX	_captureBuffer+18,R0
                           A   435    ;  141				ser_rx_eob_counter = 0; //C
                           A   436    .line 141
000037 E9000013            A   437    	LDX	_ser_rx_eob_counter,#-0
                           A   438    ;  142				captureBuffer.hasrxed = 1; 
                           A   439    .line 142
00003B E9010000            A   440    	LDX	_captureBuffer,#1
                           A   441    ;  143			}
                           A   442    ;  144		}
00003F                     A   443    _1_L_4:
                           A   444    .line 144
                           A   445    ;  145		//Clear the interrupt bit
                           A   446    ;  146		IRQ0 &= 0xEF;
                           A   447    .line 146
00003F 59EF0FC0            A   448    	ANDX	4032,#239
                           A   449    ;  147	}
000043                     A   450    _1_L_5:
                           A   451    .line 147
000043 D6 0000             A   452    	CALL	__b_iframereset
000046 BF                  A   453    	IRET	
                           A   454    .endfunc "isr_uartrx",147,"_isr_uartrx"
                           A   455    	SEGMENT ROM_DATA
                           A   456    
                           A   457    
                           A   458    ;**************************** _isr_uarttx *****
                           A   459    ;Name                         Addr/Register   S
                           A   460    ;_ser_tx_buffer                      STATIC    
                           A   461    ;_ser_tx_currentbyte                 STATIC    
                           A   462    ;_ser_tx_cooldown                    STATIC    
                           A   463    ;_ser_tx_size                        STATIC    
                           A   464    
                           A   465    
                           A   466    ; Aggregate Stack Size: 0 (words)
                           A   467    
                           A   468    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  10


PC     Object              I  Line    Source main.src
                           A   469    	.FRAME _n_isr_uarttx,?_n_isr_uarttx,RDATA
                           A   470    	.FRAME _f_isr_uarttx,?_f_isr_uarttx,EDATA
                           A   471    	SEGMENT main_TEXT
000047                     A   472    _isr_uarttx:
                           A   473    .define "_isr_uarttx"
                           A   474    .value _isr_uarttx
                           A   475    .class 2
                           A   476    .type 65
                           A   477    .type 0
                           A   478    .endef
                           A   479    .begfunc "isr_uarttx",149,"_isr_uarttx"
000047 C8FFD0              A   480    	PUSHX	4093
00004A D6 0000             A   481    	CALL	__b_iframeset00
                           A   482    ;  148	
                           A   483    ;  149	void interrupt isr_uarttx(void) {
                           A   484    ;  150		//Ready to transmit a byte
                           A   485    ;  151		if(ser_tx_size && !ser_tx_cooldown)
                           A   486    .line 151
00004D A9000024            A   487    	CPX	_ser_tx_size,#-0
000051 6B 33               A   488    	JR	Z,_2_L_11
000053 A9000025            A   489    	CPX	_ser_tx_cooldown,#-0
000057 EB 2D               A   490    	JR	NE,_2_L_11
                           A   491    ;  152			if(ser_tx_currentbyte == ser_tx
                           A   492    .line 152
000059 A8 024026           A   493    	CPX	_ser_tx_currentbyte,_ser_tx_size
00005D EB 0E               A   494    	JR	NE,_2_L_9
                           A   495    ;  153				ser_tx_currentbyte = 0; //R
                           A   496    .line 153
00005F E9000026            A   497    	LDX	_ser_tx_currentbyte,#-0
                           A   498    ;  154				ser_tx_size = 0; 		//C
                           A   499    .line 154
000063 E9000024            A   500    	LDX	_ser_tx_size,#-0
                           A   501    ;  155				ser_tx_cooldown = 116; 	//A
                           A   502    .line 155
000067 E9740025            A   503    	LDX	_ser_tx_cooldown,#116
                           A   504    ;  156										//S
                           A   505    ;  157										//,
                           A   506    ;  158										//,
                           A   507    ;  159										//T
                           A   508    ;  160			} else { //There's still bytes 
                           A   509    .line 160
00006B 8B 19               A   510    	JR	_2_L_11
00006D                     A   511    _2_L_9:
                           A   512    ;  161				U0TXD = ser_tx_buffer[ser_t
                           A   513    .line 161
00006D 842026              A   514    	LDX	R2,_ser_tx_currentbyte
000070 0C 00               A   515    	LD	R0,#high(_ser_tx_buffer)
000072 1C 14               A   516    	LD	R1,#low(_ser_tx_buffer)
000074 0212                A   517    	ADD	R1,R2
000076 16E000              A   518    	ADC	R0,#0
000079 86E0E2              A   519    	LDX	R2,@RR0
00007C 942F40              A   520    	LDX	3904,R2
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  11


PC     Object              I  Line    Source main.src
                           A   521    ;  162				ser_tx_currentbyte++; //Adv
                           A   522    .line 162
00007F 840026              A   523    	LDX	R0,_ser_tx_currentbyte
000082 09010026            A   524    	ADDX	_ser_tx_currentbyte,#1
                           A   525    ;  163			}
                           A   526    ;  164		}
000086                     A   527    _2_L_11:
                           A   528    .line 164
                           A   529    ;  165		//Clear the interrupt bit.
                           A   530    ;  166		IRQ0 &= 0xF7;
                           A   531    .line 166
000086 59F70FC0            A   532    	ANDX	4032,#247
                           A   533    ;  167	}
                           A   534    .line 167
00008A D6 0000             A   535    	CALL	__b_iframereset
00008D BF                  A   536    	IRET	
                           A   537    .endfunc "isr_uarttx",167,"_isr_uarttx"
                           A   538    	SEGMENT ROM_DATA
                           A   539    
                           A   540    
                           A   541    ;**************************** _isr_timer0 *****
                           A   542    ;Name                         Addr/Register   S
                           A   543    ;_ir_loaded_tags                     STATIC    
                           A   544    ;_ir_rx_counter                      STATIC    
                           A   545    ;_ir_rx_halfbits                     STATIC    
                           A   546    ;_btn_pressed                        STATIC    
                           A   547    ;_btn_prelim                         STATIC    
                           A   548    ;_btn_counter                        STATIC    
                           A   549    ;_captureBuffer                      STATIC    
                           A   550    ;_reloadCooldown                     STATIC    
                           A   551    ;_ser_tx_cooldown                    STATIC    
                           A   552    ;_ser_rx_eob_counter                 STATIC    
                           A   553    ;_lastIO                             STATIC    
                           A   554    ;_tempIO                             STATIC    
                           A   555    
                           A   556    
                           A   557    ; Aggregate Stack Size: 0 (words)
                           A   558    
                           A   559    
                           A   560    	.FRAME _n_isr_timer0,?_n_isr_timer0,RDATA
                           A   561    	.FRAME _f_isr_timer0,?_f_isr_timer0,EDATA
                           A   562    	SEGMENT main_TEXT
00008E                     A   563    _isr_timer0:
                           A   564    .define "_isr_timer0"
                           A   565    .value _isr_timer0
                           A   566    .class 2
                           A   567    .type 65
                           A   568    .type 0
                           A   569    .endef
                           A   570    .begfunc "isr_timer0",169,"_isr_timer0"
00008E C8FFD0              A   571    	PUSHX	4093
000091 D6 0000             A   572    	CALL	__b_iframeset00
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  12


PC     Object              I  Line    Source main.src
                           A   573    ;  168	
                           A   574    ;  169	void interrupt isr_timer0(void) {
                           A   575    ;  170		//8KHz interrupt.
                           A   576    ;  171		
                           A   577    ;  172		lastIO = tempIO;
                           A   578    .line 172
000094 E8 02D02E           A   579    	LDX	_lastIO,_tempIO
                           A   580    ;  173		tempIO = PAIN;
                           A   581    .line 173
000098 E8FD202D            A   582    	LDX	_tempIO,4050
                           A   583    ;  174		
                           A   584    ;  175		//Various 1/8ms timers
                           A   585    ;  176		ser_rx_eob_counter += 1;
                           A   586    .line 176
00009C 09010013            A   587    	ADDX	_ser_rx_eob_counter,#1
                           A   588    ;  177		if(ser_tx_cooldown) {
                           A   589    .line 177
0000A0 A9000025            A   590    	CPX	_ser_tx_cooldown,#-0
0000A4 6B 04               A   591    	JR	Z,_3_L_15
                           A   592    ;  178			ser_tx_cooldown -= 1;
                           A   593    .line 178
0000A6 29010025            A   594    	SUBX	_ser_tx_cooldown,#1
                           A   595    ;  179		}
0000AA                     A   596    _3_L_15:
                           A   597    .line 179
                           A   598    ;  180		if(reloadCooldown) {
                           A   599    .line 180
0000AA 840045              A   600    	LDX	R0,_reloadCooldown
0000AD 841046              A   601    	LDX	R1,_reloadCooldown+1
0000B0 4201                A   602    	OR	R0,R1
0000B2 6B 08               A   603    	JR	Z,_3_L_21
                           A   604    ;  181			reloadCooldown -= 1;
                           A   605    .line 181
0000B4 29010046            A   606    	SUBX	_reloadCooldown+1,#1
0000B8 39000045            A   607    	SBCX	_reloadCooldown,#-0
                           A   608    ;  182		}
0000BC                     A   609    _3_L_21:
                           A   610    .line 182
                           A   611    ;  183		
                           A   612    ;  184		//Serial RX end-of-block stuff.
                           A   613    ;  185		//When the RX line has been idle fo
                           A   614    ;  186		// The block has finished transmitt
                           A   615    ;  187		if((ser_rx_eob_counter == 60) && ca
                           A   616    .line 187
0000BC A93C0013            A   617    	CPX	_ser_rx_eob_counter,#60
0000C0 EB 1E               A   618    	JR	NE,_3_L_29
0000C2 A9000000            A   619    	CPX	_captureBuffer,#-0
0000C6 6B 18               A   620    	JR	Z,_3_L_29
                           A   621    ;  188	        captureBuffer.hasrxed = 0;
                           A   622    .line 188
0000C8 E9000000            A   623    	LDX	_captureBuffer,#-0
                           A   624    ;  189	        if(!captureBuffer.checksum) {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  13


PC     Object              I  Line    Source main.src
                           A   625    .line 189
0000CC A9000012            A   626    	CPX	_captureBuffer+18,#-0
0000D0 EB 06               A   627    	JR	NE,_3_L_18
                           A   628    ;  190				//The easiest way to check 
                           A   629    ;  191				// including the checksum b
                           A   630    ;  192				// the block was received c
                           A   631    ;  193	            captureBuffer.size |= 0x80;
                           A   632    .line 193
0000D2 49800011            A   633    	ORX	_captureBuffer+17,#128
                           A   634    ;  194	        } else {
                           A   635    .line 194
0000D6 8B 04               A   636    	JR	_3_L_19
0000D8                     A   637    _3_L_18:
                           A   638    ;  195	            captureBuffer.size = 0; //C
                           A   639    .line 195
0000D8 E9000011            A   640    	LDX	_captureBuffer+17,#-0
                           A   641    ;  196	        }
0000DC                     A   642    _3_L_19:
                           A   643    .line 196
                           A   644    ;  197	        captureBuffer.checksum = 0xFF; 
                           A   645    .line 197
0000DC E9FF0012            A   646    	LDX	_captureBuffer+18,#255
                           A   647    ;  198	    }
0000E0                     A   648    _3_L_29:
                           A   649    .line 198
                           A   650    ;  199		
                           A   651    ;  200		//Button stuff
                           A   652    ;  201		//If the button is not in the state
                           A   653    ;  202		// just pressed the button.
                           A   654    ;  203		if((tempIO & 0x01) != (lastIO & 0x0
                           A   655    .line 203
0000E0 84002D              A   656    	LDX	R0,_tempIO
0000E3 56E001              A   657    	AND	R0,#1
0000E6 84102E              A   658    	LDX	R1,_lastIO
0000E9 56E101              A   659    	AND	R1,#1
0000EC A201                A   660    	CP	R0,R1
0000EE 6B 16               A   661    	JR	Z,_3_L_28
                           A   662    ;  204	        //Button state changed, clear t
                           A   663    ;  205	        btn_counter = 0;
                           A   664    .line 205
0000F0 E900002A            A   665    	LDX	_btn_counter,#-0
                           A   666    ;  206	        if(!(tempIO & 0x01)) {
                           A   667    .line 206
0000F4 7901002D            A   668    	TMX	_tempIO,#1
0000F8 EB 06               A   669    	JR	NE,_3_L_23
                           A   670    ;  207	            //Was just pressed
                           A   671    ;  208	            //Set a flag that it's been
                           A   672    ;  209	            btn_prelim = 1;
                           A   673    .line 209
0000FA E901002B            A   674    	LDX	_btn_prelim,#1
                           A   675    ;  210	        } else {
                           A   676    .line 210
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  14


PC     Object              I  Line    Source main.src
0000FE 8B 21               A   677    	JR	_3_L_54
000100                     A   678    _3_L_23:
                           A   679    ;  211				//Was just released
                           A   680    ;  212				btn_prelim = 0;
                           A   681    .line 212
000100 E900002B            A   682    	LDX	_btn_prelim,#-0
                           A   683    ;  213			}
                           A   684    ;  214	    } else {
                           A   685    .line 214
000104 8B 1B               A   686    	JR	_3_L_54
000106                     A   687    _3_L_28:
                           A   688    ;  215			//Button is still in whatever s
                           A   689    ;  216	        btn_counter++; //Count how long
                           A   690    .line 216
000106 84002A              A   691    	LDX	R0,_btn_counter
000109 0901002A            A   692    	ADDX	_btn_counter,#1
                           A   693    ;  217	        if(btn_prelim && (btn_counter >
                           A   694    .line 217
00010D A900002B            A   695    	CPX	_btn_prelim,#-0
000111 6B 0E               A   696    	JR	Z,_3_L_54
000113 A903002A            A   697    	CPX	_btn_counter,#3
000117 3B 08               A   698    	JR	ULE,_3_L_54
                           A   699    ;  218	            btn_prelim = 0;
                           A   700    .line 218
000119 E900002B            A   701    	LDX	_btn_prelim,#-0
                           A   702    ;  219	            btn_pressed = 1; //Mark tha
                           A   703    .line 219
00011D E901002C            A   704    	LDX	_btn_pressed,#1
                           A   705    ;  220	        }
                           A   706    ;  221	    }
000121                     A   707    _3_L_54:
                           A   708    .line 221
                           A   709    ;  222		
                           A   710    ;  223		//IR stuff
                           A   711    ;  224		//If we have ammo loaded in the att
                           A   712    ;  225		// switch back to pistol mode. This
                           A   713    ;  226		// right header and length.
                           A   714    ;  227		if((tempIO & 0x08) != (lastIO & 0x0
                           A   715    .line 227
000121 84002D              A   716    	LDX	R0,_tempIO
000124 56E008              A   717    	AND	R0,#8
000127 84102E              A   718    	LDX	R1,_lastIO
00012A 56E108              A   719    	AND	R1,#8
00012D A201                A   720    	CP	R0,R1
00012F 6B 4F               A   721    	JR	Z,_3_L_53
                           A   722    ;  228			//LAZERMOD's state has changed
                           A   723    ;  229			 if(ir_rx_halfbits == 1) {
                           A   724    .line 229
000131 A9010028            A   725    	CPX	_ir_rx_halfbits,#1
000135 EB 15               A   726    	JR	NE,_3_L_42
                           A   727    ;  230				//if((ir_rx_counter > 22) &
                           A   728    ;  231				 if((ir_rx_counter > 45) &&
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  15


PC     Object              I  Line    Source main.src
                           A   729    .line 231
000137 A92D0027            A   730    	CPX	_ir_rx_counter,#45
00013B 3B 3D               A   731    	JR	ULE,_3_L_43
00013D A9330027            A   732    	CPX	_ir_rx_counter,#51
000141 FB 37               A   733    	JR	NC,_3_L_43
                           A   734    ;  232					//If it's between 5.75m
                           A   735    ;  233					//This is actually the 
                           A   736    ;  234					// to work.
                           A   737    ;  235					ir_rx_halfbits++;
                           A   738    .line 235
000143 840028              A   739    	LDX	R0,_ir_rx_halfbits
000146 09010028            A   740    	ADDX	_ir_rx_halfbits,#1
                           A   741    ;  236				}
                           A   742    ;  237			 } else if(ir_rx_halfbits < 3) 
                           A   743    .line 237
00014A 8B 2E               A   744    	JR	_3_L_43
00014C                     A   745    _3_L_42:
00014C A9030028            A   746    	CPX	_ir_rx_halfbits,#3
000150 FB 15               A   747    	JR	NC,_3_L_40
                           A   748    ;  238				//if((ir_rx_counter > 10) &
                           A   749    ;  239				 if((ir_rx_counter > 21) &&
                           A   750    .line 239
000152 A9150027            A   751    	CPX	_ir_rx_counter,#21
000156 3B 22               A   752    	JR	ULE,_3_L_43
000158 A91B0027            A   753    	CPX	_ir_rx_counter,#27
00015C FB 1C               A   754    	JR	NC,_3_L_43
                           A   755    ;  240					//If it's between 2.75m
                           A   756    ;  241					ir_rx_halfbits++;
                           A   757    .line 241
00015E 840028              A   758    	LDX	R0,_ir_rx_halfbits
000161 09010028            A   759    	ADDX	_ir_rx_halfbits,#1
                           A   760    ;  242				}
                           A   761    ;  243			} else {
                           A   762    .line 243
000165 8B 13               A   763    	JR	_3_L_43
000167                     A   764    _3_L_40:
                           A   765    ;  244				//if((ir_rx_counter > 2) &&
                           A   766    ;  245				if((ir_rx_counter > 5) && (
                           A   767    .line 245
000167 A9050027            A   768    	CPX	_ir_rx_counter,#5
00016B 3B 0D               A   769    	JR	ULE,_3_L_43
00016D A9130027            A   770    	CPX	_ir_rx_counter,#19
000171 FB 07               A   771    	JR	NC,_3_L_43
                           A   772    ;  246					//If it's between 0.75m
                           A   773    ;  247					//If we reached this po
                           A   774    ;  248					ir_rx_halfbits++;
                           A   775    .line 248
000173 840028              A   776    	LDX	R0,_ir_rx_halfbits
000176 09010028            A   777    	ADDX	_ir_rx_halfbits,#1
                           A   778    ;  249				}
                           A   779    ;  250			}
00017A                     A   780    _3_L_43:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  16


PC     Object              I  Line    Source main.src
                           A   781    .line 250
                           A   782    ;  251			ir_rx_counter = 0;
                           A   783    .line 251
00017A E9000027            A   784    	LDX	_ir_rx_counter,#-0
                           A   785    ;  252		} else {
                           A   786    .line 252
00017E 8B 32               A   787    	JR	_3_L_55
000180                     A   788    _3_L_53:
                           A   789    ;  253			ir_rx_counter++;
                           A   790    .line 253
000180 840027              A   791    	LDX	R0,_ir_rx_counter
000183 09010027            A   792    	ADDX	_ir_rx_counter,#1
                           A   793    ;  254			//if(ir_rx_counter > 40) {
                           A   794    ;  255			if(ir_rx_counter > 64) {
                           A   795    .line 255
000187 A9400027            A   796    	CPX	_ir_rx_counter,#64
00018B 3B 25               A   797    	JR	ULE,_3_L_55
                           A   798    ;  256				//End of IR packet
                           A   799    ;  257				if(ir_rx_halfbits == 17) {
                           A   800    .line 257
00018D A9110028            A   801    	CPX	_ir_rx_halfbits,#17
000191 EB 17               A   802    	JR	NE,_3_L_50
                           A   803    ;  258					//Tag of some sort.
                           A   804    ;  259					if(ir_loaded_tags) { //
                           A   805    .line 259
000193 A9000029            A   806    	CPX	_ir_loaded_tags,#-0
000197 6B 07               A   807    	JR	Z,_3_L_48
                           A   808    ;  260						ir_loaded_tags--; /
                           A   809    .line 260
000199 840029              A   810    	LDX	R0,_ir_loaded_tags
00019C 29010029            A   811    	SUBX	_ir_loaded_tags,#1
                           A   812    ;  261					}
0001A0                     A   813    _3_L_48:
                           A   814    .line 261
                           A   815    ;  262					if(!ir_loaded_tags) { /
                           A   816    .line 262
0001A0 A9000029            A   817    	CPX	_ir_loaded_tags,#-0
0001A4 EB 04               A   818    	JR	NE,_3_L_50
                           A   819    ;  263						//Turn off the INHI
                           A   820    ;  264						PAOUT &= 0xFD; //Di
                           A   821    .line 264
0001A6 59FD0FD3            A   822    	ANDX	4051,#253
                           A   823    ;  265					}
                           A   824    ;  266				}
0001AA                     A   825    _3_L_50:
                           A   826    .line 266
                           A   827    ;  267				//Reset for the next tag.
                           A   828    ;  268				ir_rx_halfbits = 0;
                           A   829    .line 268
0001AA E9000028            A   830    	LDX	_ir_rx_halfbits,#-0
                           A   831    ;  269				ir_rx_counter = 0;
                           A   832    .line 269
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  17


PC     Object              I  Line    Source main.src
0001AE E9000027            A   833    	LDX	_ir_rx_counter,#-0
                           A   834    ;  270			}
                           A   835    ;  271		}
                           A   836    ;  272	}
0001B2                     A   837    _3_L_55:
                           A   838    .line 272
0001B2 D6 0000             A   839    	CALL	__b_iframereset
0001B5 BF                  A   840    	IRET	
                           A   841    .endfunc "isr_timer0",272,"_isr_timer0"
                           A   842    	SEGMENT ROM_DATA
                           A   843    
                           A   844    
                           A   845    ;**************************** _init_cpu *******
                           A   846    ;Name                         Addr/Register   S
                           A   847    ;_EI                                 IMPORT  --
                           A   848    ;_SET_VECTOR                         IMPORT  --
                           A   849    ;_DI                                 IMPORT  --
                           A   850    
                           A   851    
                           A   852    ; Aggregate Stack Size: 0 (words)
                           A   853    
                           A   854    
                           A   855    	.FRAME _n_init_cpu,?_n_init_cpu,RDATA
                           A   856    	.FRAME _f_init_cpu,?_f_init_cpu,EDATA
                           A   857    	SEGMENT main_TEXT
0001B6                     A   858    _init_cpu:
                           A   859    .define "_init_cpu"
                           A   860    .value _init_cpu
                           A   861    .class 2
                           A   862    .type 65
                           A   863    .type 0
                           A   864    .endef
                           A   865    .begfunc "init_cpu",274,"_init_cpu"
0001B6 D6 0000             A   866    	CALL	__b_frameset00
                           A   867    ;  273	
                           A   868    ;  274	void init_cpu(void) {
                           A   869    ;  275		DI();
                           A   870    .line 275
0001B9 8F                  A   871    	DI
                           A   872    ;  276		
                           A   873    ;  277		//PA0: RELOAD/DBG. Input, external 
                           A   874    ;  278		//PA1: INHIBIT. Output.
                           A   875    ;  279		//PA2: 38KHz. T1OUT, output.
                           A   876    ;  280		//PA3: LAZERMOD. Input.
                           A   877    ;  281		//PA4: RXD. UART, input.
                           A   878    ;  282		//PA5: TXD. UART, output.
                           A   879    ;  283		
                           A   880    ;  284		//Set up Port A.
                           A   881    ;  285		PADD = 0x19;	//00011001
                           A   882    .line 285
0001BA E9010FD0            A   883    	LDX	4048,#1
0001BE E9190FD1            A   884    	LDX	4049,#25
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  18


PC     Object              I  Line    Source main.src
                           A   885    ;  286		PAAF = 0x34;	//00110100
                           A   886    .line 286
0001C2 E9020FD0            A   887    	LDX	4048,#2
0001C6 E9340FD1            A   888    	LDX	4049,#52
                           A   889    ;  287		PAAFS1 = 0x04;	//00000100
                           A   890    .line 287
0001CA E9070FD0            A   891    	LDX	4048,#7
0001CE E9040FD1            A   892    	LDX	4049,#4
                           A   893    ;  288		PAAFS2 = 0x00;	//00000000
                           A   894    .line 288
0001D2 E9080FD0            A   895    	LDX	4048,#8
0001D6 E9000FD1            A   896    	LDX	4049,#-0
                           A   897    ;  289		//PAPUE = 0x10;	//00010000
                           A   898    ;  290		
                           A   899    ;  291		//Set up UART for 2000 baud, 8 data
                           A   900    ;  292		//Set baud rate
                           A   901    ;  293		U0BRH = 0x00;
                           A   902    .line 293
0001DA E9000F46            A   903    	LDX	3910,#-0
                           A   904    ;  294		U0BRL = 0xAD;
                           A   905    .line 294
0001DE E9AD0F47            A   906    	LDX	3911,#173
                           A   907    ;  295		//Set up interrupt
                           A   908    ;  296		SET_VECTOR(UART0_RX_IVECT, isr_uart
                           A   909    ;  297		SET_VECTOR(UART0_TX_IVECT, isr_uart
                           A   910    ;  298		IRQ0ENH |= 0x18;
                           A   911    .line 298
0001E2 49180FC1            A   912    	ORX	4033,#24
                           A   913    ;  299		IRQ0ENL |= 0x18;
                           A   914    .line 299
0001E6 49180FC2            A   915    	ORX	4034,#24
                           A   916    ;  300		IRQ0 &= ~0x18;
                           A   917    .line 300
0001EA 59E70FC0            A   918    	ANDX	4032,#-25
                           A   919    ;  301		//Enable transmitter and receiver, 
                           A   920    ;  302		U0CTL0 = 0xC2; 	//11000010
                           A   921    .line 302
0001EE E9C20F42            A   922    	LDX	3906,#194
                           A   923    ;  303		//Enable interrupts on received dat
                           A   924    ;  304		U0CTL1 = 0x00;	//00000000
                           A   925    .line 304
0001F2 E9000F43            A   926    	LDX	3907,#-0
                           A   927    ;  305		
                           A   928    ;  306		//Set up Timer0 to be an 8KHz heart
                           A   929    ;  307		//Disable timer, set mode to Contin
                           A   930    ;  308		T0CTL1 = 0x01;	//00000001
                           A   931    .line 308
0001F6 E9010F07            A   932    	LDX	3847,#1
                           A   933    ;  309		T0CTL0 = 0x00;	//00000000
                           A   934    .line 309
0001FA E9000F06            A   935    	LDX	3846,#-0
                           A   936    ;  310		//Reset count
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  19


PC     Object              I  Line    Source main.src
                           A   937    ;  311		T0H = 0x00; T0L = 0x01;
                           A   938    .line 311
0001FE E9000F00            A   939    	LDX	3840,#-0
000202 E9010F01            A   940    	LDX	3841,#1
                           A   941    ;  312		//Set the reload value
                           A   942    ;  313		//T0RH = 0x05; T0RL = 0x5F;
                           A   943    ;  314		T0RH = 0x02; T0RL = 0xB3;
                           A   944    .line 314
000206 E9020F02            A   945    	LDX	3842,#2
00020A E9B30F03            A   946    	LDX	3843,#179
                           A   947    ;  315		//Set the interrupt vector and prio
                           A   948    ;  316		SET_VECTOR(TIMER0, isr_timer0);
                           A   949    ;  317		IRQ0ENH |= 0x20;
                           A   950    .line 317
00020E 49200FC1            A   951    	ORX	4033,#32
                           A   952    ;  318		IRQ0ENL |= 0x20;
                           A   953    .line 318
000212 49200FC2            A   954    	ORX	4034,#32
                           A   955    ;  319		//Enable timer
                           A   956    ;  320		T0CTL1 |= 0x80;
                           A   957    .line 320
000216 49800F07            A   958    	ORX	3847,#128
                           A   959    ;  321		
                           A   960    ;  322		//Set up Timer1 to be 38KHz, 50% du
                           A   961    ;  323		//Turn off timer, set mode to singl
                           A   962    ;  324		T1CTL1 = 0x43;	//01000011
                           A   963    .line 324
00021A E9430F0F            A   964    	LDX	3855,#67
                           A   965    ;  325		T1CTL0 = 0x00;	//00000000
                           A   966    .line 325
00021E E9000F0E            A   967    	LDX	3854,#-0
                           A   968    ;  326		//Reset count
                           A   969    ;  327		T1H = 0x00; T1L = 0x01;
                           A   970    .line 327
000222 E9000F08            A   971    	LDX	3848,#-0
000226 E9010F09            A   972    	LDX	3849,#1
                           A   973    ;  328		//Set PWM value(Duty cycle)
                           A   974    ;  329		T1PWMH = 0x00; T1PWML = 0x48;
                           A   975    .line 329
00022A E9000F0C            A   976    	LDX	3852,#-0
00022E E9480F0D            A   977    	LDX	3853,#72
                           A   978    ;  330		//Set the reload value(Period)
                           A   979    ;  331		T1RH = 0x00; T1RL = 0x90;
                           A   980    .line 331
000232 E9000F0A            A   981    	LDX	3850,#-0
000236 E9900F0B            A   982    	LDX	3851,#144
                           A   983    ;  332		//Enable timer
                           A   984    ;  333		T1CTL1 |= 0x80;
                           A   985    .line 333
00023A 49800F0F            A   986    	ORX	3855,#128
                           A   987    ;  334		
                           A   988    ;  335		//Turn off the inhibit line
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  20


PC     Object              I  Line    Source main.src
                           A   989    ;  336		PAOUT &= 0xFD;
                           A   990    .line 336
00023E 59FD0FD3            A   991    	ANDX	4051,#253
                           A   992    ;  337		
                           A   993    ;  338		//lastIO = PAIN;
                           A   994    ;  339		//tempIO = PAIN;
                           A   995    ;  340		
                           A   996    ;  341		EI();
                           A   997    .line 341
000242 9F                  A   998    	EI
                           A   999    ;  342	}
                           A  1000    .line 342
000243 D6 0000             A  1001    	CALL	__b_framereset
000246 AF                  A  1002    	RET	
                           A  1003    .endfunc "init_cpu",342,"_init_cpu"
                           A  1004    	SEGMENT ROM_DATA
                           A  1005    
                           A  1006    
                           A  1007    ;**************************** _sendQueue ******
                           A  1008    ;Name                         Addr/Register   S
                           A  1009    ;_ser_tx_size                        STATIC    
                           A  1010    ;_ser_tx_buffer                      STATIC    
                           A  1011    ;_temp_tx_buffer                     STATIC    
                           A  1012    ;_temp_tx_size                       STATIC    
                           A  1013    ;i                                      RR0    
                           A  1014    
                           A  1015    
                           A  1016    ; Aggregate Stack Size: 0 (words)
                           A  1017    
                           A  1018    
                           A  1019    	.FRAME _n_sendQueue,?_n_sendQueue,RDATA
                           A  1020    	.FRAME _f_sendQueue,?_f_sendQueue,EDATA
                           A  1021    	SEGMENT main_TEXT
000247                     A  1022    _sendQueue:
                           A  1023    .define "_sendQueue"
                           A  1024    .value _sendQueue
                           A  1025    .class 2
                           A  1026    .type 65
                           A  1027    .type 0
                           A  1028    .endef
                           A  1029    .begfunc "sendQueue",344,"_sendQueue"
                           A  1030    ;  343	
                           A  1031    ;  344	void sendQueue(void) {
                           A  1032    .define "i"
                           A  1033    .class 4
                           A  1034    .reg 17
                           A  1035    .type 3
                           A  1036    .type 0
                           A  1037    .endef
000247 D6 0000             A  1038    	CALL	__b_frameset00
00024A 8B 0D               A  1039    	JR	_5_L_58
                           A  1040    ;  345		int i;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  21


PC     Object              I  Line    Source main.src
                           A  1041    ;  346		
                           A  1042    ;  347		//Copy the data from the temporary 
                           A  1043    ;  348		for(i = 0;i < temp_tx_size;i++) {
00024C                     A  1044    _5_L_59:
                           A  1045    .line 348
00024C 84203F              A  1046    	LDX	R2,_temp_tx_size
00024F A212                A  1047    	CP	R1,R2
000251 1FA6E000            A  1048    	CPC	R0,#-0
000255 1B 08               A  1049    	JR	LT,_5_L_61
000257 8B 20               A  1050    	JR	_5_L_62
000259                     A  1051    _5_L_58:
000259 B0E0                A  1052    	CLR	R0
00025B B0E1                A  1053    	CLR	R1
00025D 8B ED               A  1054    	JR	_5_L_59
00025F                     A  1055    _5_L_61:
                           A  1056    ;  349			ser_tx_buffer[i] = temp_tx_buff
                           A  1057    .line 349
00025F 2C 00               A  1058    	LD	R2,#high(_temp_tx_buffer)
000261 3C 2F               A  1059    	LD	R3,#low(_temp_tx_buffer)
000263 0231                A  1060    	ADD	R3,R1
000265 1220                A  1061    	ADC	R2,R0
000267 4C 00               A  1062    	LD	R4,#high(_ser_tx_buffer)
000269 5C 14               A  1063    	LD	R5,#low(_ser_tx_buffer)
00026B 0251                A  1064    	ADD	R5,R1
00026D 1240                A  1065    	ADC	R4,R0
00026F 86E2E6              A  1066    	LDX	R6,@RR2
000272 96E6E4              A  1067    	LDX	@RR4,R6
                           A  1068    .line 348
000275 A0E0                A  1069    	INCW	RR0
                           A  1070    ;  350		}
                           A  1071    .line 350
000277 8B D3               A  1072    	JR	_5_L_59
000279                     A  1073    _5_L_62:
                           A  1074    ;  351		ser_tx_size = temp_tx_size;
                           A  1075    .line 351
000279 E8 03F024           A  1076    	LDX	_ser_tx_size,_temp_tx_size
                           A  1077    ;  352		
                           A  1078    ;  353		//Clear the temporary queue.
                           A  1079    ;  354		temp_tx_size = 0;
                           A  1080    .line 354
00027D E900003F            A  1081    	LDX	_temp_tx_size,#-0
                           A  1082    ;  355		
                           A  1083    ;  356		//Kickstart the UART.
                           A  1084    ;  357		IRQ0 |= 0x08;
                           A  1085    .line 357
000281 49080FC0            A  1086    	ORX	4032,#8
                           A  1087    ;  358	}
                           A  1088    .line 358
000285 D6 0000             A  1089    	CALL	__b_framereset
000288 AF                  A  1090    	RET	
                           A  1091    .endfunc "sendQueue",358,"_sendQueue"
                           A  1092    	SEGMENT ROM_DATA
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  22


PC     Object              I  Line    Source main.src
                           A  1093    
                           A  1094    
                           A  1095    ;**************************** _queueByte ******
                           A  1096    ;Name                         Addr/Register   S
                           A  1097    ;_temp_tx_size                       STATIC    
                           A  1098    ;_temp_tx_buffer                     STATIC    
                           A  1099    ;input                                   R8    
                           A  1100    
                           A  1101    
                           A  1102    ; Aggregate Stack Size: 0 (words)
                           A  1103    
                           A  1104    
                           A  1105    	.FRAME _n_queueByte,?_n_queueByte,RDATA
                           A  1106    	.FRAME _f_queueByte,?_f_queueByte,EDATA
                           A  1107    	SEGMENT main_TEXT
000289                     A  1108    _queueByte:
                           A  1109    .define "_queueByte"
                           A  1110    .value _queueByte
                           A  1111    .class 2
                           A  1112    .type 65
                           A  1113    .type 0
                           A  1114    .endef
                           A  1115    .begfunc "queueByte",360,"_queueByte"
                           A  1116    .define "input"
                           A  1117    .class 17
                           A  1118    .reg 9
                           A  1119    .type 12
                           A  1120    .type 0
                           A  1121    .endef
000289 D6 0000             A  1122    	CALL	__b_frameset00
                           A  1123    ;  359	
                           A  1124    ;  360	void queueByte(unsigned char input) {
                           A  1125    ;  361		//Add a byte to the temporary queue
                           A  1126    ;  362		temp_tx_buffer[temp_tx_size] = inpu
                           A  1127    .line 362
00028C 84203F              A  1128    	LDX	R2,_temp_tx_size
00028F 0C 00               A  1129    	LD	R0,#high(_temp_tx_buffer)
000291 1C 2F               A  1130    	LD	R1,#low(_temp_tx_buffer)
000293 0212                A  1131    	ADD	R1,R2
000295 16E000              A  1132    	ADC	R0,#0
000298 96E8E0              A  1133    	LDX	@RR0,R8
                           A  1134    ;  363		temp_tx_size += 1;
                           A  1135    .line 363
00029B 0901003F            A  1136    	ADDX	_temp_tx_size,#1
                           A  1137    ;  364	}
                           A  1138    .line 364
00029F D6 0000             A  1139    	CALL	__b_framereset
0002A2 AF                  A  1140    	RET	
                           A  1141    .endfunc "queueByte",364,"_queueByte"
                           A  1142    	SEGMENT ROM_DATA
                           A  1143    
                           A  1144    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  23


PC     Object              I  Line    Source main.src
                           A  1145    ;**************************** _queueChecksum **
                           A  1146    ;Name                         Addr/Register   S
                           A  1147    ;_temp_tx_buffer                     STATIC    
                           A  1148    ;_temp_tx_size                       STATIC    
                           A  1149    ;checksum                                R2    
                           A  1150    ;i                                      RR0    
                           A  1151    
                           A  1152    
                           A  1153    ; Aggregate Stack Size: 0 (words)
                           A  1154    
                           A  1155    
                           A  1156    	.FRAME _n_queueChecksum,?_n_queueChecksum,R
                           A  1157    	.FCALL _n_queueByte
                           A  1158    	.FRAME _f_queueChecksum,?_f_queueChecksum,E
                           A  1159    	.FCALL _f_queueByte
                           A  1160    	SEGMENT main_TEXT
0002A3                     A  1161    _queueChecksum:
                           A  1162    .define "_queueChecksum"
                           A  1163    .value _queueChecksum
                           A  1164    .class 2
                           A  1165    .type 65
                           A  1166    .type 0
                           A  1167    .endef
                           A  1168    .begfunc "queueChecksum",366,"_queueChecksum"
                           A  1169    ;  365	
                           A  1170    ;  366	void queueChecksum(void) {
                           A  1171    .define "i"
                           A  1172    .class 4
                           A  1173    .reg 17
                           A  1174    .type 3
                           A  1175    .type 0
                           A  1176    .endef
                           A  1177    .define "checksum"
                           A  1178    .class 4
                           A  1179    .reg 3
                           A  1180    .type 12
                           A  1181    .type 0
                           A  1182    .endef
0002A3 D6 0000             A  1183    	CALL	__b_frameset00
                           A  1184    ;  367		int i;
                           A  1185    ;  368		unsigned char checksum = 0xFF;
                           A  1186    .line 368
0002A6 2CFF                A  1187    	LD	R2,#255
0002A8 8B 0D               A  1188    	JR	_7_L_66
                           A  1189    ;  369		
                           A  1190    ;  370		//Calculate a checksum for all the 
                           A  1191    ;  371		for(i = 0; i < temp_tx_size;i++) {
0002AA                     A  1192    _7_L_67:
                           A  1193    .line 371
0002AA 84303F              A  1194    	LDX	R3,_temp_tx_size
0002AD A213                A  1195    	CP	R1,R3
0002AF 1FA6E000            A  1196    	CPC	R0,#-0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  24


PC     Object              I  Line    Source main.src
0002B3 1B 08               A  1197    	JR	LT,_7_L_69
0002B5 8B 17               A  1198    	JR	_7_L_70
0002B7                     A  1199    _7_L_66:
0002B7 B0E0                A  1200    	CLR	R0
0002B9 B0E1                A  1201    	CLR	R1
0002BB 8B ED               A  1202    	JR	_7_L_67
0002BD                     A  1203    _7_L_69:
                           A  1204    ;  372			checksum -= temp_tx_buffer[i];
                           A  1205    .line 372
0002BD 4C 00               A  1206    	LD	R4,#high(_temp_tx_buffer)
0002BF 5C 2F               A  1207    	LD	R5,#low(_temp_tx_buffer)
0002C1 0251                A  1208    	ADD	R5,R1
0002C3 1240                A  1209    	ADC	R4,R0
0002C5 86E4E3              A  1210    	LDX	R3,@RR4
0002C8 2223                A  1211    	SUB	R2,R3
                           A  1212    .line 371
0002CA A0E0                A  1213    	INCW	RR0
                           A  1214    ;  373		}
                           A  1215    .line 373
0002CC 8B DC               A  1216    	JR	_7_L_67
0002CE                     A  1217    _7_L_70:
                           A  1218    ;  374		
                           A  1219    ;  375		//Add the checksum to the queue.
                           A  1220    ;  376		queueByte(checksum);
                           A  1221    .line 376
0002CE E4E2E8              A  1222    	LD	R8,R2
0002D1 D6 0289             A  1223    	CALL	_queueByte
                           A  1224    ;  377	}
                           A  1225    .line 377
0002D4 D6 0000             A  1226    	CALL	__b_framereset
0002D7 AF                  A  1227    	RET	
                           A  1228    .endfunc "queueChecksum",377,"_queueChecksum"
                           A  1229    	SEGMENT ROM_DATA
                           A  1230    
                           A  1231    
                           A  1232    ;**************************** _loadAmmo *******
                           A  1233    ;Name                         Addr/Register   S
                           A  1234    ;_ir_loaded_tags                     STATIC    
                           A  1235    ;howMuch                                 R8    
                           A  1236    
                           A  1237    
                           A  1238    ; Aggregate Stack Size: 0 (words)
                           A  1239    
                           A  1240    
                           A  1241    	.FRAME _n_loadAmmo,?_n_loadAmmo,RDATA
                           A  1242    	.FRAME _f_loadAmmo,?_f_loadAmmo,EDATA
                           A  1243    	SEGMENT main_TEXT
0002D8                     A  1244    _loadAmmo:
                           A  1245    .define "_loadAmmo"
                           A  1246    .value _loadAmmo
                           A  1247    .class 2
                           A  1248    .type 65
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  25


PC     Object              I  Line    Source main.src
                           A  1249    .type 0
                           A  1250    .endef
                           A  1251    .begfunc "loadAmmo",379,"_loadAmmo"
                           A  1252    .define "howMuch"
                           A  1253    .class 17
                           A  1254    .reg 9
                           A  1255    .type 12
                           A  1256    .type 0
                           A  1257    .endef
0002D8 D6 0000             A  1258    	CALL	__b_frameset00
                           A  1259    ;  378	
                           A  1260    ;  379	void loadAmmo(unsigned char howMuch) {
                           A  1261    ;  380		ir_loaded_tags = howMuch;
                           A  1262    .line 380
0002DB 948029              A  1263    	LDX	_ir_loaded_tags,R8
                           A  1264    ;  381		//INHIBIT should be high to generat
                           A  1265    ;  382		PAOUT |= 0x02;
                           A  1266    .line 382
0002DE 49020FD3            A  1267    	ORX	4051,#2
                           A  1268    ;  383	}
                           A  1269    .line 383
0002E2 D6 0000             A  1270    	CALL	__b_framereset
0002E5 AF                  A  1271    	RET	
                           A  1272    .endfunc "loadAmmo",383,"_loadAmmo"
                           A  1273    	SEGMENT ROM_DATA
                           A  1274    
                           A  1275    
                           A  1276    ;**************************** _rxedResetBarrel 
                           A  1277    ;Name                         Addr/Register   S
                           A  1278    ;_reloadCooldown                     STATIC    
                           A  1279    ;_weAreReloading                     STATIC    
                           A  1280    ;_weAreRegistered                    STATIC    
                           A  1281    ;_sendBarrelReply                    STATIC    
                           A  1282    ;_sendLoadSpecial                    STATIC    
                           A  1283    ;_sendArmSpecial                     STATIC    
                           A  1284    ;_ir_loaded_tags                     STATIC    
                           A  1285    
                           A  1286    
                           A  1287    ; Aggregate Stack Size: 0 (words)
                           A  1288    
                           A  1289    
                           A  1290    	.FRAME _n_rxedResetBarrel,?_n_rxedResetBarr
                           A  1291    	.FRAME _f_rxedResetBarrel,?_f_rxedResetBarr
                           A  1292    	SEGMENT main_TEXT
0002E6                     A  1293    _rxedResetBarrel:
                           A  1294    .define "_rxedResetBarrel"
                           A  1295    .value _rxedResetBarrel
                           A  1296    .class 2
                           A  1297    .type 65
                           A  1298    .type 0
                           A  1299    .endef
                           A  1300    .begfunc "rxedResetBarrel",385,"_rxedResetBarre
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  26


PC     Object              I  Line    Source main.src
0002E6 D6 0000             A  1301    	CALL	__b_frameset00
                           A  1302    ;  384	
                           A  1303    ;  385	void rxedResetBarrel(void) {
                           A  1304    ;  386		//This will reset any variables use
                           A  1305    ;  387		
                           A  1306    ;  388		ir_loaded_tags = 0;
                           A  1307    .line 388
0002E9 E9000029            A  1308    	LDX	_ir_loaded_tags,#-0
                           A  1309    ;  389		
                           A  1310    ;  390		sendArmSpecial = 0;
                           A  1311    .line 390
0002ED E9000042            A  1312    	LDX	_sendArmSpecial,#-0
                           A  1313    ;  391		sendLoadSpecial = 0;
                           A  1314    .line 391
0002F1 E9000041            A  1315    	LDX	_sendLoadSpecial,#-0
                           A  1316    ;  392		sendBarrelReply = 0;
                           A  1317    .line 392
0002F5 E9000040            A  1318    	LDX	_sendBarrelReply,#-0
                           A  1319    ;  393		
                           A  1320    ;  394		weAreRegistered = 0;
                           A  1321    .line 394
0002F9 E9000043            A  1322    	LDX	_weAreRegistered,#-0
                           A  1323    ;  395		weAreReloading = 0;
                           A  1324    .line 395
0002FD E9000044            A  1325    	LDX	_weAreReloading,#-0
                           A  1326    ;  396		
                           A  1327    ;  397		reloadCooldown = 800;
                           A  1328    .line 397
000301 E9030045            A  1329    	LDX	_reloadCooldown,#3
000305 E9200046            A  1330    	LDX	_reloadCooldown+1,#32
                           A  1331    ;  398		
                           A  1332    ;  399		PAOUT &= 0xFD;
                           A  1333    .line 399
000309 59FD0FD3            A  1334    	ANDX	4051,#253
                           A  1335    ;  400	}
                           A  1336    .line 400
00030D D6 0000             A  1337    	CALL	__b_framereset
000310 AF                  A  1338    	RET	
                           A  1339    .endfunc "rxedResetBarrel",400,"_rxedResetBarre
                           A  1340    	SEGMENT ROM_DATA
                           A  1341    
                           A  1342    
                           A  1343    ;**************************** _rxedRollCall ***
                           A  1344    ;Name                         Addr/Register   S
                           A  1345    ;_sendBarrelReply                    STATIC    
                           A  1346    
                           A  1347    
                           A  1348    ; Aggregate Stack Size: 0 (words)
                           A  1349    
                           A  1350    
                           A  1351    	.FRAME _n_rxedRollCall,?_n_rxedRollCall,RDA
                           A  1352    	.FRAME _f_rxedRollCall,?_f_rxedRollCall,EDA
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  27


PC     Object              I  Line    Source main.src
                           A  1353    	SEGMENT main_TEXT
000311                     A  1354    _rxedRollCall:
                           A  1355    .define "_rxedRollCall"
                           A  1356    .value _rxedRollCall
                           A  1357    .class 2
                           A  1358    .type 65
                           A  1359    .type 0
                           A  1360    .endef
                           A  1361    .begfunc "rxedRollCall",402,"_rxedRollCall"
000311 D6 0000             A  1362    	CALL	__b_frameset00
                           A  1363    ;  401	
                           A  1364    ;  402	void rxedRollCall(void) {
                           A  1365    ;  403		/*	Format:		BType		$00
                           A  1366    ;  404						BData0		Blaster
                           A  1367    ;  405						BSum		$cs
                           A  1368    ;  406		*/
                           A  1369    ;  407		//We don't actually care about anyt
                           A  1370    ;  408		//Set a flag that will be seen by s
                           A  1371    ;  409		sendBarrelReply = 1;
                           A  1372    .line 409
000314 E9010040            A  1373    	LDX	_sendBarrelReply,#1
                           A  1374    ;  410	}
                           A  1375    .line 410
000318 D6 0000             A  1376    	CALL	__b_framereset
00031B AF                  A  1377    	RET	
                           A  1378    .endfunc "rxedRollCall",410,"_rxedRollCall"
                           A  1379    	SEGMENT ROM_DATA
                           A  1380    
                           A  1381    
                           A  1382    ;**************************** _rxedBarrelSeen *
                           A  1383    ;Name                         Addr/Register   S
                           A  1384    ;_weAreRegistered                    STATIC    
                           A  1385    
                           A  1386    
                           A  1387    ; Aggregate Stack Size: 0 (words)
                           A  1388    
                           A  1389    
                           A  1390    	.FRAME _n_rxedBarrelSeen,?_n_rxedBarrelSeen
                           A  1391    	.FCALL _n_rxedResetBarrel
                           A  1392    	.FRAME _f_rxedBarrelSeen,?_f_rxedBarrelSeen
                           A  1393    	.FCALL _f_rxedResetBarrel
                           A  1394    	SEGMENT main_TEXT
00031C                     A  1395    _rxedBarrelSeen:
                           A  1396    .define "_rxedBarrelSeen"
                           A  1397    .value _rxedBarrelSeen
                           A  1398    .class 2
                           A  1399    .type 65
                           A  1400    .type 0
                           A  1401    .endef
                           A  1402    .begfunc "rxedBarrelSeen",412,"_rxedBarrelSeen"
00031C D6 0000             A  1403    	CALL	__b_frameset00
                           A  1404    ;  411	
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  28


PC     Object              I  Line    Source main.src
                           A  1405    ;  412	void rxedBarrelSeen(void) {
                           A  1406    ;  413		/*	Format:		BType		$40
                           A  1407    ;  414						BSum		$cs
                           A  1408    ;  415		*/
                           A  1409    ;  416		//No data, no cares! This does mean
                           A  1410    ;  417		rxedResetBarrel();
                           A  1411    .line 417
00031F D6 02E6             A  1412    	CALL	_rxedResetBarrel
                           A  1413    ;  418		weAreRegistered = 1;
                           A  1414    .line 418
000322 E9010043            A  1415    	LDX	_weAreRegistered,#1
                           A  1416    ;  419	}
                           A  1417    .line 419
000326 D6 0000             A  1418    	CALL	__b_framereset
000329 AF                  A  1419    	RET	
                           A  1420    .endfunc "rxedBarrelSeen",419,"_rxedBarrelSeen"
                           A  1421    	SEGMENT ROM_DATA
                           A  1422    
                           A  1423    
                           A  1424    ;**************************** _rxedBarrelAck **
                           A  1425    ;Name                         Addr/Register   S
                           A  1426    ;_reloadCooldown                     STATIC    
                           A  1427    ;_sendArmSpecial                     STATIC    
                           A  1428    ;_weAreReloading                     STATIC    
                           A  1429    
                           A  1430    
                           A  1431    ; Aggregate Stack Size: 0 (words)
                           A  1432    
                           A  1433    
                           A  1434    	.FRAME _n_rxedBarrelAck,?_n_rxedBarrelAck,R
                           A  1435    	.FCALL _n_loadAmmo
                           A  1436    	.FRAME _f_rxedBarrelAck,?_f_rxedBarrelAck,E
                           A  1437    	.FCALL _f_loadAmmo
                           A  1438    	SEGMENT main_TEXT
00032A                     A  1439    _rxedBarrelAck:
                           A  1440    .define "_rxedBarrelAck"
                           A  1441    .value _rxedBarrelAck
                           A  1442    .class 2
                           A  1443    .type 65
                           A  1444    .type 0
                           A  1445    .endef
                           A  1446    .begfunc "rxedBarrelAck",421,"_rxedBarrelAck"
00032A D6 0000             A  1447    	CALL	__b_frameset00
                           A  1448    ;  420	
                           A  1449    ;  421	void rxedBarrelAck(void) {
                           A  1450    ;  422		/*	Format:		BType		$41
                           A  1451    ;  423						BSum		$cs
                           A  1452    ;  424		*/
                           A  1453    ;  425		//This one we actually care about, 
                           A  1454    ;  426		if(weAreReloading == 1) {
                           A  1455    .line 426
00032D A9010044            A  1456    	CPX	_weAreReloading,#1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  29


PC     Object              I  Line    Source main.src
000331 EB 06               A  1457    	JR	NE,_12_L_78
                           A  1458    ;  427			//Because we still need to actu
                           A  1459    ;  428			//Flag that we need to send thi
                           A  1460    ;  429			sendArmSpecial = 1;
                           A  1461    .line 429
000333 E9010042            A  1462    	LDX	_sendArmSpecial,#1
                           A  1463    ;  430		} else if(weAreReloading == 2) {
                           A  1464    .line 430
000337 8B 17               A  1465    	JR	_12_L_79
000339                     A  1466    _12_L_78:
000339 A9020044            A  1467    	CPX	_weAreReloading,#2
00033D EB 11               A  1468    	JR	NE,_12_L_79
                           A  1469    ;  431			weAreReloading = 0;
                           A  1470    .line 431
00033F E9000044            A  1471    	LDX	_weAreReloading,#-0
                           A  1472    ;  432			//We're now in control of sendi
                           A  1473    ;  433			loadAmmo(AMMO);
                           A  1474    .line 433
000343 8C0F                A  1475    	LD	R8,#15
000345 D6 02D8             A  1476    	CALL	_loadAmmo
                           A  1477    ;  434			//Slow down reloading a bit...
                           A  1478    ;  435			reloadCooldown = 800;
                           A  1479    .line 435
000348 E9030045            A  1480    	LDX	_reloadCooldown,#3
00034C E9200046            A  1481    	LDX	_reloadCooldown+1,#32
                           A  1482    ;  436		}
                           A  1483    ;  437	}
000350                     A  1484    _12_L_79:
                           A  1485    .line 437
000350 D6 0000             A  1486    	CALL	__b_framereset
000353 AF                  A  1487    	RET	
                           A  1488    .endfunc "rxedBarrelAck",437,"_rxedBarrelAck"
                           A  1489    	SEGMENT ROM_DATA
                           A  1490    
                           A  1491    
                           A  1492    ;**************************** _BarrelReply ****
                           A  1493    ;Name                         Addr/Register   S
                           A  1494    
                           A  1495    
                           A  1496    ; Aggregate Stack Size: 0 (words)
                           A  1497    
                           A  1498    
                           A  1499    	.FRAME _n_BarrelReply,?_n_BarrelReply,RDATA
                           A  1500    	.FCALL _n_queueByte
                           A  1501    	.FCALL _n_queueChecksum
                           A  1502    	.FCALL _n_sendQueue
                           A  1503    	.FRAME _f_BarrelReply,?_f_BarrelReply,EDATA
                           A  1504    	.FCALL _f_queueByte
                           A  1505    	.FCALL _f_queueChecksum
                           A  1506    	.FCALL _f_sendQueue
                           A  1507    	SEGMENT main_TEXT
000354                     A  1508    _BarrelReply:
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  30


PC     Object              I  Line    Source main.src
                           A  1509    .define "_BarrelReply"
                           A  1510    .value _BarrelReply
                           A  1511    .class 2
                           A  1512    .type 65
                           A  1513    .type 0
                           A  1514    .endef
                           A  1515    .begfunc "BarrelReply",439,"_BarrelReply"
000354 D6 0000             A  1516    	CALL	__b_frameset00
                           A  1517    ;  438	
                           A  1518    ;  439	void BarrelReply(void) {
                           A  1519    ;  440		/*	BARREL-REPLY
                           A  1520    ;  441			Format:		BType		$40
                           A  1521    ;  442						BData0		Barrel 
                           A  1522    ;  443						BSum		$cs
                           A  1523    ;  444			Barrels send this block in resp
                           A  1524    ;  445			BData0 should be 0x01 for a sho
                           A  1525    ;  446			Other values are undefined, but
                           A  1526    ;  447		*/
                           A  1527    ;  448		
                           A  1528    ;  449		//BType
                           A  1529    ;  450		queueByte(0x40);
                           A  1530    .line 450
000357 8C40                A  1531    	LD	R8,#64
000359 D6 0289             A  1532    	CALL	_queueByte
                           A  1533    ;  451		//BData0
                           A  1534    ;  452		queueByte(BARRELTYPE);
                           A  1535    .line 452
00035C 8C02                A  1536    	LD	R8,#2
00035E D6 0289             A  1537    	CALL	_queueByte
                           A  1538    ;  453		//BSum
                           A  1539    ;  454		queueChecksum();
                           A  1540    .line 454
000361 D6 02A3             A  1541    	CALL	_queueChecksum
                           A  1542    ;  455		
                           A  1543    ;  456		//Send it!
                           A  1544    ;  457		sendQueue();
                           A  1545    .line 457
000364 D6 0247             A  1546    	CALL	_sendQueue
                           A  1547    ;  458	}
                           A  1548    .line 458
000367 D6 0000             A  1549    	CALL	__b_framereset
00036A AF                  A  1550    	RET	
                           A  1551    .endfunc "BarrelReply",458,"_BarrelReply"
                           A  1552    	SEGMENT ROM_DATA
                           A  1553    
                           A  1554    
                           A  1555    ;**************************** _LoadSpecial ****
                           A  1556    ;Name                         Addr/Register   S
                           A  1557    ;_weAreReloading                     STATIC    
                           A  1558    
                           A  1559    
                           A  1560    ; Aggregate Stack Size: 0 (words)
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  31


PC     Object              I  Line    Source main.src
                           A  1561    
                           A  1562    
                           A  1563    	.FRAME _n_LoadSpecial,?_n_LoadSpecial,RDATA
                           A  1564    	.FCALL _n_queueByte
                           A  1565    	.FCALL _n_queueChecksum
                           A  1566    	.FCALL _n_sendQueue
                           A  1567    	.FRAME _f_LoadSpecial,?_f_LoadSpecial,EDATA
                           A  1568    	.FCALL _f_queueByte
                           A  1569    	.FCALL _f_queueChecksum
                           A  1570    	.FCALL _f_sendQueue
                           A  1571    	SEGMENT main_TEXT
00036B                     A  1572    _LoadSpecial:
                           A  1573    .define "_LoadSpecial"
                           A  1574    .value _LoadSpecial
                           A  1575    .class 2
                           A  1576    .type 65
                           A  1577    .type 0
                           A  1578    .endef
                           A  1579    .begfunc "LoadSpecial",460,"_LoadSpecial"
00036B D6 0000             A  1580    	CALL	__b_frameset00
                           A  1581    ;  459	
                           A  1582    ;  460	void LoadSpecial(void) {
                           A  1583    ;  461		/*	LOAD-SPECIAL
                           A  1584    ;  462			Format:		BType		$41
                           A  1585    ;  463						BData0		Ammo Ne
                           A  1586    ;  464						BData1		DoubleT
                           A  1587    ;  465						BData2		LoadSFX
                           A  1588    ;  466						BData3		FireSFX
                           A  1589    ;  467						BData4		Display
                           A  1590    ;  468						BSum		$cs
                           A  1591    ;  469			Unloads any ready ammo and load
                           A  1592    ;  470			Ammo Needed is how much ammo wi
                           A  1593    ;  471			DoubleTaps is (UNKNOWN).
                           A  1594    ;  472			LoadSFX is what sound effect wi
                           A  1595    ;  473			FireSFX is what sound effect wi
                           A  1596    ;  474				special ammo is loaded/arme
                           A  1597    ;  475			DisplayMode is what will be sho
                           A  1598    ;  476		*/
                           A  1599    ;  477		
                           A  1600    ;  478		//BType
                           A  1601    ;  479		queueByte(0x41);
                           A  1602    .line 479
00036E 8C41                A  1603    	LD	R8,#65
000370 D6 0289             A  1604    	CALL	_queueByte
                           A  1605    ;  480		//BData0
                           A  1606    ;  481		queueByte(AMMONEEDED);
                           A  1607    .line 481
000373 8C0F                A  1608    	LD	R8,#15
000375 D6 0289             A  1609    	CALL	_queueByte
                           A  1610    ;  482		//BData1
                           A  1611    ;  483		queueByte(DOUBLETAPS);
                           A  1612    .line 483
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  32


PC     Object              I  Line    Source main.src
000378 B0E8                A  1613    	CLR	R8
00037A D6 0289             A  1614    	CALL	_queueByte
                           A  1615    ;  484		//BData2
                           A  1616    ;  485		queueByte(LOADSFX);
                           A  1617    .line 485
00037D 8C0E                A  1618    	LD	R8,#14
00037F D6 0289             A  1619    	CALL	_queueByte
                           A  1620    ;  486		//BData3
                           A  1621    ;  487		queueByte(FIRESFX);
                           A  1622    .line 487
000382 8C0B                A  1623    	LD	R8,#11
000384 D6 0289             A  1624    	CALL	_queueByte
                           A  1625    ;  488		//BData4
                           A  1626    ;  489		queueByte(DISPLAYMODE);
                           A  1627    .line 489
000387 B0E8                A  1628    	CLR	R8
000389 D6 0289             A  1629    	CALL	_queueByte
                           A  1630    ;  490		//BSum
                           A  1631    ;  491		queueChecksum();
                           A  1632    .line 491
00038C D6 02A3             A  1633    	CALL	_queueChecksum
                           A  1634    ;  492		
                           A  1635    ;  493		//We also need to mark that we're t
                           A  1636    ;  494		weAreReloading = 1;
                           A  1637    .line 494
00038F E9010044            A  1638    	LDX	_weAreReloading,#1
                           A  1639    ;  495		
                           A  1640    ;  496		//Send it!
                           A  1641    ;  497		sendQueue();
                           A  1642    .line 497
000393 D6 0247             A  1643    	CALL	_sendQueue
                           A  1644    ;  498	}
                           A  1645    .line 498
000396 D6 0000             A  1646    	CALL	__b_framereset
000399 AF                  A  1647    	RET	
                           A  1648    .endfunc "LoadSpecial",498,"_LoadSpecial"
                           A  1649    	SEGMENT ROM_DATA
                           A  1650    
                           A  1651    
                           A  1652    ;**************************** _ArmSpecial *****
                           A  1653    ;Name                         Addr/Register   S
                           A  1654    ;_weAreReloading                     STATIC    
                           A  1655    
                           A  1656    
                           A  1657    ; Aggregate Stack Size: 0 (words)
                           A  1658    
                           A  1659    
                           A  1660    	.FRAME _n_ArmSpecial,?_n_ArmSpecial,RDATA
                           A  1661    	.FCALL _n_queueByte
                           A  1662    	.FCALL _n_queueChecksum
                           A  1663    	.FCALL _n_sendQueue
                           A  1664    	.FRAME _f_ArmSpecial,?_f_ArmSpecial,EDATA
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  33


PC     Object              I  Line    Source main.src
                           A  1665    	.FCALL _f_queueByte
                           A  1666    	.FCALL _f_queueChecksum
                           A  1667    	.FCALL _f_sendQueue
                           A  1668    	SEGMENT main_TEXT
00039A                     A  1669    _ArmSpecial:
                           A  1670    .define "_ArmSpecial"
                           A  1671    .value _ArmSpecial
                           A  1672    .class 2
                           A  1673    .type 65
                           A  1674    .type 0
                           A  1675    .endef
                           A  1676    .begfunc "ArmSpecial",500,"_ArmSpecial"
00039A D6 0000             A  1677    	CALL	__b_frameset00
                           A  1678    ;  499	
                           A  1679    ;  500	void ArmSpecial(void) {
                           A  1680    ;  501		/*	ARM-SPECIAL
                           A  1681    ;  502			Format:		BType		$42
                           A  1682    ;  503						BData0	BurstSize (
                           A  1683    ;  504						BData1	Ammo (1-15)
                           A  1684    ;  505						BData2	TrigRate (1
                           A  1685    ;  506						BSum		$cs
                           A  1686    ;  507			BurstSize is in the range 1 to 
                           A  1687    ;  508			Ammo is the amount of ready amm
                           A  1688    ;  509			TrigRate is the number of milli
                           A  1689    ;  510		*/
                           A  1690    ;  511		
                           A  1691    ;  512		//BType
                           A  1692    ;  513		queueByte(0x42);
                           A  1693    .line 513
00039D 8C42                A  1694    	LD	R8,#66
00039F D6 0289             A  1695    	CALL	_queueByte
                           A  1696    ;  514		//BData0
                           A  1697    ;  515		queueByte(BURSTSIZE);
                           A  1698    .line 515
0003A2 8C0F                A  1699    	LD	R8,#15
0003A4 D6 0289             A  1700    	CALL	_queueByte
                           A  1701    ;  516		//BData1
                           A  1702    ;  517		queueByte(AMMO);
                           A  1703    .line 517
0003A7 8C0F                A  1704    	LD	R8,#15
0003A9 D6 0289             A  1705    	CALL	_queueByte
                           A  1706    ;  518		//BData2
                           A  1707    ;  519		queueByte(TRIGRATE);
                           A  1708    .line 519
0003AC 8C10                A  1709    	LD	R8,#16
0003AE D6 0289             A  1710    	CALL	_queueByte
                           A  1711    ;  520		//BSum
                           A  1712    ;  521		queueChecksum();
                           A  1713    .line 521
0003B1 D6 02A3             A  1714    	CALL	_queueChecksum
                           A  1715    ;  522		
                           A  1716    ;  523		//Send it!
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  34


PC     Object              I  Line    Source main.src
                           A  1717    ;  524		sendQueue();
                           A  1718    .line 524
0003B4 D6 0247             A  1719    	CALL	_sendQueue
                           A  1720    ;  525		
                           A  1721    ;  526		//We're expecting another ACK from 
                           A  1722    ;  527		weAreReloading = 2;
                           A  1723    .line 527
0003B7 E9020044            A  1724    	LDX	_weAreReloading,#2
                           A  1725    ;  528	}
                           A  1726    .line 528
0003BB D6 0000             A  1727    	CALL	__b_framereset
0003BE AF                  A  1728    	RET	
                           A  1729    .endfunc "ArmSpecial",528,"_ArmSpecial"
                           A  1730    	SEGMENT ROM_DATA
                           A  1731    
                           A  1732    
                           A  1733    ;**************************** _sendSomething **
                           A  1734    ;Name                         Addr/Register   S
                           A  1735    ;_ir_loaded_tags                     STATIC    
                           A  1736    ;_reloadCooldown                     STATIC    
                           A  1737    ;_weAreReloading                     STATIC    
                           A  1738    ;_sendLoadSpecial                    STATIC    
                           A  1739    ;_sendArmSpecial                     STATIC    
                           A  1740    ;_sendBarrelReply                    STATIC    
                           A  1741    ;_ser_tx_cooldown                    STATIC    
                           A  1742    ;_ser_tx_size                        STATIC    
                           A  1743    
                           A  1744    
                           A  1745    ; Aggregate Stack Size: 0 (words)
                           A  1746    
                           A  1747    
                           A  1748    	.FRAME _n_sendSomething,?_n_sendSomething,R
                           A  1749    	.FCALL _n_BarrelReply
                           A  1750    	.FCALL _n_ArmSpecial
                           A  1751    	.FCALL _n_LoadSpecial
                           A  1752    	.FRAME _f_sendSomething,?_f_sendSomething,E
                           A  1753    	.FCALL _f_BarrelReply
                           A  1754    	.FCALL _f_ArmSpecial
                           A  1755    	.FCALL _f_LoadSpecial
                           A  1756    	SEGMENT main_TEXT
0003BF                     A  1757    _sendSomething:
                           A  1758    .define "_sendSomething"
                           A  1759    .value _sendSomething
                           A  1760    .class 2
                           A  1761    .type 65
                           A  1762    .type 0
                           A  1763    .endef
                           A  1764    .begfunc "sendSomething",530,"_sendSomething"
0003BF D6 0000             A  1765    	CALL	__b_frameset00
                           A  1766    ;  529	
                           A  1767    ;  530	void sendSomething(void) {
                           A  1768    ;  531		if(!ser_tx_size && !ser_tx_cooldown
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  35


PC     Object              I  Line    Source main.src
                           A  1769    .line 531
0003C2 A9000024            A  1770    	CPX	_ser_tx_size,#-0
0003C6 EB 47               A  1771    	JR	NE,_16_L_99
0003C8 A9000025            A  1772    	CPX	_ser_tx_cooldown,#-0
0003CC EB 41               A  1773    	JR	NE,_16_L_99
                           A  1774    ;  532			if(sendBarrelReply) { //If we n
                           A  1775    .line 532
0003CE A9000040            A  1776    	CPX	_sendBarrelReply,#-0
0003D2 6B 09               A  1777    	JR	Z,_16_L_86
                           A  1778    ;  533				sendBarrelReply = 0; //Clea
                           A  1779    .line 533
0003D4 E9000040            A  1780    	LDX	_sendBarrelReply,#-0
                           A  1781    ;  534				BarrelReply(); //Send a Bar
                           A  1782    .line 534
0003D8 D6 0354             A  1783    	CALL	_BarrelReply
                           A  1784    ;  535				return;
                           A  1785    .line 535
0003DB 8B 32               A  1786    	JR	_16_L_99
                           A  1787    ;  536			}
0003DD                     A  1788    _16_L_86:
                           A  1789    .line 536
                           A  1790    ;  537			if(sendArmSpecial) { //If we're
                           A  1791    .line 537
0003DD A9000042            A  1792    	CPX	_sendArmSpecial,#-0
0003E1 6B 09               A  1793    	JR	Z,_16_L_97
                           A  1794    ;  538				sendArmSpecial = 0; //Clear
                           A  1795    .line 538
0003E3 E9000042            A  1796    	LDX	_sendArmSpecial,#-0
                           A  1797    ;  539				ArmSpecial(); //Send an Arm
                           A  1798    .line 539
0003E7 D6 039A             A  1799    	CALL	_ArmSpecial
                           A  1800    ;  540				return;
                           A  1801    .line 540
0003EA 8B 23               A  1802    	JR	_16_L_99
                           A  1803    ;  541			}
0003EC                     A  1804    _16_L_97:
                           A  1805    .line 541
                           A  1806    ;  542			if(sendLoadSpecial) { //If the 
                           A  1807    .line 542
0003EC A9000041            A  1808    	CPX	_sendLoadSpecial,#-0
0003F0 6B 1D               A  1809    	JR	Z,_16_L_99
                           A  1810    ;  543				sendLoadSpecial = 0; //Clea
                           A  1811    .line 543
0003F2 E9000041            A  1812    	LDX	_sendLoadSpecial,#-0
                           A  1813    ;  544				if(RELOADMIDCLIP) { //If we
                           A  1814    ;  545					if(!weAreReloading && !
                           A  1815    .line 545
0003F6 A9000044            A  1816    	CPX	_weAreReloading,#-0
0003FA EB 13               A  1817    	JR	NE,_16_L_95
0003FC 840045              A  1818    	LDX	R0,_reloadCooldown
0003FF 841046              A  1819    	LDX	R1,_reloadCooldown+1
000402 4201                A  1820    	OR	R0,R1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  36


PC     Object              I  Line    Source main.src
000404 EB 09               A  1821    	JR	NE,_16_L_95
                           A  1822    ;  546						if(ir_loaded_tags !
                           A  1823    .line 546
000406 A90F0029            A  1824    	CPX	_ir_loaded_tags,#15
00040A 6B 03               A  1825    	JR	Z,_16_L_95
                           A  1826    ;  547							LoadSpecial(); 
                           A  1827    .line 547
00040C D6 036B             A  1828    	CALL	_LoadSpecial
                           A  1829    ;  548						}
                           A  1830    ;  549					}
                           A  1831    ;  550				} else { //If we can't relo
                           A  1832    ;  551					if(!weAreReloading && !
                           A  1833    ;  552						LoadSpecial(); //St
                           A  1834    ;  553					}
                           A  1835    ;  554				}
00040F                     A  1836    _16_L_95:
                           A  1837    .line 554
                           A  1838    ;  555				return;
                           A  1839    ;  556			}
                           A  1840    ;  557		}
                           A  1841    ;  558	}
00040F                     A  1842    _16_L_99:
                           A  1843    .line 558
00040F D6 0000             A  1844    	CALL	__b_framereset
000412 AF                  A  1845    	RET	
                           A  1846    .endfunc "sendSomething",558,"_sendSomething"
                           A  1847    	SEGMENT ROM_DATA
                           A  1848    ;	Jump Table for Switch Statement at line 564
000000                     A  1849    L__72:
000000 000B                A  1850    	DW	11
000002 0000                A  1851    	DW	0
000004 042A                A  1852    	DW	_17_L_100
000006 001E                A  1853    	DW	30
000008 042F                A  1854    	DW	_17_L_101
00000A 001F                A  1855    	DW	31
00000C 042F                A  1856    	DW	_17_L_102
00000E 0020                A  1857    	DW	32
000010 042F                A  1858    	DW	_17_L_103
000012 0040                A  1859    	DW	64
000014 0434                A  1860    	DW	_17_L_109
000016 0041                A  1861    	DW	65
000018 0439                A  1862    	DW	_17_L_110
00001A 005F                A  1863    	DW	95
00001C 042F                A  1864    	DW	_17_L_104
00001E 0060                A  1865    	DW	96
000020 042F                A  1866    	DW	_17_L_105
000022 0080                A  1867    	DW	128
000024 042F                A  1868    	DW	_17_L_106
000026 00A0                A  1869    	DW	160
000028 042F                A  1870    	DW	_17_L_107
00002A 00C0                A  1871    	DW	192
00002C 042F                A  1872    	DW	_17_L_108
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  37


PC     Object              I  Line    Source main.src
00002E 043C                A  1873    	DW	_17_L_112
                           A  1874    
                           A  1875    
                           A  1876    ;**************************** _receiveSomething
                           A  1877    ;Name                         Addr/Register   S
                           A  1878    ;_captureBuffer                      STATIC    
                           A  1879    
                           A  1880    
                           A  1881    ; Aggregate Stack Size: 0 (words)
                           A  1882    
                           A  1883    
                           A  1884    	.FRAME _n_receiveSomething,?_n_receiveSomet
                           A  1885    	.FCALL _n_rxedRollCall
                           A  1886    	.FCALL _n_rxedResetBarrel
                           A  1887    	.FCALL _n_rxedBarrelSeen
                           A  1888    	.FCALL _n_rxedBarrelAck
                           A  1889    	.FRAME _f_receiveSomething,?_f_receiveSomet
                           A  1890    	.FCALL _f_rxedRollCall
                           A  1891    	.FCALL _f_rxedResetBarrel
                           A  1892    	.FCALL _f_rxedBarrelSeen
                           A  1893    	.FCALL _f_rxedBarrelAck
                           A  1894    	SEGMENT main_TEXT
000413                     A  1895    _receiveSomething:
                           A  1896    .define "_receiveSomething"
                           A  1897    .value _receiveSomething
                           A  1898    .class 2
                           A  1899    .type 65
                           A  1900    .type 0
                           A  1901    .endef
                           A  1902    .begfunc "receiveSomething",560,"_receiveSometh
000413 D6 0000             A  1903    	CALL	__b_frameset00
                           A  1904    ;  559	
                           A  1905    ;  560	void receiveSomething(void) {
                           A  1906    ;  561		if(captureBuffer.size & 0x80) { //T
                           A  1907    .line 561
000416 79800011            A  1908    	TMX	_captureBuffer+17,#128
00041A 6B 24               A  1909    	JR	Z,_17_L_114
                           A  1910    ;  562			
                           A  1911    ;  563			//Figure out what type it is an
                           A  1912    ;  564			switch(captureBuffer.buffer[0])
                           A  1913    .line 564
00041C 841001              A  1914    	LDX	R1,_captureBuffer+1
00041F B0E0                A  1915    	CLR	R0
000421 2C 00               A  1916    	LD	R2,#high(L__72)
000423 3C 00               A  1917    	LD	R3,#low(L__72)
000425 D6 0000             A  1918    	CALL	__b_ucase
000428 C4E0                A  1919    	JP	@RR0
                           A  1920    ;  565				case 0x00:
00042A                     A  1921    _17_L_100:
                           A  1922    .line 565
                           A  1923    ;  566					//ROLL-CALL
                           A  1924    ;  567					rxedRollCall();
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  38


PC     Object              I  Line    Source main.src
                           A  1925    .line 567
00042A D6 0311             A  1926    	CALL	_rxedRollCall
                           A  1927    ;  568					break;
                           A  1928    .line 568
00042D 8B 0D               A  1929    	JR	_17_L_112
                           A  1930    ;  569				case 0x1E: //NO-ACCY
00042F                     A  1931    _17_L_101:
                           A  1932    .line 569
                           A  1933    ;  570				case 0x1F: //RESET-ALL
00042F                     A  1934    _17_L_102:
                           A  1935    .line 570
                           A  1936    ;  571				case 0x20: //ROLL-REPLY		00042F                     A  1937    _17_L_103:
                           A  1938    .line 571
                           A  1939    ;  572				case 0x5F: //RESET-BARREL
00042F                     A  1940    _17_L_104:
                           A  1941    .line 572
                           A  1942    ;  573				case 0x60: //POWERUP-REPLY
00042F                     A  1943    _17_L_105:
                           A  1944    .line 573
                           A  1945    ;  574				case 0x80: //RADAR-REPLY
00042F                     A  1946    _17_L_106:
                           A  1947    .line 574
                           A  1948    ;  575				case 0xA0: //MASTER-REPLY
00042F                     A  1949    _17_L_107:
                           A  1950    .line 575
                           A  1951    ;  576				case 0xC0: //RHOST-REPLY
00042F                     A  1952    _17_L_108:
                           A  1953    .line 576
                           A  1954    ;  577					//Any of these results 
                           A  1955    ;  578					rxedResetBarrel();
                           A  1956    .line 578
00042F D6 02E6             A  1957    	CALL	_rxedResetBarrel
                           A  1958    ;  579					break;
                           A  1959    .line 579
000432 8B 08               A  1960    	JR	_17_L_112
                           A  1961    ;  580				case 0x40:
000434                     A  1962    _17_L_109:
                           A  1963    .line 580
                           A  1964    ;  581					//BARREL-SEEN
                           A  1965    ;  582					rxedBarrelSeen();
                           A  1966    .line 582
000434 D6 031C             A  1967    	CALL	_rxedBarrelSeen
                           A  1968    ;  583					break;
                           A  1969    .line 583
000437 8B 03               A  1970    	JR	_17_L_112
                           A  1971    ;  584				case 0x41:
000439                     A  1972    _17_L_110:
                           A  1973    .line 584
                           A  1974    ;  585					//BARREL-ACK
                           A  1975    ;  586					rxedBarrelAck();
                           A  1976    .line 586
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  39


PC     Object              I  Line    Source main.src
000439 D6 032A             A  1977    	CALL	_rxedBarrelAck
                           A  1978    ;  587					break;
                           A  1979    ;  588				default:
                           A  1980    ;  589					//Nothing we know how t
                           A  1981    ;  590					break;
                           A  1982    ;  591			}
00043C                     A  1983    _17_L_112:
                           A  1984    .line 591
                           A  1985    ;  592			captureBuffer.size = 0;
                           A  1986    .line 592
00043C E9000011            A  1987    	LDX	_captureBuffer+17,#-0
                           A  1988    ;  593		}
                           A  1989    ;  594	}
000440                     A  1990    _17_L_114:
                           A  1991    .line 594
000440 D6 0000             A  1992    	CALL	__b_framereset
000443 AF                  A  1993    	RET	
                           A  1994    .endfunc "receiveSomething",594,"_receiveSometh
                           A  1995    	SEGMENT ROM_DATA
                           A  1996    
                           A  1997    
                           A  1998    ;**************************** _main ***********
                           A  1999    ;Name                         Addr/Register   S
                           A  2000    ;_sendLoadSpecial                    STATIC    
                           A  2001    ;_weAreRegistered                    STATIC    
                           A  2002    ;_btn_pressed                        STATIC    
                           A  2003    ;_captureBuffer                      STATIC    
                           A  2004    
                           A  2005    
                           A  2006    ; Aggregate Stack Size: 0 (words)
                           A  2007    
                           A  2008    
                           A  2009    	.FRAME _n_main,?_n_main,RDATA
                           A  2010    	.FCALL _n_init_cpu
                           A  2011    	.FCALL _n_receiveSomething
                           A  2012    	.FCALL _n_sendSomething
                           A  2013    	.FRAME _f_main,?_f_main,EDATA
                           A  2014    	.FCALL _f_init_cpu
                           A  2015    	.FCALL _f_receiveSomething
                           A  2016    	.FCALL _f_sendSomething
                           A  2017    	SEGMENT main_TEXT
000444                     A  2018    _main:
                           A  2019    .define "_main"
                           A  2020    .value _main
                           A  2021    .class 2
                           A  2022    .type 65
                           A  2023    .type 0
                           A  2024    .endef
                           A  2025    .begfunc "main",596,"_main"
000444 D6 0000             A  2026    	CALL	__b_frameset00
                           A  2027    ;  595	
                           A  2028    ;  596	void main(void) {
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  40


PC     Object              I  Line    Source main.src
                           A  2029    ;  597		unsigned char i;
                           A  2030    ;  598		init_cpu();
                           A  2031    .line 598
000447 D6 01B6             A  2032    	CALL	_init_cpu
                           A  2033    ;  599		
                           A  2034    ;  600		//Initialize the checksum.
                           A  2035    ;  601		captureBuffer.checksum = 0xFF;
                           A  2036    .line 601
00044A E9FF0012            A  2037    	LDX	_captureBuffer+18,#255
                           A  2038    ;  602		
                           A  2039    ;  603		while(1) {
00044E                     A  2040    _18_L_117:
                           A  2041    .line 603
                           A  2042    ;  604			//Echo everything back to the t
                           A  2043    ;  605			//Should put it in factory test
                           A  2044    ;  606			/*if((ser_rx_size & 0x80) && !s
                           A  2045    ;  607	            //Block received.
                           A  2046    ;  608	            //Echo it back for testing.
                           A  2047    ;  609	            unsigned char rx_size = (se
                           A  2048    ;  610				int i;
                           A  2049    ;  611				
                           A  2050    ;  612	            for(i = 0; i < rx_size;i++)
                           A  2051    ;  613	                ser_tx_buffer[i] = ser_
                           A  2052    ;  614	            }
                           A  2053    ;  615				
                           A  2054    ;  616	            ser_tx_size = rx_size;
                           A  2055    ;  617	            ser_rx_size = 0;
                           A  2056    ;  618				IRQ0 |= 0x08;
                           A  2057    ;  619	        } else {
                           A  2058    ;  620				if(!(U0STAT0 ^ 0x06)) {
                           A  2059    ;  621					IRQ0 |= 0x08;
                           A  2060    ;  622				}
                           A  2061    ;  623			}*/
                           A  2062    ;  624			
                           A  2063    ;  625			receiveSomething(); //Go check 
                           A  2064    .line 625
00044E D6 0413             A  2065    	CALL	_receiveSomething
                           A  2066    ;  626			sendSomething(); //Go check if 
                           A  2067    .line 626
000451 D6 03BF             A  2068    	CALL	_sendSomething
                           A  2069    ;  627			if(btn_pressed) { //If the butt
                           A  2070    .line 627
000454 A900002C            A  2071    	CPX	_btn_pressed,#-0
000458 6B F4               A  2072    	JR	Z,_18_L_117
                           A  2073    ;  628				btn_pressed = 0; //Clear th
                           A  2074    .line 628
00045A E900002C            A  2075    	LDX	_btn_pressed,#-0
                           A  2076    ;  629				if(weAreRegistered) { //If 
                           A  2077    .line 629
00045E A9000043            A  2078    	CPX	_weAreRegistered,#-0
000462 6B EA               A  2079    	JR	Z,_18_L_117
                           A  2080    ;  630					sendLoadSpecial = 1; //
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  41


PC     Object              I  Line    Source main.src
                           A  2081    .line 630
000464 E9010041            A  2082    	LDX	_sendLoadSpecial,#1
                           A  2083    ;  631				}
                           A  2084    ;  632			}
                           A  2085    ;  633		}
                           A  2086    .line 633
000468 8B E4               A  2087    	JR	_18_L_117
                           A  2088    .line 634
00046A D6 0000             A  2089    	CALL	__b_framereset
00046D AF                  A  2090    	RET	
                           A  2091    .endfunc "main",634,"_main"
00000C 008E                A  2092    	VECTOR	TIMER0=_isr_timer0
000010 0047                A  2093    	VECTOR	UART0_TX=_isr_uarttx
00000E 0000                A  2094    	VECTOR	UART0_RX=_isr_uartrx
                           A  2095    	XREF __b_ucase:ROM
                           A  2096    	XREF __b_framereset:ROM
                           A  2097    	XREF __b_iframereset:ROM
                           A  2098    	XREF __b_frameset00:ROM
                           A  2099    	XREF __b_iframeset00:ROM
                           A  2100    	XDEF _main
                           A  2101    	XDEF _receiveSomething
                           A  2102    	XDEF _sendSomething
                           A  2103    	XDEF _ArmSpecial
                           A  2104    	XDEF _LoadSpecial
                           A  2105    	XDEF _BarrelReply
                           A  2106    	XDEF _rxedBarrelAck
                           A  2107    	XDEF _rxedBarrelSeen
                           A  2108    	XDEF _rxedRollCall
                           A  2109    	XDEF _rxedResetBarrel
                           A  2110    	XDEF _loadAmmo
                           A  2111    	XDEF _queueChecksum
                           A  2112    	XDEF _queueByte
                           A  2113    	XDEF _sendQueue
                           A  2114    	XDEF _init_cpu
                           A  2115    	XDEF _isr_timer0
                           A  2116    	XDEF _isr_uarttx
                           A  2117    	XDEF _isr_uartrx
                           A  2118    	XDEF _reloadCooldown
                           A  2119    	XDEF _weAreReloading
                           A  2120    	XDEF _weAreRegistered
                           A  2121    	XDEF _sendArmSpecial
                           A  2122    	XDEF _sendLoadSpecial
                           A  2123    	XDEF _sendBarrelReply
                           A  2124    	XDEF _temp_tx_size
                           A  2125    	XDEF _temp_tx_buffer
                           A  2126    	XDEF _lastIO
                           A  2127    	XDEF _tempIO
                           A  2128    	XDEF _btn_pressed
                           A  2129    	XDEF _btn_prelim
                           A  2130    	XDEF _btn_counter
                           A  2131    	XDEF _ir_loaded_tags
                           A  2132    	XDEF _ir_rx_halfbits
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     16:31:31     page:  42


PC     Object              I  Line    Source main.src
                           A  2133    	XDEF _ir_rx_counter
                           A  2134    	XDEF _ser_tx_currentbyte
                           A  2135    	XDEF _ser_tx_cooldown
                           A  2136    	XDEF _ser_tx_size
                           A  2137    	XDEF _ser_tx_buffer
                           A  2138    	XDEF _ser_rx_eob_counter
                           A  2139    	XDEF _captureBuffer
                           A  2140    	END


Errors: 0
Warnings: 0
Lines Assembled: 2141
