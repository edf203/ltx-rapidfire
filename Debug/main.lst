Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog Z8 Encore! ANSI C Compiler Release 3.62
                           A     2    ; -nolocalcse -optsize -fastcall -const=RAM -mo
                           A     3    ; -nooptlink -regvar -reduceopt -debug -norevaa
                           A     4    ; -alias 
                           A     5    	DEFINE main_TEXT,SPACE=ROM
                           A     6    	FILE	"..\..\LTX-RA~1\MAIN.C"
                           A     7    .debug "C"
                           A     8    	SEGMENT FAR_BSS
000000                     A     9    _captureBuffer:
000000                     A    10    	DS	19
                           A    11    .define "captureBuffer"
                           A    12    .alias "_captureBuffer"
                           A    13    .class 83
                           A    14    .value _captureBuffer
                           A    15    .tag "ser_rx"
                           A    16    .type 8
                           A    17    .type 0
                           A    18    .endef
                           A    19    	SEGMENT main_TEXT
                           A    20    .begrec "ser_rx",19
                           A    21    .define "hasrxed"
                           A    22    .value 0
                           A    23    .class 8
                           A    24    .type 12
                           A    25    .type 0
                           A    26    .endef
                           A    27    .define "buffer"
                           A    28    .value 1
                           A    29    .class 8
                           A    30    .dim 16
                           A    31    .type 108
                           A    32    .type 0
                           A    33    .endef
                           A    34    .define "size"
                           A    35    .value 17
                           A    36    .class 8
                           A    37    .type 12
                           A    38    .type 0
                           A    39    .endef
                           A    40    .define "checksum"
                           A    41    .value 18
                           A    42    .class 8
                           A    43    .type 12
                           A    44    .type 0
                           A    45    .endef
                           A    46    .endrec "ser_rx"
                           A    47    	SEGMENT FAR_BSS
000013                     A    48    _ser_rx_eob_counter:
000013                     A    49    	DS	1
                           A    50    .define "ser_rx_eob_counter"
                           A    51    .alias "_ser_rx_eob_counter"
                           A    52    .class 83
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   2


PC     Object              I  Line    Source main.src
                           A    53    .value _ser_rx_eob_counter
                           A    54    .type 12
                           A    55    .type 0
                           A    56    .endef
000014                     A    57    _ser_tx_buffer:
000014                     A    58    	DS	16
                           A    59    .define "ser_tx_buffer"
                           A    60    .alias "_ser_tx_buffer"
                           A    61    .class 83
                           A    62    .value _ser_tx_buffer
                           A    63    .dim 16
                           A    64    .type 108
                           A    65    .type 0
                           A    66    .endef
000024                     A    67    _ser_tx_size:
000024                     A    68    	DS	1
                           A    69    .define "ser_tx_size"
                           A    70    .alias "_ser_tx_size"
                           A    71    .class 83
                           A    72    .value _ser_tx_size
                           A    73    .type 12
                           A    74    .type 0
                           A    75    .endef
000025                     A    76    _ser_tx_cooldown:
000025                     A    77    	DS	1
                           A    78    .define "ser_tx_cooldown"
                           A    79    .alias "_ser_tx_cooldown"
                           A    80    .class 83
                           A    81    .value _ser_tx_cooldown
                           A    82    .type 12
                           A    83    .type 0
                           A    84    .endef
000026                     A    85    _ser_tx_currentbyte:
000026                     A    86    	DS	1
                           A    87    .define "ser_tx_currentbyte"
                           A    88    .alias "_ser_tx_currentbyte"
                           A    89    .class 83
                           A    90    .value _ser_tx_currentbyte
                           A    91    .type 12
                           A    92    .type 0
                           A    93    .endef
000027                     A    94    _ir_rx_counter:
000027                     A    95    	DS	1
                           A    96    .define "ir_rx_counter"
                           A    97    .alias "_ir_rx_counter"
                           A    98    .class 83
                           A    99    .value _ir_rx_counter
                           A   100    .type 12
                           A   101    .type 0
                           A   102    .endef
000028                     A   103    _ir_rx_halfbits:
000028                     A   104    	DS	1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   3


PC     Object              I  Line    Source main.src
                           A   105    .define "ir_rx_halfbits"
                           A   106    .alias "_ir_rx_halfbits"
                           A   107    .class 83
                           A   108    .value _ir_rx_halfbits
                           A   109    .type 12
                           A   110    .type 0
                           A   111    .endef
000029                     A   112    _ir_loaded_tags:
000029                     A   113    	DS	1
                           A   114    .define "ir_loaded_tags"
                           A   115    .alias "_ir_loaded_tags"
                           A   116    .class 83
                           A   117    .value _ir_loaded_tags
                           A   118    .type 12
                           A   119    .type 0
                           A   120    .endef
00002A                     A   121    _btn_counter:
00002A                     A   122    	DS	1
                           A   123    .define "btn_counter"
                           A   124    .alias "_btn_counter"
                           A   125    .class 83
                           A   126    .value _btn_counter
                           A   127    .type 12
                           A   128    .type 0
                           A   129    .endef
00002B                     A   130    _btn_prelim:
00002B                     A   131    	DS	1
                           A   132    .define "btn_prelim"
                           A   133    .alias "_btn_prelim"
                           A   134    .class 83
                           A   135    .value _btn_prelim
                           A   136    .type 12
                           A   137    .type 0
                           A   138    .endef
00002C                     A   139    _btn_pressed:
00002C                     A   140    	DS	1
                           A   141    .define "btn_pressed"
                           A   142    .alias "_btn_pressed"
                           A   143    .class 83
                           A   144    .value _btn_pressed
                           A   145    .type 12
                           A   146    .type 0
                           A   147    .endef
00002D                     A   148    _tempIO:
00002D                     A   149    	DS	1
                           A   150    .define "tempIO"
                           A   151    .alias "_tempIO"
                           A   152    .class 83
                           A   153    .value _tempIO
                           A   154    .type 12
                           A   155    .type 0
                           A   156    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   4


PC     Object              I  Line    Source main.src
00002E                     A   157    _lastIO:
00002E                     A   158    	DS	1
                           A   159    .define "lastIO"
                           A   160    .alias "_lastIO"
                           A   161    .class 83
                           A   162    .value _lastIO
                           A   163    .type 12
                           A   164    .type 0
                           A   165    .endef
00002F                     A   166    _temp_tx_buffer:
00002F                     A   167    	DS	16
                           A   168    .define "temp_tx_buffer"
                           A   169    .alias "_temp_tx_buffer"
                           A   170    .class 83
                           A   171    .value _temp_tx_buffer
                           A   172    .dim 16
                           A   173    .type 108
                           A   174    .type 0
                           A   175    .endef
00003F                     A   176    _temp_tx_size:
00003F                     A   177    	DS	1
                           A   178    .define "temp_tx_size"
                           A   179    .alias "_temp_tx_size"
                           A   180    .class 83
                           A   181    .value _temp_tx_size
                           A   182    .type 12
                           A   183    .type 0
                           A   184    .endef
000040                     A   185    _sendBarrelReply:
000040                     A   186    	DS	1
                           A   187    .define "sendBarrelReply"
                           A   188    .alias "_sendBarrelReply"
                           A   189    .class 83
                           A   190    .value _sendBarrelReply
                           A   191    .type 12
                           A   192    .type 0
                           A   193    .endef
000041                     A   194    _sendLoadSpecial:
000041                     A   195    	DS	1
                           A   196    .define "sendLoadSpecial"
                           A   197    .alias "_sendLoadSpecial"
                           A   198    .class 83
                           A   199    .value _sendLoadSpecial
                           A   200    .type 12
                           A   201    .type 0
                           A   202    .endef
000042                     A   203    _sendArmSpecial:
000042                     A   204    	DS	1
                           A   205    .define "sendArmSpecial"
                           A   206    .alias "_sendArmSpecial"
                           A   207    .class 83
                           A   208    .value _sendArmSpecial
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   5


PC     Object              I  Line    Source main.src
                           A   209    .type 12
                           A   210    .type 0
                           A   211    .endef
000043                     A   212    _weAreRegistered:
000043                     A   213    	DS	1
                           A   214    .define "weAreRegistered"
                           A   215    .alias "_weAreRegistered"
                           A   216    .class 83
                           A   217    .value _weAreRegistered
                           A   218    .type 12
                           A   219    .type 0
                           A   220    .endef
000044                     A   221    _weAreReloading:
000044                     A   222    	DS	1
                           A   223    .define "weAreReloading"
                           A   224    .alias "_weAreReloading"
                           A   225    .class 83
                           A   226    .value _weAreReloading
                           A   227    .type 12
                           A   228    .type 0
                           A   229    .endef
000045                     A   230    _reloadCooldown:
000045                     A   231    	DS	2*1
                           A   232    .define "reloadCooldown"
                           A   233    .alias "_reloadCooldown"
                           A   234    .class 83
                           A   235    .value _reloadCooldown
                           A   236    .type 13
                           A   237    .type 0
                           A   238    .endef
                           A   239    	SEGMENT ROM_DATA
                           A   240    
                           A   241    
                           A   242    ;**************************** _isr_uartrx *****
                           A   243    ;Name                         Addr/Register   S
                           A   244    ;_ser_rx_eob_counter                 STATIC    
                           A   245    ;_captureBuffer                      STATIC    
                           A   246    ;temp                                    R0    
                           A   247    
                           A   248    
                           A   249    ; Aggregate Stack Size: 0 (words)
                           A   250    
                           A   251    
                           A   252    	.FRAME _n_isr_uartrx,?_n_isr_uartrx,RDATA
                           A   253    	.FRAME _f_isr_uartrx,?_f_isr_uartrx,EDATA
                           A   254    	SEGMENT main_TEXT
000000                     A   255    _isr_uartrx:
                           A   256    .define "_isr_uartrx"
                           A   257    .value _isr_uartrx
                           A   258    .class 2
                           A   259    .type 65
                           A   260    .type 0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   6


PC     Object              I  Line    Source main.src
                           A   261    .endef
                           A   262    .begfunc "isr_uartrx",122,"_isr_uartrx"
                           A   263    ;    1	/*
                           A   264    ;    2	*   DIY LTX RapidFire
                           A   265    ;    3	*   Copyright (C) 2013  Ryan L. "Izzy84
                           A   266    ;    4	*
                           A   267    ;    5	*    This program is free software; you
                           A   268    ;    6	*    it under the terms of the GNU Gene
                           A   269    ;    7	*    the Free Software Foundation; eith
                           A   270    ;    8	*    (at your option) any later version
                           A   271    ;    9	*
                           A   272    ;   10	*    This program is distributed in the
                           A   273    ;   11	*    but WITHOUT ANY WARRANTY; without 
                           A   274    ;   12	*    MERCHANTABILITY or FITNESS FOR A P
                           A   275    ;   13	*    GNU General Public License for mor
                           A   276    ;   14	*
                           A   277    ;   15	*    You should have received a copy of
                           A   278    ;   16	*    with this program; if not, write t
                           A   279    ;   17	*    51 Franklin Street, Fifth Floor, B
                           A   280    ;   18	*/
                           A   281    ;   19	
                           A   282    ;   20	#include <ez8.h>
                           A   283    ;   21	
                           A   284    ;   22	#define WEAPONTYPE 1		/* 	1: Mach
                           A   285    ;   23									2: Snip
                           A   286    ;   24								*/
                           A   287    ;   25	
                           A   288    ;   26	#if WEAPONTYPE==1
                           A   289    ;   27		//Machinegun
                           A   290    ;   28		#define BARRELTYPE 2		//Barre
                           A   291    ;   29									// Othe
                           A   292    ;   30		#define AMMONEEDED 15		//Ammo 
                           A   293    ;   31									// Rang
                           A   294    ;   32		#define AMMO 15				//Ammo 
                           A   295    ;   33									// Shou
                           A   296    ;   34		#define DOUBLETAPS 0		//Doubl
                           A   297    ;   35		#define BURSTSIZE 15		//Burst
                           A   298    ;   36									// Rang
                           A   299    ;   37		#define TRIGRATE 16			//TrigR
                           A   300    ;   38									// Rang
                           A   301    ;   39		#define LOADSFX 14			//LoadS
                           A   302    ;   40		#define FIRESFX 11			//FireS
                           A   303    ;   41									// spec
                           A   304    ;   42									//SFX f
                           A   305    ;   43									// 0: N
                           A   306    ;   44									// 1: S
                           A   307    ;   45									// 2: E
                           A   308    ;   46									// 3: T
                           A   309    ;   47									// 4: A
                           A   310    ;   48									// 5: A
                           A   311    ;   49									// 6: S
                           A   312    ;   50									// 7: S
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   7


PC     Object              I  Line    Source main.src
                           A   313    ;   51									// 8: S
                           A   314    ;   52									// 9: S
                           A   315    ;   53									// 10: 
                           A   316    ;   54									// 11: 
                           A   317    ;   55									// 12: 
                           A   318    ;   56									// 13: 
                           A   319    ;   57									// 14: 
                           A   320    ;   58		#define DISPLAYMODE	0		//Displ
                           A   321    ;   59									//Known
                           A   322    ;   60									// 0x00
                           A   323    ;   61									// 0x20
                           A   324    ;   62									// 0x40
                           A   325    ;   63									// 0x80
                           A   326    ;   64									// Usin
                           A   327    ;   65		#define RELOADMIDCLIP 1		//Wheth
                           A   328    ;   66	#endif
                           A   329    ;   67			
                           A   330    ;   68			
                           A   331    ;   69			
                           A   332    ;   70			
                           A   333    ;   71	
                           A   334    ;   72	#if WEAPONTYPE==2
                           A   335    ;   73		//Sniper
                           A   336    ;   74		#define BARRELTYPE 3
                           A   337    ;   75		#define AMMONEEDED 15
                           A   338    ;   76		#define AMMO 15
                           A   339    ;   77		#define DOUBLETAPS 1
                           A   340    ;   78		#define BURSTSIZE 5
                           A   341    ;   79		#define TRIGRATE 16
                           A   342    ;   80		#define LOADSFX 14
                           A   343    ;   81		#define FIRESFX 13
                           A   344    ;   82		#define DISPLAYMODE 0
                           A   345    ;   83		#define RELOADMIDCLIP 0
                           A   346    ;   84	#endif
                           A   347    ;   85	
                           A   348    ;   86	struct ser_rx {
                           A   349    ;   87		volatile unsigned char hasrxed;
                           A   350    ;   88		volatile unsigned char buffer[16];
                           A   351    ;   89		volatile unsigned char size;
                           A   352    ;   90		volatile unsigned char checksum;
                           A   353    ;   91	} captureBuffer;
                           A   354    ;   92	
                           A   355    ;   93	volatile unsigned char ser_rx_eob_count
                           A   356    ;   94	
                           A   357    ;   95	volatile unsigned char ser_tx_buffer[16
                           A   358    ;   96	volatile unsigned char ser_tx_size;
                           A   359    ;   97	volatile unsigned char ser_tx_cooldown;
                           A   360    ;   98	volatile unsigned char ser_tx_currentby
                           A   361    ;   99	
                           A   362    ;  100	volatile unsigned char ir_rx_counter;
                           A   363    ;  101	volatile unsigned char ir_rx_halfbits;
                           A   364    ;  102	volatile unsigned char ir_loaded_tags;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   8


PC     Object              I  Line    Source main.src
                           A   365    ;  103	
                           A   366    ;  104	volatile unsigned char btn_counter;
                           A   367    ;  105	volatile unsigned char btn_prelim;
                           A   368    ;  106	volatile unsigned char btn_pressed;
                           A   369    ;  107	
                           A   370    ;  108	volatile unsigned char tempIO;
                           A   371    ;  109	volatile unsigned char lastIO;
                           A   372    ;  110	
                           A   373    ;  111	volatile unsigned char temp_tx_buffer[1
                           A   374    ;  112	volatile unsigned char temp_tx_size;
                           A   375    ;  113	
                           A   376    ;  114	volatile unsigned char sendBarrelReply;
                           A   377    ;  115	volatile unsigned char sendLoadSpecial;
                           A   378    ;  116	volatile unsigned char sendArmSpecial;
                           A   379    ;  117	volatile unsigned char weAreRegistered;
                           A   380    ;  118	volatile unsigned char weAreReloading;
                           A   381    ;  119	
                           A   382    ;  120	volatile unsigned int reloadCooldown;
                           A   383    ;  121	
                           A   384    ;  122	void interrupt isr_uartrx(void) {
                           A   385    .define "temp"
                           A   386    .class 4
                           A   387    .reg 1
                           A   388    .type 12
                           A   389    .type 0
                           A   390    .endef
000000 C8FFD0              A   391    	PUSHX	4093
000003 D6 0000             A   392    	CALL	__b_iframeset00
                           A   393    ;  123		unsigned char temp;
                           A   394    ;  124		
                           A   395    ;  125		temp = U0RXD;
                           A   396    .line 125
000006 840F40              A   397    	LDX	R0,3904
                           A   398    ;  126		//Byte received
                           A   399    ;  127		if((U0STAT0 & 0x78) == 0x78) {
                           A   400    .line 127
000009 841F41              A   401    	LDX	R1,3905
00000C 56E178              A   402    	AND	R1,#120
00000F E4E1E2              A   403    	LD	R2,R1
000012 A6E178              A   404    	CP	R1,#120
000015 6B 2C               A   405    	JR	Z,_1_L_5
                           A   406    ;  128			//Error during reception. Do no
                           A   407    ;  129			return;
                           A   408    .line 129
                           A   409    ;  130		} else {
                           A   410    .line 130
                           A   411    ;  131			//If the interrupt was because 
                           A   412    ;  132			if(!(captureBuffer.size & 0x80)
                           A   413    .line 132
000017 79800011            A   414    	TMX	_captureBuffer+17,#128
00001B EB 22               A   415    	JR	NE,_1_L_4
                           A   416    ;  133				captureBuffer.buffer[captur
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:   9


PC     Object              I  Line    Source main.src
                           A   417    .line 133
00001D 841011              A   418    	LDX	R1,_captureBuffer+17
000020 E4E1E2              A   419    	LD	R2,R1
000023 2C 00               A   420    	LD	R2,#high(_captureBuffer+1)
000025 3C 01               A   421    	LD	R3,#low(_captureBuffer+1)
000027 0231                A   422    	ADD	R3,R1
000029 16E200              A   423    	ADC	R2,#0
00002C 96E0E2              A   424    	LDX	@RR2,R0
00002F 09010011            A   425    	ADDX	_captureBuffer+17,#1
                           A   426    ;  134				captureBuffer.checksum -= t
                           A   427    .line 134
000033 28EE0012            A   428    	SUBX	_captureBuffer+18,R0
                           A   429    ;  135				ser_rx_eob_counter = 0; //C
                           A   430    .line 135
000037 E9000013            A   431    	LDX	_ser_rx_eob_counter,#-0
                           A   432    ;  136				captureBuffer.hasrxed = 1; 
                           A   433    .line 136
00003B E9010000            A   434    	LDX	_captureBuffer,#1
                           A   435    ;  137			}
                           A   436    ;  138		}
00003F                     A   437    _1_L_4:
                           A   438    .line 138
                           A   439    ;  139		//Clear the interrupt bit
                           A   440    ;  140		IRQ0 &= 0xEF;
                           A   441    .line 140
00003F 59EF0FC0            A   442    	ANDX	4032,#239
                           A   443    ;  141	}
000043                     A   444    _1_L_5:
                           A   445    .line 141
000043 D6 0000             A   446    	CALL	__b_iframereset
000046 BF                  A   447    	IRET	
                           A   448    .endfunc "isr_uartrx",141,"_isr_uartrx"
                           A   449    	SEGMENT ROM_DATA
                           A   450    
                           A   451    
                           A   452    ;**************************** _isr_uarttx *****
                           A   453    ;Name                         Addr/Register   S
                           A   454    ;_ser_tx_buffer                      STATIC    
                           A   455    ;_ser_tx_currentbyte                 STATIC    
                           A   456    ;_ser_tx_cooldown                    STATIC    
                           A   457    ;_ser_tx_size                        STATIC    
                           A   458    
                           A   459    
                           A   460    ; Aggregate Stack Size: 0 (words)
                           A   461    
                           A   462    
                           A   463    	.FRAME _n_isr_uarttx,?_n_isr_uarttx,RDATA
                           A   464    	.FRAME _f_isr_uarttx,?_f_isr_uarttx,EDATA
                           A   465    	SEGMENT main_TEXT
000047                     A   466    _isr_uarttx:
                           A   467    .define "_isr_uarttx"
                           A   468    .value _isr_uarttx
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  10


PC     Object              I  Line    Source main.src
                           A   469    .class 2
                           A   470    .type 65
                           A   471    .type 0
                           A   472    .endef
                           A   473    .begfunc "isr_uarttx",143,"_isr_uarttx"
000047 C8FFD0              A   474    	PUSHX	4093
00004A D6 0000             A   475    	CALL	__b_iframeset00
                           A   476    ;  142	
                           A   477    ;  143	void interrupt isr_uarttx(void) {
                           A   478    ;  144		//Ready to transmit a byte
                           A   479    ;  145		if(ser_tx_size && !ser_tx_cooldown)
                           A   480    .line 145
00004D A9000024            A   481    	CPX	_ser_tx_size,#-0
000051 6B 33               A   482    	JR	Z,_2_L_11
000053 A9000025            A   483    	CPX	_ser_tx_cooldown,#-0
000057 EB 2D               A   484    	JR	NE,_2_L_11
                           A   485    ;  146			if(ser_tx_currentbyte == ser_tx
                           A   486    .line 146
000059 A8 024026           A   487    	CPX	_ser_tx_currentbyte,_ser_tx_size
00005D EB 0E               A   488    	JR	NE,_2_L_9
                           A   489    ;  147				ser_tx_currentbyte = 0; //R
                           A   490    .line 147
00005F E9000026            A   491    	LDX	_ser_tx_currentbyte,#-0
                           A   492    ;  148				ser_tx_size = 0; 		//C
                           A   493    .line 148
000063 E9000024            A   494    	LDX	_ser_tx_size,#-0
                           A   495    ;  149				ser_tx_cooldown = 116; 	//A
                           A   496    .line 149
000067 E9740025            A   497    	LDX	_ser_tx_cooldown,#116
                           A   498    ;  150										//S
                           A   499    ;  151										//,
                           A   500    ;  152										//,
                           A   501    ;  153										//T
                           A   502    ;  154			} else { //There's still bytes 
                           A   503    .line 154
00006B 8B 19               A   504    	JR	_2_L_11
00006D                     A   505    _2_L_9:
                           A   506    ;  155				U0TXD = ser_tx_buffer[ser_t
                           A   507    .line 155
00006D 842026              A   508    	LDX	R2,_ser_tx_currentbyte
000070 0C 00               A   509    	LD	R0,#high(_ser_tx_buffer)
000072 1C 14               A   510    	LD	R1,#low(_ser_tx_buffer)
000074 0212                A   511    	ADD	R1,R2
000076 16E000              A   512    	ADC	R0,#0
000079 86E0E2              A   513    	LDX	R2,@RR0
00007C 942F40              A   514    	LDX	3904,R2
                           A   515    ;  156				ser_tx_currentbyte++; //Adv
                           A   516    .line 156
00007F 840026              A   517    	LDX	R0,_ser_tx_currentbyte
000082 09010026            A   518    	ADDX	_ser_tx_currentbyte,#1
                           A   519    ;  157			}
                           A   520    ;  158		}
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  11


PC     Object              I  Line    Source main.src
000086                     A   521    _2_L_11:
                           A   522    .line 158
                           A   523    ;  159		//Clear the interrupt bit.
                           A   524    ;  160		IRQ0 &= 0xF7;
                           A   525    .line 160
000086 59F70FC0            A   526    	ANDX	4032,#247
                           A   527    ;  161	}
                           A   528    .line 161
00008A D6 0000             A   529    	CALL	__b_iframereset
00008D BF                  A   530    	IRET	
                           A   531    .endfunc "isr_uarttx",161,"_isr_uarttx"
                           A   532    	SEGMENT ROM_DATA
                           A   533    
                           A   534    
                           A   535    ;**************************** _isr_timer0 *****
                           A   536    ;Name                         Addr/Register   S
                           A   537    ;_ir_loaded_tags                     STATIC    
                           A   538    ;_ir_rx_counter                      STATIC    
                           A   539    ;_ir_rx_halfbits                     STATIC    
                           A   540    ;_btn_pressed                        STATIC    
                           A   541    ;_btn_prelim                         STATIC    
                           A   542    ;_btn_counter                        STATIC    
                           A   543    ;_captureBuffer                      STATIC    
                           A   544    ;_reloadCooldown                     STATIC    
                           A   545    ;_ser_tx_cooldown                    STATIC    
                           A   546    ;_ser_rx_eob_counter                 STATIC    
                           A   547    ;_lastIO                             STATIC    
                           A   548    ;_tempIO                             STATIC    
                           A   549    
                           A   550    
                           A   551    ; Aggregate Stack Size: 0 (words)
                           A   552    
                           A   553    
                           A   554    	.FRAME _n_isr_timer0,?_n_isr_timer0,RDATA
                           A   555    	.FRAME _f_isr_timer0,?_f_isr_timer0,EDATA
                           A   556    	SEGMENT main_TEXT
00008E                     A   557    _isr_timer0:
                           A   558    .define "_isr_timer0"
                           A   559    .value _isr_timer0
                           A   560    .class 2
                           A   561    .type 65
                           A   562    .type 0
                           A   563    .endef
                           A   564    .begfunc "isr_timer0",163,"_isr_timer0"
00008E C8FFD0              A   565    	PUSHX	4093
000091 D6 0000             A   566    	CALL	__b_iframeset00
                           A   567    ;  162	
                           A   568    ;  163	void interrupt isr_timer0(void) {
                           A   569    ;  164		//8KHz interrupt.
                           A   570    ;  165		
                           A   571    ;  166		lastIO = tempIO;
                           A   572    .line 166
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  12


PC     Object              I  Line    Source main.src
000094 E8 02D02E           A   573    	LDX	_lastIO,_tempIO
                           A   574    ;  167		tempIO = PAIN;
                           A   575    .line 167
000098 E8FD202D            A   576    	LDX	_tempIO,4050
                           A   577    ;  168		
                           A   578    ;  169		//Various 1/8ms timers
                           A   579    ;  170		ser_rx_eob_counter += 1;
                           A   580    .line 170
00009C 09010013            A   581    	ADDX	_ser_rx_eob_counter,#1
                           A   582    ;  171		if(ser_tx_cooldown) {
                           A   583    .line 171
0000A0 A9000025            A   584    	CPX	_ser_tx_cooldown,#-0
0000A4 6B 04               A   585    	JR	Z,_3_L_15
                           A   586    ;  172			ser_tx_cooldown -= 1;
                           A   587    .line 172
0000A6 29010025            A   588    	SUBX	_ser_tx_cooldown,#1
                           A   589    ;  173		}
0000AA                     A   590    _3_L_15:
                           A   591    .line 173
                           A   592    ;  174		if(reloadCooldown) {
                           A   593    .line 174
0000AA 840045              A   594    	LDX	R0,_reloadCooldown
0000AD 841046              A   595    	LDX	R1,_reloadCooldown+1
0000B0 4201                A   596    	OR	R0,R1
0000B2 6B 08               A   597    	JR	Z,_3_L_21
                           A   598    ;  175			reloadCooldown -= 1;
                           A   599    .line 175
0000B4 29010046            A   600    	SUBX	_reloadCooldown+1,#1
0000B8 39000045            A   601    	SBCX	_reloadCooldown,#-0
                           A   602    ;  176		}
0000BC                     A   603    _3_L_21:
                           A   604    .line 176
                           A   605    ;  177		
                           A   606    ;  178		//Serial RX end-of-block stuff.
                           A   607    ;  179		//When the RX line has been idle fo
                           A   608    ;  180		// The block has finished transmitt
                           A   609    ;  181		if((ser_rx_eob_counter == 60) && ca
                           A   610    .line 181
0000BC A93C0013            A   611    	CPX	_ser_rx_eob_counter,#60
0000C0 EB 1E               A   612    	JR	NE,_3_L_29
0000C2 A9000000            A   613    	CPX	_captureBuffer,#-0
0000C6 6B 18               A   614    	JR	Z,_3_L_29
                           A   615    ;  182	        captureBuffer.hasrxed = 0;
                           A   616    .line 182
0000C8 E9000000            A   617    	LDX	_captureBuffer,#-0
                           A   618    ;  183	        if(!captureBuffer.checksum) {
                           A   619    .line 183
0000CC A9000012            A   620    	CPX	_captureBuffer+18,#-0
0000D0 EB 06               A   621    	JR	NE,_3_L_18
                           A   622    ;  184				//The easiest way to check 
                           A   623    ;  185				// including the checksum b
                           A   624    ;  186				// the block was received c
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  13


PC     Object              I  Line    Source main.src
                           A   625    ;  187	            captureBuffer.size |= 0x80;
                           A   626    .line 187
0000D2 49800011            A   627    	ORX	_captureBuffer+17,#128
                           A   628    ;  188	        } else {
                           A   629    .line 188
0000D6 8B 04               A   630    	JR	_3_L_19
0000D8                     A   631    _3_L_18:
                           A   632    ;  189	            captureBuffer.size = 0; //C
                           A   633    .line 189
0000D8 E9000011            A   634    	LDX	_captureBuffer+17,#-0
                           A   635    ;  190	        }
0000DC                     A   636    _3_L_19:
                           A   637    .line 190
                           A   638    ;  191	        captureBuffer.checksum = 0xFF; 
                           A   639    .line 191
0000DC E9FF0012            A   640    	LDX	_captureBuffer+18,#255
                           A   641    ;  192	    }
0000E0                     A   642    _3_L_29:
                           A   643    .line 192
                           A   644    ;  193		
                           A   645    ;  194		//Button stuff
                           A   646    ;  195		//If the button is not in the state
                           A   647    ;  196		// just pressed the button.
                           A   648    ;  197		if((tempIO & 0x01) != (lastIO & 0x0
                           A   649    .line 197
0000E0 84002D              A   650    	LDX	R0,_tempIO
0000E3 56E001              A   651    	AND	R0,#1
0000E6 84102E              A   652    	LDX	R1,_lastIO
0000E9 56E101              A   653    	AND	R1,#1
0000EC A201                A   654    	CP	R0,R1
0000EE 6B 16               A   655    	JR	Z,_3_L_28
                           A   656    ;  198	        //Button state changed, clear t
                           A   657    ;  199	        btn_counter = 0;
                           A   658    .line 199
0000F0 E900002A            A   659    	LDX	_btn_counter,#-0
                           A   660    ;  200	        if(!(tempIO & 0x01)) {
                           A   661    .line 200
0000F4 7901002D            A   662    	TMX	_tempIO,#1
0000F8 EB 06               A   663    	JR	NE,_3_L_23
                           A   664    ;  201	            //Was just pressed
                           A   665    ;  202	            //Set a flag that it's been
                           A   666    ;  203	            btn_prelim = 1;
                           A   667    .line 203
0000FA E901002B            A   668    	LDX	_btn_prelim,#1
                           A   669    ;  204	        } else {
                           A   670    .line 204
0000FE 8B 21               A   671    	JR	_3_L_54
000100                     A   672    _3_L_23:
                           A   673    ;  205				//Was just released
                           A   674    ;  206				btn_prelim = 0;
                           A   675    .line 206
000100 E900002B            A   676    	LDX	_btn_prelim,#-0
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  14


PC     Object              I  Line    Source main.src
                           A   677    ;  207			}
                           A   678    ;  208	    } else {
                           A   679    .line 208
000104 8B 1B               A   680    	JR	_3_L_54
000106                     A   681    _3_L_28:
                           A   682    ;  209			//Button is still in whatever s
                           A   683    ;  210	        btn_counter++; //Count how long
                           A   684    .line 210
000106 84002A              A   685    	LDX	R0,_btn_counter
000109 0901002A            A   686    	ADDX	_btn_counter,#1
                           A   687    ;  211	        if(btn_prelim && (btn_counter >
                           A   688    .line 211
00010D A900002B            A   689    	CPX	_btn_prelim,#-0
000111 6B 0E               A   690    	JR	Z,_3_L_54
000113 A903002A            A   691    	CPX	_btn_counter,#3
000117 3B 08               A   692    	JR	ULE,_3_L_54
                           A   693    ;  212	            btn_prelim = 0;
                           A   694    .line 212
000119 E900002B            A   695    	LDX	_btn_prelim,#-0
                           A   696    ;  213	            btn_pressed = 1; //Mark tha
                           A   697    .line 213
00011D E901002C            A   698    	LDX	_btn_pressed,#1
                           A   699    ;  214	        }
                           A   700    ;  215	    }
000121                     A   701    _3_L_54:
                           A   702    .line 215
                           A   703    ;  216		
                           A   704    ;  217		//IR stuff
                           A   705    ;  218		//If we have ammo loaded in the att
                           A   706    ;  219		// switch back to pistol mode. This
                           A   707    ;  220		// right header and length.
                           A   708    ;  221		if((tempIO & 0x08) != (lastIO & 0x0
                           A   709    .line 221
000121 84002D              A   710    	LDX	R0,_tempIO
000124 56E008              A   711    	AND	R0,#8
000127 84102E              A   712    	LDX	R1,_lastIO
00012A 56E108              A   713    	AND	R1,#8
00012D A201                A   714    	CP	R0,R1
00012F 6B 4F               A   715    	JR	Z,_3_L_53
                           A   716    ;  222			//LAZERMOD's state has changed
                           A   717    ;  223			 if(ir_rx_halfbits == 1) {
                           A   718    .line 223
000131 A9010028            A   719    	CPX	_ir_rx_halfbits,#1
000135 EB 15               A   720    	JR	NE,_3_L_42
                           A   721    ;  224				//if((ir_rx_counter > 22) &
                           A   722    ;  225				 if((ir_rx_counter > 45) &&
                           A   723    .line 225
000137 A92D0027            A   724    	CPX	_ir_rx_counter,#45
00013B 3B 3D               A   725    	JR	ULE,_3_L_43
00013D A9330027            A   726    	CPX	_ir_rx_counter,#51
000141 FB 37               A   727    	JR	NC,_3_L_43
                           A   728    ;  226					//If it's between 5.75m
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  15


PC     Object              I  Line    Source main.src
                           A   729    ;  227					//This is actually the 
                           A   730    ;  228					// to work.
                           A   731    ;  229					ir_rx_halfbits++;
                           A   732    .line 229
000143 840028              A   733    	LDX	R0,_ir_rx_halfbits
000146 09010028            A   734    	ADDX	_ir_rx_halfbits,#1
                           A   735    ;  230				}
                           A   736    ;  231			 } else if(ir_rx_halfbits < 3) 
                           A   737    .line 231
00014A 8B 2E               A   738    	JR	_3_L_43
00014C                     A   739    _3_L_42:
00014C A9030028            A   740    	CPX	_ir_rx_halfbits,#3
000150 FB 15               A   741    	JR	NC,_3_L_40
                           A   742    ;  232				//if((ir_rx_counter > 10) &
                           A   743    ;  233				 if((ir_rx_counter > 21) &&
                           A   744    .line 233
000152 A9150027            A   745    	CPX	_ir_rx_counter,#21
000156 3B 22               A   746    	JR	ULE,_3_L_43
000158 A91B0027            A   747    	CPX	_ir_rx_counter,#27
00015C FB 1C               A   748    	JR	NC,_3_L_43
                           A   749    ;  234					//If it's between 2.75m
                           A   750    ;  235					ir_rx_halfbits++;
                           A   751    .line 235
00015E 840028              A   752    	LDX	R0,_ir_rx_halfbits
000161 09010028            A   753    	ADDX	_ir_rx_halfbits,#1
                           A   754    ;  236				}
                           A   755    ;  237			} else {
                           A   756    .line 237
000165 8B 13               A   757    	JR	_3_L_43
000167                     A   758    _3_L_40:
                           A   759    ;  238				//if((ir_rx_counter > 2) &&
                           A   760    ;  239				if((ir_rx_counter > 5) && (
                           A   761    .line 239
000167 A9050027            A   762    	CPX	_ir_rx_counter,#5
00016B 3B 0D               A   763    	JR	ULE,_3_L_43
00016D A9130027            A   764    	CPX	_ir_rx_counter,#19
000171 FB 07               A   765    	JR	NC,_3_L_43
                           A   766    ;  240					//If it's between 0.75m
                           A   767    ;  241					//If we reached this po
                           A   768    ;  242					ir_rx_halfbits++;
                           A   769    .line 242
000173 840028              A   770    	LDX	R0,_ir_rx_halfbits
000176 09010028            A   771    	ADDX	_ir_rx_halfbits,#1
                           A   772    ;  243				}
                           A   773    ;  244			}
00017A                     A   774    _3_L_43:
                           A   775    .line 244
                           A   776    ;  245			ir_rx_counter = 0;
                           A   777    .line 245
00017A E9000027            A   778    	LDX	_ir_rx_counter,#-0
                           A   779    ;  246		} else {
                           A   780    .line 246
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  16


PC     Object              I  Line    Source main.src
00017E 8B 32               A   781    	JR	_3_L_55
000180                     A   782    _3_L_53:
                           A   783    ;  247			ir_rx_counter++;
                           A   784    .line 247
000180 840027              A   785    	LDX	R0,_ir_rx_counter
000183 09010027            A   786    	ADDX	_ir_rx_counter,#1
                           A   787    ;  248			//if(ir_rx_counter > 40) {
                           A   788    ;  249			if(ir_rx_counter > 64) {
                           A   789    .line 249
000187 A9400027            A   790    	CPX	_ir_rx_counter,#64
00018B 3B 25               A   791    	JR	ULE,_3_L_55
                           A   792    ;  250				//End of IR packet
                           A   793    ;  251				if(ir_rx_halfbits == 17) {
                           A   794    .line 251
00018D A9110028            A   795    	CPX	_ir_rx_halfbits,#17
000191 EB 17               A   796    	JR	NE,_3_L_50
                           A   797    ;  252					//Tag of some sort.
                           A   798    ;  253					if(ir_loaded_tags) { //
                           A   799    .line 253
000193 A9000029            A   800    	CPX	_ir_loaded_tags,#-0
000197 6B 07               A   801    	JR	Z,_3_L_48
                           A   802    ;  254						ir_loaded_tags--; /
                           A   803    .line 254
000199 840029              A   804    	LDX	R0,_ir_loaded_tags
00019C 29010029            A   805    	SUBX	_ir_loaded_tags,#1
                           A   806    ;  255					}
0001A0                     A   807    _3_L_48:
                           A   808    .line 255
                           A   809    ;  256					if(!ir_loaded_tags) { /
                           A   810    .line 256
0001A0 A9000029            A   811    	CPX	_ir_loaded_tags,#-0
0001A4 EB 04               A   812    	JR	NE,_3_L_50
                           A   813    ;  257						//Turn off the INHI
                           A   814    ;  258						PAOUT &= 0xFD; //Di
                           A   815    .line 258
0001A6 59FD0FD3            A   816    	ANDX	4051,#253
                           A   817    ;  259					}
                           A   818    ;  260				}
0001AA                     A   819    _3_L_50:
                           A   820    .line 260
                           A   821    ;  261				//Reset for the next tag.
                           A   822    ;  262				ir_rx_halfbits = 0;
                           A   823    .line 262
0001AA E9000028            A   824    	LDX	_ir_rx_halfbits,#-0
                           A   825    ;  263				ir_rx_counter = 0;
                           A   826    .line 263
0001AE E9000027            A   827    	LDX	_ir_rx_counter,#-0
                           A   828    ;  264			}
                           A   829    ;  265		}
                           A   830    ;  266	}
0001B2                     A   831    _3_L_55:
                           A   832    .line 266
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  17


PC     Object              I  Line    Source main.src
0001B2 D6 0000             A   833    	CALL	__b_iframereset
0001B5 BF                  A   834    	IRET	
                           A   835    .endfunc "isr_timer0",266,"_isr_timer0"
                           A   836    	SEGMENT ROM_DATA
                           A   837    
                           A   838    
                           A   839    ;**************************** _init_cpu *******
                           A   840    ;Name                         Addr/Register   S
                           A   841    ;_EI                                 IMPORT  --
                           A   842    ;_SET_VECTOR                         IMPORT  --
                           A   843    ;_DI                                 IMPORT  --
                           A   844    
                           A   845    
                           A   846    ; Aggregate Stack Size: 0 (words)
                           A   847    
                           A   848    
                           A   849    	.FRAME _n_init_cpu,?_n_init_cpu,RDATA
                           A   850    	.FRAME _f_init_cpu,?_f_init_cpu,EDATA
                           A   851    	SEGMENT main_TEXT
0001B6                     A   852    _init_cpu:
                           A   853    .define "_init_cpu"
                           A   854    .value _init_cpu
                           A   855    .class 2
                           A   856    .type 65
                           A   857    .type 0
                           A   858    .endef
                           A   859    .begfunc "init_cpu",268,"_init_cpu"
0001B6 D6 0000             A   860    	CALL	__b_frameset00
                           A   861    ;  267	
                           A   862    ;  268	void init_cpu(void) {
                           A   863    ;  269		DI();
                           A   864    .line 269
0001B9 8F                  A   865    	DI
                           A   866    ;  270		
                           A   867    ;  271		//PA0: RELOAD/DBG. Input, external 
                           A   868    ;  272		//PA1: INHIBIT. Output.
                           A   869    ;  273		//PA2: 38KHz. T1OUT, output.
                           A   870    ;  274		//PA3: LAZERMOD. Input.
                           A   871    ;  275		//PA4: RXD. UART, input.
                           A   872    ;  276		//PA5: TXD. UART, output.
                           A   873    ;  277		
                           A   874    ;  278		//Set up Port A.
                           A   875    ;  279		PADD = 0x19;	//00011001
                           A   876    .line 279
0001BA E9010FD0            A   877    	LDX	4048,#1
0001BE E9190FD1            A   878    	LDX	4049,#25
                           A   879    ;  280		PAAF = 0x34;	//00110100
                           A   880    .line 280
0001C2 E9020FD0            A   881    	LDX	4048,#2
0001C6 E9340FD1            A   882    	LDX	4049,#52
                           A   883    ;  281		PAAFS1 = 0x04;	//00000100
                           A   884    .line 281
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  18


PC     Object              I  Line    Source main.src
0001CA E9070FD0            A   885    	LDX	4048,#7
0001CE E9040FD1            A   886    	LDX	4049,#4
                           A   887    ;  282		PAAFS2 = 0x00;	//00000000
                           A   888    .line 282
0001D2 E9080FD0            A   889    	LDX	4048,#8
0001D6 E9000FD1            A   890    	LDX	4049,#-0
                           A   891    ;  283		//PAPUE = 0x10;	//00010000
                           A   892    ;  284		
                           A   893    ;  285		//Set up UART for 2000 baud, 8 data
                           A   894    ;  286		//Set baud rate
                           A   895    ;  287		U0BRH = 0x00;
                           A   896    .line 287
0001DA E9000F46            A   897    	LDX	3910,#-0
                           A   898    ;  288		U0BRL = 0xAD;
                           A   899    .line 288
0001DE E9AD0F47            A   900    	LDX	3911,#173
                           A   901    ;  289		//Set up interrupt
                           A   902    ;  290		SET_VECTOR(UART0_RX_IVECT, isr_uart
                           A   903    ;  291		SET_VECTOR(UART0_TX_IVECT, isr_uart
                           A   904    ;  292		IRQ0ENH |= 0x18;
                           A   905    .line 292
0001E2 49180FC1            A   906    	ORX	4033,#24
                           A   907    ;  293		IRQ0ENL |= 0x18;
                           A   908    .line 293
0001E6 49180FC2            A   909    	ORX	4034,#24
                           A   910    ;  294		IRQ0 &= ~0x18;
                           A   911    .line 294
0001EA 59E70FC0            A   912    	ANDX	4032,#-25
                           A   913    ;  295		//Enable transmitter and receiver, 
                           A   914    ;  296		U0CTL0 = 0xC2; 	//11000010
                           A   915    .line 296
0001EE E9C20F42            A   916    	LDX	3906,#194
                           A   917    ;  297		//Enable interrupts on received dat
                           A   918    ;  298		U0CTL1 = 0x00;	//00000000
                           A   919    .line 298
0001F2 E9000F43            A   920    	LDX	3907,#-0
                           A   921    ;  299		
                           A   922    ;  300		//Set up Timer0 to be an 8KHz heart
                           A   923    ;  301		//Disable timer, set mode to Contin
                           A   924    ;  302		T0CTL1 = 0x01;	//00000001
                           A   925    .line 302
0001F6 E9010F07            A   926    	LDX	3847,#1
                           A   927    ;  303		T0CTL0 = 0x00;	//00000000
                           A   928    .line 303
0001FA E9000F06            A   929    	LDX	3846,#-0
                           A   930    ;  304		//Reset count
                           A   931    ;  305		T0H = 0x00; T0L = 0x01;
                           A   932    .line 305
0001FE E9000F00            A   933    	LDX	3840,#-0
000202 E9010F01            A   934    	LDX	3841,#1
                           A   935    ;  306		//Set the reload value
                           A   936    ;  307		//T0RH = 0x05; T0RL = 0x5F;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  19


PC     Object              I  Line    Source main.src
                           A   937    ;  308		T0RH = 0x02; T0RL = 0xB3;
                           A   938    .line 308
000206 E9020F02            A   939    	LDX	3842,#2
00020A E9B30F03            A   940    	LDX	3843,#179
                           A   941    ;  309		//Set the interrupt vector and prio
                           A   942    ;  310		SET_VECTOR(TIMER0, isr_timer0);
                           A   943    ;  311		IRQ0ENH |= 0x20;
                           A   944    .line 311
00020E 49200FC1            A   945    	ORX	4033,#32
                           A   946    ;  312		IRQ0ENL |= 0x20;
                           A   947    .line 312
000212 49200FC2            A   948    	ORX	4034,#32
                           A   949    ;  313		//Enable timer
                           A   950    ;  314		T0CTL1 |= 0x80;
                           A   951    .line 314
000216 49800F07            A   952    	ORX	3847,#128
                           A   953    ;  315		
                           A   954    ;  316		//Set up Timer1 to be 38KHz, 50% du
                           A   955    ;  317		//Turn off timer, set mode to singl
                           A   956    ;  318		T1CTL1 = 0x43;	//01000011
                           A   957    .line 318
00021A E9430F0F            A   958    	LDX	3855,#67
                           A   959    ;  319		T1CTL0 = 0x00;	//00000000
                           A   960    .line 319
00021E E9000F0E            A   961    	LDX	3854,#-0
                           A   962    ;  320		//Reset count
                           A   963    ;  321		T1H = 0x00; T1L = 0x01;
                           A   964    .line 321
000222 E9000F08            A   965    	LDX	3848,#-0
000226 E9010F09            A   966    	LDX	3849,#1
                           A   967    ;  322		//Set PWM value(Duty cycle)
                           A   968    ;  323		T1PWMH = 0x00; T1PWML = 0x48;
                           A   969    .line 323
00022A E9000F0C            A   970    	LDX	3852,#-0
00022E E9480F0D            A   971    	LDX	3853,#72
                           A   972    ;  324		//Set the reload value(Period)
                           A   973    ;  325		T1RH = 0x00; T1RL = 0x90;
                           A   974    .line 325
000232 E9000F0A            A   975    	LDX	3850,#-0
000236 E9900F0B            A   976    	LDX	3851,#144
                           A   977    ;  326		//Enable timer
                           A   978    ;  327		T1CTL1 |= 0x80;
                           A   979    .line 327
00023A 49800F0F            A   980    	ORX	3855,#128
                           A   981    ;  328		
                           A   982    ;  329		//Turn off the inhibit line
                           A   983    ;  330		PAOUT &= 0xFD;
                           A   984    .line 330
00023E 59FD0FD3            A   985    	ANDX	4051,#253
                           A   986    ;  331		
                           A   987    ;  332		//lastIO = PAIN;
                           A   988    ;  333		//tempIO = PAIN;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  20


PC     Object              I  Line    Source main.src
                           A   989    ;  334		
                           A   990    ;  335		EI();
                           A   991    .line 335
000242 9F                  A   992    	EI
                           A   993    ;  336	}
                           A   994    .line 336
000243 D6 0000             A   995    	CALL	__b_framereset
000246 AF                  A   996    	RET	
                           A   997    .endfunc "init_cpu",336,"_init_cpu"
                           A   998    	SEGMENT ROM_DATA
                           A   999    
                           A  1000    
                           A  1001    ;**************************** _sendQueue ******
                           A  1002    ;Name                         Addr/Register   S
                           A  1003    ;_ser_tx_size                        STATIC    
                           A  1004    ;_ser_tx_buffer                      STATIC    
                           A  1005    ;_temp_tx_buffer                     STATIC    
                           A  1006    ;_temp_tx_size                       STATIC    
                           A  1007    ;i                                      RR0    
                           A  1008    
                           A  1009    
                           A  1010    ; Aggregate Stack Size: 0 (words)
                           A  1011    
                           A  1012    
                           A  1013    	.FRAME _n_sendQueue,?_n_sendQueue,RDATA
                           A  1014    	.FRAME _f_sendQueue,?_f_sendQueue,EDATA
                           A  1015    	SEGMENT main_TEXT
000247                     A  1016    _sendQueue:
                           A  1017    .define "_sendQueue"
                           A  1018    .value _sendQueue
                           A  1019    .class 2
                           A  1020    .type 65
                           A  1021    .type 0
                           A  1022    .endef
                           A  1023    .begfunc "sendQueue",338,"_sendQueue"
                           A  1024    ;  337	
                           A  1025    ;  338	void sendQueue(void) {
                           A  1026    .define "i"
                           A  1027    .class 4
                           A  1028    .reg 17
                           A  1029    .type 3
                           A  1030    .type 0
                           A  1031    .endef
000247 D6 0000             A  1032    	CALL	__b_frameset00
00024A 8B 0D               A  1033    	JR	_5_L_58
                           A  1034    ;  339		int i;
                           A  1035    ;  340		
                           A  1036    ;  341		//Copy the data from the temporary 
                           A  1037    ;  342		for(i = 0;i < temp_tx_size;i++) {
00024C                     A  1038    _5_L_59:
                           A  1039    .line 342
00024C 84203F              A  1040    	LDX	R2,_temp_tx_size
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  21


PC     Object              I  Line    Source main.src
00024F A212                A  1041    	CP	R1,R2
000251 1FA6E000            A  1042    	CPC	R0,#-0
000255 1B 08               A  1043    	JR	LT,_5_L_61
000257 8B 20               A  1044    	JR	_5_L_62
000259                     A  1045    _5_L_58:
000259 B0E0                A  1046    	CLR	R0
00025B B0E1                A  1047    	CLR	R1
00025D 8B ED               A  1048    	JR	_5_L_59
00025F                     A  1049    _5_L_61:
                           A  1050    ;  343			ser_tx_buffer[i] = temp_tx_buff
                           A  1051    .line 343
00025F 2C 00               A  1052    	LD	R2,#high(_temp_tx_buffer)
000261 3C 2F               A  1053    	LD	R3,#low(_temp_tx_buffer)
000263 0231                A  1054    	ADD	R3,R1
000265 1220                A  1055    	ADC	R2,R0
000267 4C 00               A  1056    	LD	R4,#high(_ser_tx_buffer)
000269 5C 14               A  1057    	LD	R5,#low(_ser_tx_buffer)
00026B 0251                A  1058    	ADD	R5,R1
00026D 1240                A  1059    	ADC	R4,R0
00026F 86E2E6              A  1060    	LDX	R6,@RR2
000272 96E6E4              A  1061    	LDX	@RR4,R6
                           A  1062    .line 342
000275 A0E0                A  1063    	INCW	RR0
                           A  1064    ;  344		}
                           A  1065    .line 344
000277 8B D3               A  1066    	JR	_5_L_59
000279                     A  1067    _5_L_62:
                           A  1068    ;  345		ser_tx_size = temp_tx_size;
                           A  1069    .line 345
000279 E8 03F024           A  1070    	LDX	_ser_tx_size,_temp_tx_size
                           A  1071    ;  346		
                           A  1072    ;  347		//Clear the temporary queue.
                           A  1073    ;  348		temp_tx_size = 0;
                           A  1074    .line 348
00027D E900003F            A  1075    	LDX	_temp_tx_size,#-0
                           A  1076    ;  349		
                           A  1077    ;  350		//Kickstart the UART.
                           A  1078    ;  351		IRQ0 |= 0x08;
                           A  1079    .line 351
000281 49080FC0            A  1080    	ORX	4032,#8
                           A  1081    ;  352	}
                           A  1082    .line 352
000285 D6 0000             A  1083    	CALL	__b_framereset
000288 AF                  A  1084    	RET	
                           A  1085    .endfunc "sendQueue",352,"_sendQueue"
                           A  1086    	SEGMENT ROM_DATA
                           A  1087    
                           A  1088    
                           A  1089    ;**************************** _queueByte ******
                           A  1090    ;Name                         Addr/Register   S
                           A  1091    ;_temp_tx_size                       STATIC    
                           A  1092    ;_temp_tx_buffer                     STATIC    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  22


PC     Object              I  Line    Source main.src
                           A  1093    ;input                                   R8    
                           A  1094    
                           A  1095    
                           A  1096    ; Aggregate Stack Size: 0 (words)
                           A  1097    
                           A  1098    
                           A  1099    	.FRAME _n_queueByte,?_n_queueByte,RDATA
                           A  1100    	.FRAME _f_queueByte,?_f_queueByte,EDATA
                           A  1101    	SEGMENT main_TEXT
000289                     A  1102    _queueByte:
                           A  1103    .define "_queueByte"
                           A  1104    .value _queueByte
                           A  1105    .class 2
                           A  1106    .type 65
                           A  1107    .type 0
                           A  1108    .endef
                           A  1109    .begfunc "queueByte",354,"_queueByte"
                           A  1110    .define "input"
                           A  1111    .class 17
                           A  1112    .reg 9
                           A  1113    .type 12
                           A  1114    .type 0
                           A  1115    .endef
000289 D6 0000             A  1116    	CALL	__b_frameset00
                           A  1117    ;  353	
                           A  1118    ;  354	void queueByte(unsigned char input) {
                           A  1119    ;  355		//Add a byte to the temporary queue
                           A  1120    ;  356		temp_tx_buffer[temp_tx_size] = inpu
                           A  1121    .line 356
00028C 84203F              A  1122    	LDX	R2,_temp_tx_size
00028F 0C 00               A  1123    	LD	R0,#high(_temp_tx_buffer)
000291 1C 2F               A  1124    	LD	R1,#low(_temp_tx_buffer)
000293 0212                A  1125    	ADD	R1,R2
000295 16E000              A  1126    	ADC	R0,#0
000298 96E8E0              A  1127    	LDX	@RR0,R8
                           A  1128    ;  357		temp_tx_size += 1;
                           A  1129    .line 357
00029B 0901003F            A  1130    	ADDX	_temp_tx_size,#1
                           A  1131    ;  358	}
                           A  1132    .line 358
00029F D6 0000             A  1133    	CALL	__b_framereset
0002A2 AF                  A  1134    	RET	
                           A  1135    .endfunc "queueByte",358,"_queueByte"
                           A  1136    	SEGMENT ROM_DATA
                           A  1137    
                           A  1138    
                           A  1139    ;**************************** _queueChecksum **
                           A  1140    ;Name                         Addr/Register   S
                           A  1141    ;_temp_tx_buffer                     STATIC    
                           A  1142    ;_temp_tx_size                       STATIC    
                           A  1143    ;checksum                                R2    
                           A  1144    ;i                                      RR0    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  23


PC     Object              I  Line    Source main.src
                           A  1145    
                           A  1146    
                           A  1147    ; Aggregate Stack Size: 0 (words)
                           A  1148    
                           A  1149    
                           A  1150    	.FRAME _n_queueChecksum,?_n_queueChecksum,R
                           A  1151    	.FCALL _n_queueByte
                           A  1152    	.FRAME _f_queueChecksum,?_f_queueChecksum,E
                           A  1153    	.FCALL _f_queueByte
                           A  1154    	SEGMENT main_TEXT
0002A3                     A  1155    _queueChecksum:
                           A  1156    .define "_queueChecksum"
                           A  1157    .value _queueChecksum
                           A  1158    .class 2
                           A  1159    .type 65
                           A  1160    .type 0
                           A  1161    .endef
                           A  1162    .begfunc "queueChecksum",360,"_queueChecksum"
                           A  1163    ;  359	
                           A  1164    ;  360	void queueChecksum(void) {
                           A  1165    .define "i"
                           A  1166    .class 4
                           A  1167    .reg 17
                           A  1168    .type 3
                           A  1169    .type 0
                           A  1170    .endef
                           A  1171    .define "checksum"
                           A  1172    .class 4
                           A  1173    .reg 3
                           A  1174    .type 12
                           A  1175    .type 0
                           A  1176    .endef
0002A3 D6 0000             A  1177    	CALL	__b_frameset00
                           A  1178    ;  361		int i;
                           A  1179    ;  362		unsigned char checksum = 0xFF;
                           A  1180    .line 362
0002A6 2CFF                A  1181    	LD	R2,#255
0002A8 8B 0D               A  1182    	JR	_7_L_66
                           A  1183    ;  363		
                           A  1184    ;  364		//Calculate a checksum for all the 
                           A  1185    ;  365		for(i = 0; i < temp_tx_size;i++) {
0002AA                     A  1186    _7_L_67:
                           A  1187    .line 365
0002AA 84303F              A  1188    	LDX	R3,_temp_tx_size
0002AD A213                A  1189    	CP	R1,R3
0002AF 1FA6E000            A  1190    	CPC	R0,#-0
0002B3 1B 08               A  1191    	JR	LT,_7_L_69
0002B5 8B 17               A  1192    	JR	_7_L_70
0002B7                     A  1193    _7_L_66:
0002B7 B0E0                A  1194    	CLR	R0
0002B9 B0E1                A  1195    	CLR	R1
0002BB 8B ED               A  1196    	JR	_7_L_67
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  24


PC     Object              I  Line    Source main.src
0002BD                     A  1197    _7_L_69:
                           A  1198    ;  366			checksum -= temp_tx_buffer[i];
                           A  1199    .line 366
0002BD 4C 00               A  1200    	LD	R4,#high(_temp_tx_buffer)
0002BF 5C 2F               A  1201    	LD	R5,#low(_temp_tx_buffer)
0002C1 0251                A  1202    	ADD	R5,R1
0002C3 1240                A  1203    	ADC	R4,R0
0002C5 86E4E3              A  1204    	LDX	R3,@RR4
0002C8 2223                A  1205    	SUB	R2,R3
                           A  1206    .line 365
0002CA A0E0                A  1207    	INCW	RR0
                           A  1208    ;  367		}
                           A  1209    .line 367
0002CC 8B DC               A  1210    	JR	_7_L_67
0002CE                     A  1211    _7_L_70:
                           A  1212    ;  368		
                           A  1213    ;  369		//Add the checksum to the queue.
                           A  1214    ;  370		queueByte(checksum);
                           A  1215    .line 370
0002CE E4E2E8              A  1216    	LD	R8,R2
0002D1 D6 0289             A  1217    	CALL	_queueByte
                           A  1218    ;  371	}
                           A  1219    .line 371
0002D4 D6 0000             A  1220    	CALL	__b_framereset
0002D7 AF                  A  1221    	RET	
                           A  1222    .endfunc "queueChecksum",371,"_queueChecksum"
                           A  1223    	SEGMENT ROM_DATA
                           A  1224    
                           A  1225    
                           A  1226    ;**************************** _loadAmmo *******
                           A  1227    ;Name                         Addr/Register   S
                           A  1228    ;_ir_loaded_tags                     STATIC    
                           A  1229    ;howMuch                                 R8    
                           A  1230    
                           A  1231    
                           A  1232    ; Aggregate Stack Size: 0 (words)
                           A  1233    
                           A  1234    
                           A  1235    	.FRAME _n_loadAmmo,?_n_loadAmmo,RDATA
                           A  1236    	.FRAME _f_loadAmmo,?_f_loadAmmo,EDATA
                           A  1237    	SEGMENT main_TEXT
0002D8                     A  1238    _loadAmmo:
                           A  1239    .define "_loadAmmo"
                           A  1240    .value _loadAmmo
                           A  1241    .class 2
                           A  1242    .type 65
                           A  1243    .type 0
                           A  1244    .endef
                           A  1245    .begfunc "loadAmmo",373,"_loadAmmo"
                           A  1246    .define "howMuch"
                           A  1247    .class 17
                           A  1248    .reg 9
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  25


PC     Object              I  Line    Source main.src
                           A  1249    .type 12
                           A  1250    .type 0
                           A  1251    .endef
0002D8 D6 0000             A  1252    	CALL	__b_frameset00
                           A  1253    ;  372	
                           A  1254    ;  373	void loadAmmo(unsigned char howMuch) {
                           A  1255    ;  374		ir_loaded_tags = howMuch;
                           A  1256    .line 374
0002DB 948029              A  1257    	LDX	_ir_loaded_tags,R8
                           A  1258    ;  375		//INHIBIT should be high to generat
                           A  1259    ;  376		PAOUT |= 0x02;
                           A  1260    .line 376
0002DE 49020FD3            A  1261    	ORX	4051,#2
                           A  1262    ;  377	}
                           A  1263    .line 377
0002E2 D6 0000             A  1264    	CALL	__b_framereset
0002E5 AF                  A  1265    	RET	
                           A  1266    .endfunc "loadAmmo",377,"_loadAmmo"
                           A  1267    	SEGMENT ROM_DATA
                           A  1268    
                           A  1269    
                           A  1270    ;**************************** _rxedResetBarrel 
                           A  1271    ;Name                         Addr/Register   S
                           A  1272    ;_reloadCooldown                     STATIC    
                           A  1273    ;_weAreReloading                     STATIC    
                           A  1274    ;_weAreRegistered                    STATIC    
                           A  1275    ;_sendBarrelReply                    STATIC    
                           A  1276    ;_sendLoadSpecial                    STATIC    
                           A  1277    ;_sendArmSpecial                     STATIC    
                           A  1278    ;_ir_loaded_tags                     STATIC    
                           A  1279    
                           A  1280    
                           A  1281    ; Aggregate Stack Size: 0 (words)
                           A  1282    
                           A  1283    
                           A  1284    	.FRAME _n_rxedResetBarrel,?_n_rxedResetBarr
                           A  1285    	.FRAME _f_rxedResetBarrel,?_f_rxedResetBarr
                           A  1286    	SEGMENT main_TEXT
0002E6                     A  1287    _rxedResetBarrel:
                           A  1288    .define "_rxedResetBarrel"
                           A  1289    .value _rxedResetBarrel
                           A  1290    .class 2
                           A  1291    .type 65
                           A  1292    .type 0
                           A  1293    .endef
                           A  1294    .begfunc "rxedResetBarrel",379,"_rxedResetBarre
0002E6 D6 0000             A  1295    	CALL	__b_frameset00
                           A  1296    ;  378	
                           A  1297    ;  379	void rxedResetBarrel(void) {
                           A  1298    ;  380		//This will reset any variables use
                           A  1299    ;  381		
                           A  1300    ;  382		ir_loaded_tags = 0;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  26


PC     Object              I  Line    Source main.src
                           A  1301    .line 382
0002E9 E9000029            A  1302    	LDX	_ir_loaded_tags,#-0
                           A  1303    ;  383		
                           A  1304    ;  384		sendArmSpecial = 0;
                           A  1305    .line 384
0002ED E9000042            A  1306    	LDX	_sendArmSpecial,#-0
                           A  1307    ;  385		sendLoadSpecial = 0;
                           A  1308    .line 385
0002F1 E9000041            A  1309    	LDX	_sendLoadSpecial,#-0
                           A  1310    ;  386		sendBarrelReply = 0;
                           A  1311    .line 386
0002F5 E9000040            A  1312    	LDX	_sendBarrelReply,#-0
                           A  1313    ;  387		
                           A  1314    ;  388		weAreRegistered = 0;
                           A  1315    .line 388
0002F9 E9000043            A  1316    	LDX	_weAreRegistered,#-0
                           A  1317    ;  389		weAreReloading = 0;
                           A  1318    .line 389
0002FD E9000044            A  1319    	LDX	_weAreReloading,#-0
                           A  1320    ;  390		
                           A  1321    ;  391		reloadCooldown = 800;
                           A  1322    .line 391
000301 E9030045            A  1323    	LDX	_reloadCooldown,#3
000305 E9200046            A  1324    	LDX	_reloadCooldown+1,#32
                           A  1325    ;  392		
                           A  1326    ;  393		PAOUT &= 0xFD;
                           A  1327    .line 393
000309 59FD0FD3            A  1328    	ANDX	4051,#253
                           A  1329    ;  394	}
                           A  1330    .line 394
00030D D6 0000             A  1331    	CALL	__b_framereset
000310 AF                  A  1332    	RET	
                           A  1333    .endfunc "rxedResetBarrel",394,"_rxedResetBarre
                           A  1334    	SEGMENT ROM_DATA
                           A  1335    
                           A  1336    
                           A  1337    ;**************************** _rxedRollCall ***
                           A  1338    ;Name                         Addr/Register   S
                           A  1339    ;_sendBarrelReply                    STATIC    
                           A  1340    
                           A  1341    
                           A  1342    ; Aggregate Stack Size: 0 (words)
                           A  1343    
                           A  1344    
                           A  1345    	.FRAME _n_rxedRollCall,?_n_rxedRollCall,RDA
                           A  1346    	.FRAME _f_rxedRollCall,?_f_rxedRollCall,EDA
                           A  1347    	SEGMENT main_TEXT
000311                     A  1348    _rxedRollCall:
                           A  1349    .define "_rxedRollCall"
                           A  1350    .value _rxedRollCall
                           A  1351    .class 2
                           A  1352    .type 65
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  27


PC     Object              I  Line    Source main.src
                           A  1353    .type 0
                           A  1354    .endef
                           A  1355    .begfunc "rxedRollCall",396,"_rxedRollCall"
000311 D6 0000             A  1356    	CALL	__b_frameset00
                           A  1357    ;  395	
                           A  1358    ;  396	void rxedRollCall(void) {
                           A  1359    ;  397		/*	Format:		BType		$00
                           A  1360    ;  398						BData0		Blaster
                           A  1361    ;  399						BSum		$cs
                           A  1362    ;  400		*/
                           A  1363    ;  401		//We don't actually care about anyt
                           A  1364    ;  402		//Set a flag that will be seen by s
                           A  1365    ;  403		sendBarrelReply = 1;
                           A  1366    .line 403
000314 E9010040            A  1367    	LDX	_sendBarrelReply,#1
                           A  1368    ;  404	}
                           A  1369    .line 404
000318 D6 0000             A  1370    	CALL	__b_framereset
00031B AF                  A  1371    	RET	
                           A  1372    .endfunc "rxedRollCall",404,"_rxedRollCall"
                           A  1373    	SEGMENT ROM_DATA
                           A  1374    
                           A  1375    
                           A  1376    ;**************************** _rxedBarrelSeen *
                           A  1377    ;Name                         Addr/Register   S
                           A  1378    ;_weAreRegistered                    STATIC    
                           A  1379    
                           A  1380    
                           A  1381    ; Aggregate Stack Size: 0 (words)
                           A  1382    
                           A  1383    
                           A  1384    	.FRAME _n_rxedBarrelSeen,?_n_rxedBarrelSeen
                           A  1385    	.FCALL _n_rxedResetBarrel
                           A  1386    	.FRAME _f_rxedBarrelSeen,?_f_rxedBarrelSeen
                           A  1387    	.FCALL _f_rxedResetBarrel
                           A  1388    	SEGMENT main_TEXT
00031C                     A  1389    _rxedBarrelSeen:
                           A  1390    .define "_rxedBarrelSeen"
                           A  1391    .value _rxedBarrelSeen
                           A  1392    .class 2
                           A  1393    .type 65
                           A  1394    .type 0
                           A  1395    .endef
                           A  1396    .begfunc "rxedBarrelSeen",406,"_rxedBarrelSeen"
00031C D6 0000             A  1397    	CALL	__b_frameset00
                           A  1398    ;  405	
                           A  1399    ;  406	void rxedBarrelSeen(void) {
                           A  1400    ;  407		/*	Format:		BType		$40
                           A  1401    ;  408						BSum		$cs
                           A  1402    ;  409		*/
                           A  1403    ;  410		//No data, no cares! This does mean
                           A  1404    ;  411		rxedResetBarrel();
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  28


PC     Object              I  Line    Source main.src
                           A  1405    .line 411
00031F D6 02E6             A  1406    	CALL	_rxedResetBarrel
                           A  1407    ;  412		weAreRegistered = 1;
                           A  1408    .line 412
000322 E9010043            A  1409    	LDX	_weAreRegistered,#1
                           A  1410    ;  413	}
                           A  1411    .line 413
000326 D6 0000             A  1412    	CALL	__b_framereset
000329 AF                  A  1413    	RET	
                           A  1414    .endfunc "rxedBarrelSeen",413,"_rxedBarrelSeen"
                           A  1415    	SEGMENT ROM_DATA
                           A  1416    
                           A  1417    
                           A  1418    ;**************************** _rxedBarrelAck **
                           A  1419    ;Name                         Addr/Register   S
                           A  1420    ;_reloadCooldown                     STATIC    
                           A  1421    ;_sendArmSpecial                     STATIC    
                           A  1422    ;_weAreReloading                     STATIC    
                           A  1423    
                           A  1424    
                           A  1425    ; Aggregate Stack Size: 0 (words)
                           A  1426    
                           A  1427    
                           A  1428    	.FRAME _n_rxedBarrelAck,?_n_rxedBarrelAck,R
                           A  1429    	.FCALL _n_loadAmmo
                           A  1430    	.FRAME _f_rxedBarrelAck,?_f_rxedBarrelAck,E
                           A  1431    	.FCALL _f_loadAmmo
                           A  1432    	SEGMENT main_TEXT
00032A                     A  1433    _rxedBarrelAck:
                           A  1434    .define "_rxedBarrelAck"
                           A  1435    .value _rxedBarrelAck
                           A  1436    .class 2
                           A  1437    .type 65
                           A  1438    .type 0
                           A  1439    .endef
                           A  1440    .begfunc "rxedBarrelAck",415,"_rxedBarrelAck"
00032A D6 0000             A  1441    	CALL	__b_frameset00
                           A  1442    ;  414	
                           A  1443    ;  415	void rxedBarrelAck(void) {
                           A  1444    ;  416		/*	Format:		BType		$41
                           A  1445    ;  417						BSum		$cs
                           A  1446    ;  418		*/
                           A  1447    ;  419		//This one we actually care about, 
                           A  1448    ;  420		if(weAreReloading == 1) {
                           A  1449    .line 420
00032D A9010044            A  1450    	CPX	_weAreReloading,#1
000331 EB 06               A  1451    	JR	NE,_12_L_78
                           A  1452    ;  421			//Because we still need to actu
                           A  1453    ;  422			//Flag that we need to send thi
                           A  1454    ;  423			sendArmSpecial = 1;
                           A  1455    .line 423
000333 E9010042            A  1456    	LDX	_sendArmSpecial,#1
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  29


PC     Object              I  Line    Source main.src
                           A  1457    ;  424		} else if(weAreReloading == 2) {
                           A  1458    .line 424
000337 8B 17               A  1459    	JR	_12_L_79
000339                     A  1460    _12_L_78:
000339 A9020044            A  1461    	CPX	_weAreReloading,#2
00033D EB 11               A  1462    	JR	NE,_12_L_79
                           A  1463    ;  425			weAreReloading = 0;
                           A  1464    .line 425
00033F E9000044            A  1465    	LDX	_weAreReloading,#-0
                           A  1466    ;  426			//We're now in control of sendi
                           A  1467    ;  427			loadAmmo(AMMO);
                           A  1468    .line 427
000343 8C0F                A  1469    	LD	R8,#15
000345 D6 02D8             A  1470    	CALL	_loadAmmo
                           A  1471    ;  428			//Slow down reloading a bit...
                           A  1472    ;  429			reloadCooldown = 800;
                           A  1473    .line 429
000348 E9030045            A  1474    	LDX	_reloadCooldown,#3
00034C E9200046            A  1475    	LDX	_reloadCooldown+1,#32
                           A  1476    ;  430		}
                           A  1477    ;  431	}
000350                     A  1478    _12_L_79:
                           A  1479    .line 431
000350 D6 0000             A  1480    	CALL	__b_framereset
000353 AF                  A  1481    	RET	
                           A  1482    .endfunc "rxedBarrelAck",431,"_rxedBarrelAck"
                           A  1483    	SEGMENT ROM_DATA
                           A  1484    
                           A  1485    
                           A  1486    ;**************************** _BarrelReply ****
                           A  1487    ;Name                         Addr/Register   S
                           A  1488    
                           A  1489    
                           A  1490    ; Aggregate Stack Size: 0 (words)
                           A  1491    
                           A  1492    
                           A  1493    	.FRAME _n_BarrelReply,?_n_BarrelReply,RDATA
                           A  1494    	.FCALL _n_queueByte
                           A  1495    	.FCALL _n_queueChecksum
                           A  1496    	.FCALL _n_sendQueue
                           A  1497    	.FRAME _f_BarrelReply,?_f_BarrelReply,EDATA
                           A  1498    	.FCALL _f_queueByte
                           A  1499    	.FCALL _f_queueChecksum
                           A  1500    	.FCALL _f_sendQueue
                           A  1501    	SEGMENT main_TEXT
000354                     A  1502    _BarrelReply:
                           A  1503    .define "_BarrelReply"
                           A  1504    .value _BarrelReply
                           A  1505    .class 2
                           A  1506    .type 65
                           A  1507    .type 0
                           A  1508    .endef
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  30


PC     Object              I  Line    Source main.src
                           A  1509    .begfunc "BarrelReply",433,"_BarrelReply"
000354 D6 0000             A  1510    	CALL	__b_frameset00
                           A  1511    ;  432	
                           A  1512    ;  433	void BarrelReply(void) {
                           A  1513    ;  434		/*	BARREL-REPLY
                           A  1514    ;  435			Format:		BType		$40
                           A  1515    ;  436						BData0		Barrel 
                           A  1516    ;  437						BSum		$cs
                           A  1517    ;  438			Barrels send this block in resp
                           A  1518    ;  439			BData0 should be 0x01 for a sho
                           A  1519    ;  440			Other values are undefined, but
                           A  1520    ;  441		*/
                           A  1521    ;  442		
                           A  1522    ;  443		//BType
                           A  1523    ;  444		queueByte(0x40);
                           A  1524    .line 444
000357 8C40                A  1525    	LD	R8,#64
000359 D6 0289             A  1526    	CALL	_queueByte
                           A  1527    ;  445		//BData0
                           A  1528    ;  446		queueByte(BARRELTYPE);
                           A  1529    .line 446
00035C 8C02                A  1530    	LD	R8,#2
00035E D6 0289             A  1531    	CALL	_queueByte
                           A  1532    ;  447		//BSum
                           A  1533    ;  448		queueChecksum();
                           A  1534    .line 448
000361 D6 02A3             A  1535    	CALL	_queueChecksum
                           A  1536    ;  449		
                           A  1537    ;  450		//Send it!
                           A  1538    ;  451		sendQueue();
                           A  1539    .line 451
000364 D6 0247             A  1540    	CALL	_sendQueue
                           A  1541    ;  452	}
                           A  1542    .line 452
000367 D6 0000             A  1543    	CALL	__b_framereset
00036A AF                  A  1544    	RET	
                           A  1545    .endfunc "BarrelReply",452,"_BarrelReply"
                           A  1546    	SEGMENT ROM_DATA
                           A  1547    
                           A  1548    
                           A  1549    ;**************************** _LoadSpecial ****
                           A  1550    ;Name                         Addr/Register   S
                           A  1551    ;_weAreReloading                     STATIC    
                           A  1552    
                           A  1553    
                           A  1554    ; Aggregate Stack Size: 0 (words)
                           A  1555    
                           A  1556    
                           A  1557    	.FRAME _n_LoadSpecial,?_n_LoadSpecial,RDATA
                           A  1558    	.FCALL _n_queueByte
                           A  1559    	.FCALL _n_queueChecksum
                           A  1560    	.FCALL _n_sendQueue
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  31


PC     Object              I  Line    Source main.src
                           A  1561    	.FRAME _f_LoadSpecial,?_f_LoadSpecial,EDATA
                           A  1562    	.FCALL _f_queueByte
                           A  1563    	.FCALL _f_queueChecksum
                           A  1564    	.FCALL _f_sendQueue
                           A  1565    	SEGMENT main_TEXT
00036B                     A  1566    _LoadSpecial:
                           A  1567    .define "_LoadSpecial"
                           A  1568    .value _LoadSpecial
                           A  1569    .class 2
                           A  1570    .type 65
                           A  1571    .type 0
                           A  1572    .endef
                           A  1573    .begfunc "LoadSpecial",454,"_LoadSpecial"
00036B D6 0000             A  1574    	CALL	__b_frameset00
                           A  1575    ;  453	
                           A  1576    ;  454	void LoadSpecial(void) {
                           A  1577    ;  455		/*	LOAD-SPECIAL
                           A  1578    ;  456			Format:		BType		$41
                           A  1579    ;  457						BData0		Ammo Ne
                           A  1580    ;  458						BData1		DoubleT
                           A  1581    ;  459						BData2		LoadSFX
                           A  1582    ;  460						BData3		FireSFX
                           A  1583    ;  461						BData4		Display
                           A  1584    ;  462						BSum		$cs
                           A  1585    ;  463			Unloads any ready ammo and load
                           A  1586    ;  464			Ammo Needed is how much ammo wi
                           A  1587    ;  465			DoubleTaps is (UNKNOWN).
                           A  1588    ;  466			LoadSFX is what sound effect wi
                           A  1589    ;  467			FireSFX is what sound effect wi
                           A  1590    ;  468				special ammo is loaded/arme
                           A  1591    ;  469			DisplayMode is what will be sho
                           A  1592    ;  470		*/
                           A  1593    ;  471		
                           A  1594    ;  472		//BType
                           A  1595    ;  473		queueByte(0x41);
                           A  1596    .line 473
00036E 8C41                A  1597    	LD	R8,#65
000370 D6 0289             A  1598    	CALL	_queueByte
                           A  1599    ;  474		//BData0
                           A  1600    ;  475		queueByte(AMMONEEDED);
                           A  1601    .line 475
000373 8C0F                A  1602    	LD	R8,#15
000375 D6 0289             A  1603    	CALL	_queueByte
                           A  1604    ;  476		//BData1
                           A  1605    ;  477		queueByte(DOUBLETAPS);
                           A  1606    .line 477
000378 B0E8                A  1607    	CLR	R8
00037A D6 0289             A  1608    	CALL	_queueByte
                           A  1609    ;  478		//BData2
                           A  1610    ;  479		queueByte(LOADSFX);
                           A  1611    .line 479
00037D 8C0E                A  1612    	LD	R8,#14
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  32


PC     Object              I  Line    Source main.src
00037F D6 0289             A  1613    	CALL	_queueByte
                           A  1614    ;  480		//BData3
                           A  1615    ;  481		queueByte(FIRESFX);
                           A  1616    .line 481
000382 8C0B                A  1617    	LD	R8,#11
000384 D6 0289             A  1618    	CALL	_queueByte
                           A  1619    ;  482		//BData4
                           A  1620    ;  483		queueByte(DISPLAYMODE);
                           A  1621    .line 483
000387 B0E8                A  1622    	CLR	R8
000389 D6 0289             A  1623    	CALL	_queueByte
                           A  1624    ;  484		//BSum
                           A  1625    ;  485		queueChecksum();
                           A  1626    .line 485
00038C D6 02A3             A  1627    	CALL	_queueChecksum
                           A  1628    ;  486		
                           A  1629    ;  487		//We also need to mark that we're t
                           A  1630    ;  488		weAreReloading = 1;
                           A  1631    .line 488
00038F E9010044            A  1632    	LDX	_weAreReloading,#1
                           A  1633    ;  489		
                           A  1634    ;  490		//Send it!
                           A  1635    ;  491		sendQueue();
                           A  1636    .line 491
000393 D6 0247             A  1637    	CALL	_sendQueue
                           A  1638    ;  492	}
                           A  1639    .line 492
000396 D6 0000             A  1640    	CALL	__b_framereset
000399 AF                  A  1641    	RET	
                           A  1642    .endfunc "LoadSpecial",492,"_LoadSpecial"
                           A  1643    	SEGMENT ROM_DATA
                           A  1644    
                           A  1645    
                           A  1646    ;**************************** _ArmSpecial *****
                           A  1647    ;Name                         Addr/Register   S
                           A  1648    ;_weAreReloading                     STATIC    
                           A  1649    
                           A  1650    
                           A  1651    ; Aggregate Stack Size: 0 (words)
                           A  1652    
                           A  1653    
                           A  1654    	.FRAME _n_ArmSpecial,?_n_ArmSpecial,RDATA
                           A  1655    	.FCALL _n_queueByte
                           A  1656    	.FCALL _n_queueChecksum
                           A  1657    	.FCALL _n_sendQueue
                           A  1658    	.FRAME _f_ArmSpecial,?_f_ArmSpecial,EDATA
                           A  1659    	.FCALL _f_queueByte
                           A  1660    	.FCALL _f_queueChecksum
                           A  1661    	.FCALL _f_sendQueue
                           A  1662    	SEGMENT main_TEXT
00039A                     A  1663    _ArmSpecial:
                           A  1664    .define "_ArmSpecial"
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  33


PC     Object              I  Line    Source main.src
                           A  1665    .value _ArmSpecial
                           A  1666    .class 2
                           A  1667    .type 65
                           A  1668    .type 0
                           A  1669    .endef
                           A  1670    .begfunc "ArmSpecial",494,"_ArmSpecial"
00039A D6 0000             A  1671    	CALL	__b_frameset00
                           A  1672    ;  493	
                           A  1673    ;  494	void ArmSpecial(void) {
                           A  1674    ;  495		/*	ARM-SPECIAL
                           A  1675    ;  496			Format:		BType		$42
                           A  1676    ;  497						BData0	BurstSize (
                           A  1677    ;  498						BData1	Ammo (1-15)
                           A  1678    ;  499						BData2	TrigRate (1
                           A  1679    ;  500						BSum		$cs
                           A  1680    ;  501			BurstSize is in the range 1 to 
                           A  1681    ;  502			Ammo is the amount of ready amm
                           A  1682    ;  503			TrigRate is the number of milli
                           A  1683    ;  504		*/
                           A  1684    ;  505		
                           A  1685    ;  506		//BType
                           A  1686    ;  507		queueByte(0x42);
                           A  1687    .line 507
00039D 8C42                A  1688    	LD	R8,#66
00039F D6 0289             A  1689    	CALL	_queueByte
                           A  1690    ;  508		//BData0
                           A  1691    ;  509		queueByte(BURSTSIZE);
                           A  1692    .line 509
0003A2 8C0F                A  1693    	LD	R8,#15
0003A4 D6 0289             A  1694    	CALL	_queueByte
                           A  1695    ;  510		//BData1
                           A  1696    ;  511		queueByte(AMMO);
                           A  1697    .line 511
0003A7 8C0F                A  1698    	LD	R8,#15
0003A9 D6 0289             A  1699    	CALL	_queueByte
                           A  1700    ;  512		//BData2
                           A  1701    ;  513		queueByte(TRIGRATE);
                           A  1702    .line 513
0003AC 8C10                A  1703    	LD	R8,#16
0003AE D6 0289             A  1704    	CALL	_queueByte
                           A  1705    ;  514		//BSum
                           A  1706    ;  515		queueChecksum();
                           A  1707    .line 515
0003B1 D6 02A3             A  1708    	CALL	_queueChecksum
                           A  1709    ;  516		
                           A  1710    ;  517		//Send it!
                           A  1711    ;  518		sendQueue();
                           A  1712    .line 518
0003B4 D6 0247             A  1713    	CALL	_sendQueue
                           A  1714    ;  519		
                           A  1715    ;  520		//We're expecting another ACK from 
                           A  1716    ;  521		weAreReloading = 2;
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  34


PC     Object              I  Line    Source main.src
                           A  1717    .line 521
0003B7 E9020044            A  1718    	LDX	_weAreReloading,#2
                           A  1719    ;  522	}
                           A  1720    .line 522
0003BB D6 0000             A  1721    	CALL	__b_framereset
0003BE AF                  A  1722    	RET	
                           A  1723    .endfunc "ArmSpecial",522,"_ArmSpecial"
                           A  1724    	SEGMENT ROM_DATA
                           A  1725    
                           A  1726    
                           A  1727    ;**************************** _sendSomething **
                           A  1728    ;Name                         Addr/Register   S
                           A  1729    ;_ir_loaded_tags                     STATIC    
                           A  1730    ;_reloadCooldown                     STATIC    
                           A  1731    ;_weAreReloading                     STATIC    
                           A  1732    ;_sendLoadSpecial                    STATIC    
                           A  1733    ;_sendArmSpecial                     STATIC    
                           A  1734    ;_sendBarrelReply                    STATIC    
                           A  1735    ;_ser_tx_cooldown                    STATIC    
                           A  1736    ;_ser_tx_size                        STATIC    
                           A  1737    
                           A  1738    
                           A  1739    ; Aggregate Stack Size: 0 (words)
                           A  1740    
                           A  1741    
                           A  1742    	.FRAME _n_sendSomething,?_n_sendSomething,R
                           A  1743    	.FCALL _n_BarrelReply
                           A  1744    	.FCALL _n_ArmSpecial
                           A  1745    	.FCALL _n_LoadSpecial
                           A  1746    	.FRAME _f_sendSomething,?_f_sendSomething,E
                           A  1747    	.FCALL _f_BarrelReply
                           A  1748    	.FCALL _f_ArmSpecial
                           A  1749    	.FCALL _f_LoadSpecial
                           A  1750    	SEGMENT main_TEXT
0003BF                     A  1751    _sendSomething:
                           A  1752    .define "_sendSomething"
                           A  1753    .value _sendSomething
                           A  1754    .class 2
                           A  1755    .type 65
                           A  1756    .type 0
                           A  1757    .endef
                           A  1758    .begfunc "sendSomething",524,"_sendSomething"
0003BF D6 0000             A  1759    	CALL	__b_frameset00
                           A  1760    ;  523	
                           A  1761    ;  524	void sendSomething(void) {
                           A  1762    ;  525		if(!ser_tx_size && !ser_tx_cooldown
                           A  1763    .line 525
0003C2 A9000024            A  1764    	CPX	_ser_tx_size,#-0
0003C6 EB 47               A  1765    	JR	NE,_16_L_99
0003C8 A9000025            A  1766    	CPX	_ser_tx_cooldown,#-0
0003CC EB 41               A  1767    	JR	NE,_16_L_99
                           A  1768    ;  526			if(sendBarrelReply) { //If we n
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  35


PC     Object              I  Line    Source main.src
                           A  1769    .line 526
0003CE A9000040            A  1770    	CPX	_sendBarrelReply,#-0
0003D2 6B 09               A  1771    	JR	Z,_16_L_86
                           A  1772    ;  527				sendBarrelReply = 0; //Clea
                           A  1773    .line 527
0003D4 E9000040            A  1774    	LDX	_sendBarrelReply,#-0
                           A  1775    ;  528				BarrelReply(); //Send a Bar
                           A  1776    .line 528
0003D8 D6 0354             A  1777    	CALL	_BarrelReply
                           A  1778    ;  529				return;
                           A  1779    .line 529
0003DB 8B 32               A  1780    	JR	_16_L_99
                           A  1781    ;  530			}
0003DD                     A  1782    _16_L_86:
                           A  1783    .line 530
                           A  1784    ;  531			if(sendArmSpecial) { //If we're
                           A  1785    .line 531
0003DD A9000042            A  1786    	CPX	_sendArmSpecial,#-0
0003E1 6B 09               A  1787    	JR	Z,_16_L_97
                           A  1788    ;  532				sendArmSpecial = 0; //Clear
                           A  1789    .line 532
0003E3 E9000042            A  1790    	LDX	_sendArmSpecial,#-0
                           A  1791    ;  533				ArmSpecial(); //Send an Arm
                           A  1792    .line 533
0003E7 D6 039A             A  1793    	CALL	_ArmSpecial
                           A  1794    ;  534				return;
                           A  1795    .line 534
0003EA 8B 23               A  1796    	JR	_16_L_99
                           A  1797    ;  535			}
0003EC                     A  1798    _16_L_97:
                           A  1799    .line 535
                           A  1800    ;  536			if(sendLoadSpecial) { //If the 
                           A  1801    .line 536
0003EC A9000041            A  1802    	CPX	_sendLoadSpecial,#-0
0003F0 6B 1D               A  1803    	JR	Z,_16_L_99
                           A  1804    ;  537				sendLoadSpecial = 0; //Clea
                           A  1805    .line 537
0003F2 E9000041            A  1806    	LDX	_sendLoadSpecial,#-0
                           A  1807    ;  538				if(RELOADMIDCLIP) { //If we
                           A  1808    ;  539					if(!weAreReloading && !
                           A  1809    .line 539
0003F6 A9000044            A  1810    	CPX	_weAreReloading,#-0
0003FA EB 13               A  1811    	JR	NE,_16_L_95
0003FC 840045              A  1812    	LDX	R0,_reloadCooldown
0003FF 841046              A  1813    	LDX	R1,_reloadCooldown+1
000402 4201                A  1814    	OR	R0,R1
000404 EB 09               A  1815    	JR	NE,_16_L_95
                           A  1816    ;  540						if(ir_loaded_tags !
                           A  1817    .line 540
000406 A90F0029            A  1818    	CPX	_ir_loaded_tags,#15
00040A 6B 03               A  1819    	JR	Z,_16_L_95
                           A  1820    ;  541							LoadSpecial(); 
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  36


PC     Object              I  Line    Source main.src
                           A  1821    .line 541
00040C D6 036B             A  1822    	CALL	_LoadSpecial
                           A  1823    ;  542						}
                           A  1824    ;  543					}
                           A  1825    ;  544				} else { //If we can't relo
                           A  1826    ;  545					if(!weAreReloading && !
                           A  1827    ;  546						LoadSpecial(); //St
                           A  1828    ;  547					}
                           A  1829    ;  548				}
00040F                     A  1830    _16_L_95:
                           A  1831    .line 548
                           A  1832    ;  549				return;
                           A  1833    ;  550			}
                           A  1834    ;  551		}
                           A  1835    ;  552	}
00040F                     A  1836    _16_L_99:
                           A  1837    .line 552
00040F D6 0000             A  1838    	CALL	__b_framereset
000412 AF                  A  1839    	RET	
                           A  1840    .endfunc "sendSomething",552,"_sendSomething"
                           A  1841    	SEGMENT ROM_DATA
                           A  1842    ;	Jump Table for Switch Statement at line 558
000000                     A  1843    L__72:
000000 000B                A  1844    	DW	11
000002 0000                A  1845    	DW	0
000004 042A                A  1846    	DW	_17_L_100
000006 001E                A  1847    	DW	30
000008 042F                A  1848    	DW	_17_L_101
00000A 001F                A  1849    	DW	31
00000C 042F                A  1850    	DW	_17_L_102
00000E 0020                A  1851    	DW	32
000010 042F                A  1852    	DW	_17_L_103
000012 0040                A  1853    	DW	64
000014 0434                A  1854    	DW	_17_L_109
000016 0041                A  1855    	DW	65
000018 0439                A  1856    	DW	_17_L_110
00001A 005F                A  1857    	DW	95
00001C 042F                A  1858    	DW	_17_L_104
00001E 0060                A  1859    	DW	96
000020 042F                A  1860    	DW	_17_L_105
000022 0080                A  1861    	DW	128
000024 042F                A  1862    	DW	_17_L_106
000026 00A0                A  1863    	DW	160
000028 042F                A  1864    	DW	_17_L_107
00002A 00C0                A  1865    	DW	192
00002C 042F                A  1866    	DW	_17_L_108
00002E 043C                A  1867    	DW	_17_L_112
                           A  1868    
                           A  1869    
                           A  1870    ;**************************** _receiveSomething
                           A  1871    ;Name                         Addr/Register   S
                           A  1872    ;_captureBuffer                      STATIC    
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  37


PC     Object              I  Line    Source main.src
                           A  1873    
                           A  1874    
                           A  1875    ; Aggregate Stack Size: 0 (words)
                           A  1876    
                           A  1877    
                           A  1878    	.FRAME _n_receiveSomething,?_n_receiveSomet
                           A  1879    	.FCALL _n_rxedRollCall
                           A  1880    	.FCALL _n_rxedResetBarrel
                           A  1881    	.FCALL _n_rxedBarrelSeen
                           A  1882    	.FCALL _n_rxedBarrelAck
                           A  1883    	.FRAME _f_receiveSomething,?_f_receiveSomet
                           A  1884    	.FCALL _f_rxedRollCall
                           A  1885    	.FCALL _f_rxedResetBarrel
                           A  1886    	.FCALL _f_rxedBarrelSeen
                           A  1887    	.FCALL _f_rxedBarrelAck
                           A  1888    	SEGMENT main_TEXT
000413                     A  1889    _receiveSomething:
                           A  1890    .define "_receiveSomething"
                           A  1891    .value _receiveSomething
                           A  1892    .class 2
                           A  1893    .type 65
                           A  1894    .type 0
                           A  1895    .endef
                           A  1896    .begfunc "receiveSomething",554,"_receiveSometh
000413 D6 0000             A  1897    	CALL	__b_frameset00
                           A  1898    ;  553	
                           A  1899    ;  554	void receiveSomething(void) {
                           A  1900    ;  555		if(captureBuffer.size & 0x80) { //T
                           A  1901    .line 555
000416 79800011            A  1902    	TMX	_captureBuffer+17,#128
00041A 6B 24               A  1903    	JR	Z,_17_L_114
                           A  1904    ;  556			
                           A  1905    ;  557			//Figure out what type it is an
                           A  1906    ;  558			switch(captureBuffer.buffer[0])
                           A  1907    .line 558
00041C 841001              A  1908    	LDX	R1,_captureBuffer+1
00041F B0E0                A  1909    	CLR	R0
000421 2C 00               A  1910    	LD	R2,#high(L__72)
000423 3C 00               A  1911    	LD	R3,#low(L__72)
000425 D6 0000             A  1912    	CALL	__b_ucase
000428 C4E0                A  1913    	JP	@RR0
                           A  1914    ;  559				case 0x00:
00042A                     A  1915    _17_L_100:
                           A  1916    .line 559
                           A  1917    ;  560					//ROLL-CALL
                           A  1918    ;  561					rxedRollCall();
                           A  1919    .line 561
00042A D6 0311             A  1920    	CALL	_rxedRollCall
                           A  1921    ;  562					break;
                           A  1922    .line 562
00042D 8B 0D               A  1923    	JR	_17_L_112
                           A  1924    ;  563				case 0x1E: //NO-ACCY
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  38


PC     Object              I  Line    Source main.src
00042F                     A  1925    _17_L_101:
                           A  1926    .line 563
                           A  1927    ;  564				case 0x1F: //RESET-ALL
00042F                     A  1928    _17_L_102:
                           A  1929    .line 564
                           A  1930    ;  565				case 0x20: //ROLL-REPLY		00042F                     A  1931    _17_L_103:
                           A  1932    .line 565
                           A  1933    ;  566				case 0x5F: //RESET-BARREL
00042F                     A  1934    _17_L_104:
                           A  1935    .line 566
                           A  1936    ;  567				case 0x60: //POWERUP-REPLY
00042F                     A  1937    _17_L_105:
                           A  1938    .line 567
                           A  1939    ;  568				case 0x80: //RADAR-REPLY
00042F                     A  1940    _17_L_106:
                           A  1941    .line 568
                           A  1942    ;  569				case 0xA0: //MASTER-REPLY
00042F                     A  1943    _17_L_107:
                           A  1944    .line 569
                           A  1945    ;  570				case 0xC0: //RHOST-REPLY
00042F                     A  1946    _17_L_108:
                           A  1947    .line 570
                           A  1948    ;  571					//Any of these results 
                           A  1949    ;  572					rxedResetBarrel();
                           A  1950    .line 572
00042F D6 02E6             A  1951    	CALL	_rxedResetBarrel
                           A  1952    ;  573					break;
                           A  1953    .line 573
000432 8B 08               A  1954    	JR	_17_L_112
                           A  1955    ;  574				case 0x40:
000434                     A  1956    _17_L_109:
                           A  1957    .line 574
                           A  1958    ;  575					//BARREL-SEEN
                           A  1959    ;  576					rxedBarrelSeen();
                           A  1960    .line 576
000434 D6 031C             A  1961    	CALL	_rxedBarrelSeen
                           A  1962    ;  577					break;
                           A  1963    .line 577
000437 8B 03               A  1964    	JR	_17_L_112
                           A  1965    ;  578				case 0x41:
000439                     A  1966    _17_L_110:
                           A  1967    .line 578
                           A  1968    ;  579					//BARREL-ACK
                           A  1969    ;  580					rxedBarrelAck();
                           A  1970    .line 580
000439 D6 032A             A  1971    	CALL	_rxedBarrelAck
                           A  1972    ;  581					break;
                           A  1973    ;  582				default:
                           A  1974    ;  583					//Nothing we know how t
                           A  1975    ;  584					break;
                           A  1976    ;  585			}
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  39


PC     Object              I  Line    Source main.src
00043C                     A  1977    _17_L_112:
                           A  1978    .line 585
                           A  1979    ;  586			captureBuffer.size = 0;
                           A  1980    .line 586
00043C E9000011            A  1981    	LDX	_captureBuffer+17,#-0
                           A  1982    ;  587		}
                           A  1983    ;  588	}
000440                     A  1984    _17_L_114:
                           A  1985    .line 588
000440 D6 0000             A  1986    	CALL	__b_framereset
000443 AF                  A  1987    	RET	
                           A  1988    .endfunc "receiveSomething",588,"_receiveSometh
                           A  1989    	SEGMENT ROM_DATA
                           A  1990    
                           A  1991    
                           A  1992    ;**************************** _main ***********
                           A  1993    ;Name                         Addr/Register   S
                           A  1994    ;_sendLoadSpecial                    STATIC    
                           A  1995    ;_weAreRegistered                    STATIC    
                           A  1996    ;_btn_pressed                        STATIC    
                           A  1997    ;_captureBuffer                      STATIC    
                           A  1998    
                           A  1999    
                           A  2000    ; Aggregate Stack Size: 0 (words)
                           A  2001    
                           A  2002    
                           A  2003    	.FRAME _n_main,?_n_main,RDATA
                           A  2004    	.FCALL _n_init_cpu
                           A  2005    	.FCALL _n_receiveSomething
                           A  2006    	.FCALL _n_sendSomething
                           A  2007    	.FRAME _f_main,?_f_main,EDATA
                           A  2008    	.FCALL _f_init_cpu
                           A  2009    	.FCALL _f_receiveSomething
                           A  2010    	.FCALL _f_sendSomething
                           A  2011    	SEGMENT main_TEXT
000444                     A  2012    _main:
                           A  2013    .define "_main"
                           A  2014    .value _main
                           A  2015    .class 2
                           A  2016    .type 65
                           A  2017    .type 0
                           A  2018    .endef
                           A  2019    .begfunc "main",590,"_main"
000444 D6 0000             A  2020    	CALL	__b_frameset00
                           A  2021    ;  589	
                           A  2022    ;  590	void main(void) {
                           A  2023    ;  591		unsigned char i;
                           A  2024    ;  592		init_cpu();
                           A  2025    .line 592
000447 D6 01B6             A  2026    	CALL	_init_cpu
                           A  2027    ;  593		
                           A  2028    ;  594		//Initialize the checksum.
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  40


PC     Object              I  Line    Source main.src
                           A  2029    ;  595		captureBuffer.checksum = 0xFF;
                           A  2030    .line 595
00044A E9FF0012            A  2031    	LDX	_captureBuffer+18,#255
                           A  2032    ;  596		
                           A  2033    ;  597		while(1) {
00044E                     A  2034    _18_L_117:
                           A  2035    .line 597
                           A  2036    ;  598			//Echo everything back to the t
                           A  2037    ;  599			//Should put it in factory test
                           A  2038    ;  600			/*if((ser_rx_size & 0x80) && !s
                           A  2039    ;  601	            //Block received.
                           A  2040    ;  602	            //Echo it back for testing.
                           A  2041    ;  603	            unsigned char rx_size = (se
                           A  2042    ;  604				int i;
                           A  2043    ;  605				
                           A  2044    ;  606	            for(i = 0; i < rx_size;i++)
                           A  2045    ;  607	                ser_tx_buffer[i] = ser_
                           A  2046    ;  608	            }
                           A  2047    ;  609				
                           A  2048    ;  610	            ser_tx_size = rx_size;
                           A  2049    ;  611	            ser_rx_size = 0;
                           A  2050    ;  612				IRQ0 |= 0x08;
                           A  2051    ;  613	        } else {
                           A  2052    ;  614				if(!(U0STAT0 ^ 0x06)) {
                           A  2053    ;  615					IRQ0 |= 0x08;
                           A  2054    ;  616				}
                           A  2055    ;  617			}*/
                           A  2056    ;  618			
                           A  2057    ;  619			receiveSomething();
                           A  2058    .line 619
00044E D6 0413             A  2059    	CALL	_receiveSomething
                           A  2060    ;  620			sendSomething();
                           A  2061    .line 620
000451 D6 03BF             A  2062    	CALL	_sendSomething
                           A  2063    ;  621			if(btn_pressed) { //If the butt
                           A  2064    .line 621
000454 A900002C            A  2065    	CPX	_btn_pressed,#-0
000458 6B F4               A  2066    	JR	Z,_18_L_117
                           A  2067    ;  622				btn_pressed = 0; //Clear th
                           A  2068    .line 622
00045A E900002C            A  2069    	LDX	_btn_pressed,#-0
                           A  2070    ;  623				if(weAreRegistered) { //If 
                           A  2071    .line 623
00045E A9000043            A  2072    	CPX	_weAreRegistered,#-0
000462 6B EA               A  2073    	JR	Z,_18_L_117
                           A  2074    ;  624					sendLoadSpecial = 1; //
                           A  2075    .line 624
000464 E9010041            A  2076    	LDX	_sendLoadSpecial,#1
                           A  2077    ;  625				}
                           A  2078    ;  626			}
                           A  2079    ;  627		}
                           A  2080    .line 627
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  41


PC     Object              I  Line    Source main.src
000468 8B E4               A  2081    	JR	_18_L_117
                           A  2082    .line 628
00046A D6 0000             A  2083    	CALL	__b_framereset
00046D AF                  A  2084    	RET	
                           A  2085    .endfunc "main",628,"_main"
00000C 008E                A  2086    	VECTOR	TIMER0=_isr_timer0
000010 0047                A  2087    	VECTOR	UART0_TX=_isr_uarttx
00000E 0000                A  2088    	VECTOR	UART0_RX=_isr_uartrx
                           A  2089    	XREF __b_ucase:ROM
                           A  2090    	XREF __b_framereset:ROM
                           A  2091    	XREF __b_iframereset:ROM
                           A  2092    	XREF __b_frameset00:ROM
                           A  2093    	XREF __b_iframeset00:ROM
                           A  2094    	XDEF _main
                           A  2095    	XDEF _receiveSomething
                           A  2096    	XDEF _sendSomething
                           A  2097    	XDEF _ArmSpecial
                           A  2098    	XDEF _LoadSpecial
                           A  2099    	XDEF _BarrelReply
                           A  2100    	XDEF _rxedBarrelAck
                           A  2101    	XDEF _rxedBarrelSeen
                           A  2102    	XDEF _rxedRollCall
                           A  2103    	XDEF _rxedResetBarrel
                           A  2104    	XDEF _loadAmmo
                           A  2105    	XDEF _queueChecksum
                           A  2106    	XDEF _queueByte
                           A  2107    	XDEF _sendQueue
                           A  2108    	XDEF _init_cpu
                           A  2109    	XDEF _isr_timer0
                           A  2110    	XDEF _isr_uarttx
                           A  2111    	XDEF _isr_uartrx
                           A  2112    	XDEF _reloadCooldown
                           A  2113    	XDEF _weAreReloading
                           A  2114    	XDEF _weAreRegistered
                           A  2115    	XDEF _sendArmSpecial
                           A  2116    	XDEF _sendLoadSpecial
                           A  2117    	XDEF _sendBarrelReply
                           A  2118    	XDEF _temp_tx_size
                           A  2119    	XDEF _temp_tx_buffer
                           A  2120    	XDEF _lastIO
                           A  2121    	XDEF _tempIO
                           A  2122    	XDEF _btn_pressed
                           A  2123    	XDEF _btn_prelim
                           A  2124    	XDEF _btn_counter
                           A  2125    	XDEF _ir_loaded_tags
                           A  2126    	XDEF _ir_rx_halfbits
                           A  2127    	XDEF _ir_rx_counter
                           A  2128    	XDEF _ser_tx_currentbyte
                           A  2129    	XDEF _ser_tx_cooldown
                           A  2130    	XDEF _ser_tx_size
                           A  2131    	XDEF _ser_tx_buffer
                           A  2132    	XDEF _ser_rx_eob_counter
Zilog Z8 Encore! Macro Assembler Version 2.52 (11010702) 16-Dec-13     15:58:47     page:  42


PC     Object              I  Line    Source main.src
                           A  2133    	XDEF _captureBuffer
                           A  2134    	END


Errors: 0
Warnings: 0
Lines Assembled: 2135
